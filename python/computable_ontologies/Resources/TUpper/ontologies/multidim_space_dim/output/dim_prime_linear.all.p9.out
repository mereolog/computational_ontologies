============================== Prover9 ===============================
Prover9 (32) version Oct-2007, Oct 2007.
Process 7612 was started by torsten on LAPTOP-UF9R3IH7,
Tue Feb  9 05:52:27 2021
The command was "/cygdrive/c/Users/torsten/macleod/prover9 -t300 -f C:\Users\torsten\GitHub\colore\ontologies\multidim_space_dim\conversions\dim_prime_linear.all.p9 c:\Users\torsten".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file C:\Users\torsten\GitHub\colore\ontologies\multidim_space_dim\conversions\dim_prime_linear.all.p9


formulas(sos).
(exists x MinDim(x)).
(all x ((-MaxDim(x) | S(x) & -ZEX(x) & (all y (-S(y) | leq(y,x)))) & (-(S(x) & -ZEX(x) & (all y (-S(y) | leq(y,x)))) | MaxDim(x)))).
(all x ((-MinDim(x) | S(x) & -ZEX(x) & (all y (-(S(y) & -ZEX(y)) | leq(x,y)))) & (-(S(x) & -ZEX(x) & (all y (-(S(y) & -ZEX(y)) | leq(x,y)))) | MinDim(x)))).
(all x all y (-leq(x,y) | S(x))).
(all x all y (-leq(x,y) | S(y))).
(all x (-ZEX(x) | S(x))).
(all x (-S(x) | leq(x,x))).
(all x all y all z (-(leq(x,y) & leq(y,z)) | leq(x,z))).
(all x all y (-(ZEX(x) & ZEX(y)) | x = y)).
(all x all y (-(ZEX(x) & S(y)) | leq(x,y))).
end_of_list.

% Reading from file c:\Users\torsten


============================== end of input ==========================

% From the command line: assign(max_seconds, 300).

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (exists x MinDim(x)) # label(non_clause).  [assumption].
2 (all x ((-MaxDim(x) | S(x) & -ZEX(x) & (all y (-S(y) | leq(y,x)))) & (-(S(x) & -ZEX(x) & (all y (-S(y) | leq(y,x)))) | MaxDim(x)))) # label(non_clause).  [assumption].
3 (all x ((-MinDim(x) | S(x) & -ZEX(x) & (all y (-(S(y) & -ZEX(y)) | leq(x,y)))) & (-(S(x) & -ZEX(x) & (all y (-(S(y) & -ZEX(y)) | leq(x,y)))) | MinDim(x)))) # label(non_clause).  [assumption].
4 (all x all y (-leq(x,y) | S(x))) # label(non_clause).  [assumption].
5 (all x all y (-leq(x,y) | S(y))) # label(non_clause).  [assumption].
6 (all x (-ZEX(x) | S(x))) # label(non_clause).  [assumption].
7 (all x (-S(x) | leq(x,x))) # label(non_clause).  [assumption].
8 (all x all y all z (-(leq(x,y) & leq(y,z)) | leq(x,z))) # label(non_clause).  [assumption].
9 (all x all y (-(ZEX(x) & ZEX(y)) | x = y)) # label(non_clause).  [assumption].
10 (all x all y (-(ZEX(x) & S(y)) | leq(x,y))) # label(non_clause).  [assumption].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

% Clauses before input processing:

formulas(usable).
end_of_list.

formulas(sos).
MinDim(c1).  [clausify(1)].
-MaxDim(x) | S(x).  [clausify(2)].
-MaxDim(x) | -ZEX(x).  [clausify(2)].
-MaxDim(x) | -S(y) | leq(y,x).  [clausify(2)].
-S(x) | ZEX(x) | S(f1(x)) | MaxDim(x).  [clausify(2)].
-S(x) | ZEX(x) | -leq(f1(x),x) | MaxDim(x).  [clausify(2)].
-MinDim(x) | S(x).  [clausify(3)].
-MinDim(x) | -ZEX(x).  [clausify(3)].
-MinDim(x) | -S(y) | ZEX(y) | leq(x,y).  [clausify(3)].
-S(x) | ZEX(x) | S(f2(x)) | MinDim(x).  [clausify(3)].
-S(x) | ZEX(x) | -ZEX(f2(x)) | MinDim(x).  [clausify(3)].
-S(x) | ZEX(x) | -leq(x,f2(x)) | MinDim(x).  [clausify(3)].
-leq(x,y) | S(x).  [clausify(4)].
-leq(x,y) | S(y).  [clausify(5)].
-ZEX(x) | S(x).  [clausify(6)].
-S(x) | leq(x,x).  [clausify(7)].
-leq(x,y) | -leq(y,z) | leq(x,z).  [clausify(8)].
-ZEX(x) | -ZEX(y) | y = x.  [clausify(9)].
-ZEX(x) | -S(y) | leq(x,y).  [clausify(10)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== PREDICATE ELIMINATION =================

Eliminating MinDim/1
11 -MinDim(x) | S(x).  [clausify(3)].
12 MinDim(c1).  [clausify(1)].
Derived: S(c1).  [resolve(11,a,12,a)].
13 -MinDim(x) | -ZEX(x).  [clausify(3)].
Derived: -ZEX(c1).  [resolve(13,a,12,a)].
14 -MinDim(x) | -S(y) | ZEX(y) | leq(x,y).  [clausify(3)].
Derived: -S(x) | ZEX(x) | leq(c1,x).  [resolve(14,a,12,a)].
15 -S(x) | ZEX(x) | S(f2(x)) | MinDim(x).  [clausify(3)].
Derived: -S(x) | ZEX(x) | S(f2(x)) | -S(y) | ZEX(y) | leq(x,y).  [resolve(15,d,14,a)].
16 -S(x) | ZEX(x) | -ZEX(f2(x)) | MinDim(x).  [clausify(3)].
Derived: -S(x) | ZEX(x) | -ZEX(f2(x)) | -S(y) | ZEX(y) | leq(x,y).  [resolve(16,d,14,a)].
17 -S(x) | ZEX(x) | -leq(x,f2(x)) | MinDim(x).  [clausify(3)].
Derived: -S(x) | ZEX(x) | -leq(x,f2(x)) | -S(y) | ZEX(y) | leq(x,y).  [resolve(17,d,14,a)].

Eliminating MaxDim/1
18 -S(x) | ZEX(x) | S(f1(x)) | MaxDim(x).  [clausify(2)].
19 -MaxDim(x) | S(x).  [clausify(2)].
20 -MaxDim(x) | -ZEX(x).  [clausify(2)].
21 -MaxDim(x) | -S(y) | leq(y,x).  [clausify(2)].
Derived: -S(x) | ZEX(x) | S(f1(x)) | -S(y) | leq(y,x).  [resolve(18,d,21,a)].
22 -S(x) | ZEX(x) | -leq(f1(x),x) | MaxDim(x).  [clausify(2)].
Derived: -S(x) | ZEX(x) | -leq(f1(x),x) | -S(y) | leq(y,x).  [resolve(22,d,21,a)].

============================== end predicate elimination =============

Auto_denials:  (non-Horn, no changes).

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ =, S, ZEX, leq ]).
Function symbol precedence:  function_order([ c1, f1, f2 ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
    % set(paramodulation) -> set(back_demod).
  % set(binary_resolution).  % (non-Horn)
  % set(positive_inference). % (non-Horn)
    % set(positive_inference) -> assign(literal_selection, max_negative).
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(back_unit_deletion).  % (non-Horn)
    % set(back_unit_deletion) -> set(unit_deletion).

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

% Clauses after input processing:

formulas(usable).
end_of_list.

formulas(sos).
23 -leq(x,y) | S(x).  [clausify(4)].
24 -leq(x,y) | S(y).  [clausify(5)].
25 -ZEX(x) | S(x).  [clausify(6)].
26 -S(x) | leq(x,x).  [clausify(7)].
27 -leq(x,y) | -leq(y,z) | leq(x,z).  [clausify(8)].
28 -ZEX(x) | -ZEX(y) | y = x.  [clausify(9)].
29 -ZEX(x) | -S(y) | leq(x,y).  [clausify(10)].
30 S(c1).  [resolve(11,a,12,a)].
31 -ZEX(c1).  [resolve(13,a,12,a)].
32 -S(x) | ZEX(x) | leq(c1,x).  [resolve(14,a,12,a)].
33 -S(x) | ZEX(x) | S(f2(x)) | -S(y) | ZEX(y) | leq(x,y).  [resolve(15,d,14,a)].
34 -S(x) | ZEX(x) | -ZEX(f2(x)) | -S(y) | ZEX(y) | leq(x,y).  [resolve(16,d,14,a)].
35 -S(x) | ZEX(x) | -leq(x,f2(x)) | -S(y) | ZEX(y) | leq(x,y).  [resolve(17,d,14,a)].
36 -S(x) | ZEX(x) | S(f1(x)) | -S(y) | leq(y,x).  [resolve(18,d,21,a)].
37 -S(x) | ZEX(x) | -leq(f1(x),x) | -S(y) | leq(y,x).  [resolve(22,d,21,a)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.00 seconds.

given #1 (I,wt=5): 23 -leq(x,y) | S(x).  [clausify(4)].

given #2 (I,wt=5): 24 -leq(x,y) | S(y).  [clausify(5)].

given #3 (I,wt=4): 25 -ZEX(x) | S(x).  [clausify(6)].

given #4 (I,wt=5): 26 -S(x) | leq(x,x).  [clausify(7)].

given #5 (I,wt=9): 27 -leq(x,y) | -leq(y,z) | leq(x,z).  [clausify(8)].

given #6 (I,wt=7): 28 -ZEX(x) | -ZEX(y) | y = x.  [clausify(9)].

given #7 (I,wt=7): 29 -ZEX(x) | -S(y) | leq(x,y).  [clausify(10)].

given #8 (I,wt=2): 30 S(c1).  [resolve(11,a,12,a)].

given #9 (I,wt=2): 31 -ZEX(c1).  [resolve(13,a,12,a)].

given #10 (I,wt=7): 32 -S(x) | ZEX(x) | leq(c1,x).  [resolve(14,a,12,a)].

given #11 (I,wt=14): 33 -S(x) | ZEX(x) | S(f2(x)) | -S(y) | ZEX(y) | leq(x,y).  [resolve(15,d,14,a)].

given #12 (I,wt=14): 34 -S(x) | ZEX(x) | -ZEX(f2(x)) | -S(y) | ZEX(y) | leq(x,y).  [resolve(16,d,14,a)].

given #13 (I,wt=15): 35 -S(x) | ZEX(x) | -leq(x,f2(x)) | -S(y) | ZEX(y) | leq(x,y).  [resolve(17,d,14,a)].

given #14 (I,wt=12): 36 -S(x) | ZEX(x) | S(f1(x)) | -S(y) | leq(y,x).  [resolve(18,d,21,a)].

given #15 (I,wt=13): 37 -S(x) | ZEX(x) | -leq(f1(x),x) | -S(y) | leq(y,x).  [resolve(22,d,21,a)].

given #16 (A,wt=3): 38 leq(c1,c1).  [resolve(30,a,26,a)].

given #17 (T,wt=8): 40 S(f1(c1)) | -S(x) | leq(x,c1).  [resolve(36,a,30,a),unit_del(a,31)].

given #18 (T,wt=10): 39 -S(x) | ZEX(x) | S(f2(x)) | leq(x,c1).  [resolve(33,d,30,a),unit_del(d,31)].

============================== STATISTICS ============================

Given=18. Generated=37. Kept=18. proofs=0.
Usable=18. Sos=0. Demods=0. Limbo=0, Disabled=27. Hints=0.
Weight_deleted=0. Literals_deleted=0.
Forward_subsumed=19. Back_subsumed=0.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=0 (0 lex), Back_demodulated=0. Back_unit_deleted=0.
Demod_attempts=0. Demod_rewrites=0.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=24. Nonunit_bsub_feature_tests=25.
Megabytes=0.05.
User_CPU=0.00, System_CPU=0.00, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

SEARCH FAILED

SEARCH FAILED

Exiting with failure.

------ process 7612 exit (sos_empty) ------

Process 7612 exit (sos_empty) Tue Feb  9 05:52:27 2021

========================== MACLEOD SUMMARY ===========================
reasoner: C:/Users/torsten/macleod/prover9
status: 
execution finished: Tue Feb 09 05:52:32 2021
total CPU time used: 0
The command was "C:/Users/torsten/macleod/prover9 -t300 -f C:\Users\torsten\GitHub\colore\ontologies\multidim_space_dim\conversions\dim_prime_linear.all.p9 c:\Users\torsten"
============================ end of footer ===========================

============================== Mace4 =================================
Mace4 (32) version Oct-2007, Oct 2007.
Process 3292 was started by torsten on LAPTOP-UF9R3IH7,
Sun Feb 21 04:49:58 2021
The command was "/cygdrive/c/Users/torsten/macleod/mace4 -v0 -t300 -s60 -n2 -N40 -f C:\Users\torsten\GitHub\colore\ontologies\simple_features\sfc_fol\conversions\sfc_fol_multi_surface.all.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file C:\Users\torsten\GitHub\colore\ontologies\simple_features\sfc_fol\conversions\sfc_fol_multi_surface.all.p9


formulas(sos).
(all x (sf_multi_surface(x) -> Multipart_ArealRegion(x))).
(all x (Multipart_ArealRegion(x) <-> ArealRegion(x) & Multipart_S(x))).
(all x (Multipart_S(x) <-> S(x) & -Connected_S(x))).
(all x (Connected_S(x) <-> S(x) & (all y (PP(y,x) -> SC(y,difference(x,y)))))).
(all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> leq(z,x) & -EqDim(z,x) & leq(z,y) & -EqDim(z,y))))).
(all x all y (EqDim(x,y) <-> leq(x,y) & leq(y,x))).
(all x all y (leq(x,y) -> S(x))).
(all x all y (leq(x,y) -> S(y))).
(all x (ZEX(x) -> S(x))).
(all x (S(x) -> leq(x,x))).
(all x all y all z (leq(x,y) & leq(y,z) -> leq(x,z))).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x all y (ZEX(x) & S(y) -> leq(x,y))).
(all x all y (Cont(x,y) -> leq(x,y))).
(exists x MinDim(x)).
(all x (MaxDim(x) <-> S(x) & -ZEX(x) & (all y (S(y) -> leq(y,x))))).
(all x (MinDim(x) <-> S(x) & -ZEX(x) & (all y (S(y) & -ZEX(y) -> leq(x,y))))).
(all x (S(x) & -ZEX(x) <-> Cont(x,x))).
(all x all y (Cont(x,y) & Cont(y,x) -> x = y)).
(all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))).
(all x all y (ZEX(x) -> S(x) & -Cont(y,x) & -Cont(x,y))).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x all y (PP(x,y) <-> P(x,y) & x != y)).
(all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))).
(all x all y (S(x) & S(y) & -C(x,y) <-> ZEX(intersection(x,y)))).
(all x all y (S(x) & S(y) & -ZEX(intersection(x,y)) -> Cont(intersection(x,y),x))).
(all x all y all z (Cont(z,x) & Cont(z,y) -> leq(z,intersection(x,y)))).
(all x all y all z (Cont(z,x) & Cont(z,y) & EqDim(z,intersection(x,y)) <-> P(z,intersection(x,y)))).
(all x all y (S(x) & S(y) & -ZEX(difference(x,y)) -> EqDim(x,difference(x,y)))).
(all x all y (lt(y,x) -> x = difference(x,y))).
(all x all y all z (leq(x,y) & Cont(z,x) & lt(intersection(z,y),z) -> Cont(z,difference(x,y)))).
(all x all y all z (leq(x,y) & Cont(z,difference(x,y)) -> Cont(z,x))).
(all x all y all z (leq(x,y) & P(z,difference(x,y)) -> lt(intersection(z,y),z))).
(all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))).
(all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))).
(all x all y (gt(x,y) <-> lt(y,x))).
(all x all y (geq(x,y) <-> leq(y,x))).
(all x all y (lt(x,y) <-> leq(x,y) & -EqDim(x,y))).
(all x (ArealRegion(x) <-> (all y (Curve(y) -> Covers(x,y))))).
(all x all y (Covers(x,y) <-> lt(y,x) & (all z (S(z) -> -(lt(y,z) & lt(z,x)))))).
(all x (Curve(x) <-> -ZEX(x) & -MinDim(x) & (all y (MinDim(y) <-> Covers(x,y))))).
end_of_list.

% From the command line: clear(verbose).

% From the command line: assign(max_seconds, 300).

% From the command line: assign(max_seconds_per, 60).

% From the command line: assign(domain_size, 2).

% From the command line: assign(iterate_up_to, 40).

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x (sf_multi_surface(x) -> Multipart_ArealRegion(x))) # label(non_clause).  [assumption].
2 (all x (Multipart_ArealRegion(x) <-> ArealRegion(x) & Multipart_S(x))) # label(non_clause).  [assumption].
3 (all x (Multipart_S(x) <-> S(x) & -Connected_S(x))) # label(non_clause).  [assumption].
4 (all x (Connected_S(x) <-> S(x) & (all y (PP(y,x) -> SC(y,difference(x,y)))))) # label(non_clause).  [assumption].
5 (all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> leq(z,x) & -EqDim(z,x) & leq(z,y) & -EqDim(z,y))))) # label(non_clause).  [assumption].
6 (all x all y (EqDim(x,y) <-> leq(x,y) & leq(y,x))) # label(non_clause).  [assumption].
7 (all x all y (leq(x,y) -> S(x))) # label(non_clause).  [assumption].
8 (all x all y (leq(x,y) -> S(y))) # label(non_clause).  [assumption].
9 (all x (ZEX(x) -> S(x))) # label(non_clause).  [assumption].
10 (all x (S(x) -> leq(x,x))) # label(non_clause).  [assumption].
11 (all x all y all z (leq(x,y) & leq(y,z) -> leq(x,z))) # label(non_clause).  [assumption].
12 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
13 (all x all y (ZEX(x) & S(y) -> leq(x,y))) # label(non_clause).  [assumption].
14 (all x all y (Cont(x,y) -> leq(x,y))) # label(non_clause).  [assumption].
15 (exists x MinDim(x)) # label(non_clause).  [assumption].
16 (all x (MaxDim(x) <-> S(x) & -ZEX(x) & (all y (S(y) -> leq(y,x))))) # label(non_clause).  [assumption].
17 (all x (MinDim(x) <-> S(x) & -ZEX(x) & (all y (S(y) & -ZEX(y) -> leq(x,y))))) # label(non_clause).  [assumption].
18 (all x (S(x) & -ZEX(x) <-> Cont(x,x))) # label(non_clause).  [assumption].
19 (all x all y (Cont(x,y) & Cont(y,x) -> x = y)) # label(non_clause).  [assumption].
20 (all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))) # label(non_clause).  [assumption].
21 (all x all y (ZEX(x) -> S(x) & -Cont(y,x) & -Cont(x,y))) # label(non_clause).  [assumption].
22 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
23 (all x all y (PP(x,y) <-> P(x,y) & x != y)) # label(non_clause).  [assumption].
24 (all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))) # label(non_clause).  [assumption].
25 (all x all y (S(x) & S(y) & -C(x,y) <-> ZEX(intersection(x,y)))) # label(non_clause).  [assumption].
26 (all x all y (S(x) & S(y) & -ZEX(intersection(x,y)) -> Cont(intersection(x,y),x))) # label(non_clause).  [assumption].
27 (all x all y all z (Cont(z,x) & Cont(z,y) -> leq(z,intersection(x,y)))) # label(non_clause).  [assumption].
28 (all x all y all z (Cont(z,x) & Cont(z,y) & EqDim(z,intersection(x,y)) <-> P(z,intersection(x,y)))) # label(non_clause).  [assumption].
29 (all x all y (S(x) & S(y) & -ZEX(difference(x,y)) -> EqDim(x,difference(x,y)))) # label(non_clause).  [assumption].
30 (all x all y (lt(y,x) -> x = difference(x,y))) # label(non_clause).  [assumption].
31 (all x all y all z (leq(x,y) & Cont(z,x) & lt(intersection(z,y),z) -> Cont(z,difference(x,y)))) # label(non_clause).  [assumption].
32 (all x all y all z (leq(x,y) & Cont(z,difference(x,y)) -> Cont(z,x))) # label(non_clause).  [assumption].
33 (all x all y all z (leq(x,y) & P(z,difference(x,y)) -> lt(intersection(z,y),z))) # label(non_clause).  [assumption].
34 (all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))) # label(non_clause).  [assumption].
35 (all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
36 (all x all y (gt(x,y) <-> lt(y,x))) # label(non_clause).  [assumption].
37 (all x all y (geq(x,y) <-> leq(y,x))) # label(non_clause).  [assumption].
38 (all x all y (lt(x,y) <-> leq(x,y) & -EqDim(x,y))) # label(non_clause).  [assumption].
39 (all x (ArealRegion(x) <-> (all y (Curve(y) -> Covers(x,y))))) # label(non_clause).  [assumption].
40 (all x all y (Covers(x,y) <-> lt(y,x) & (all z (S(z) -> -(lt(y,z) & lt(z,x)))))) # label(non_clause).  [assumption].
41 (all x (Curve(x) <-> -ZEX(x) & -MinDim(x) & (all y (MinDim(y) <-> Covers(x,y))))) # label(non_clause).  [assumption].

============================== end of process non-clausal formulas ===

============================== CLAUSES FOR SEARCH ====================

formulas(mace4_clauses).
-sf_multi_surface(x) | Multipart_ArealRegion(x).
-Multipart_ArealRegion(x) | ArealRegion(x).
-Multipart_ArealRegion(x) | Multipart_S(x).
Multipart_ArealRegion(x) | -ArealRegion(x) | -Multipart_S(x).
-Multipart_S(x) | S(x).
-Multipart_S(x) | -Connected_S(x).
Multipart_S(x) | -S(x) | Connected_S(x).
-Connected_S(x) | S(x).
-Connected_S(x) | -PP(y,x) | SC(y,difference(x,y)).
Connected_S(x) | -S(x) | PP(f1(x),x).
Connected_S(x) | -S(x) | -SC(f1(x),difference(x,f1(x))).
-SC(x,y) | Cont(f2(x,y),x).
-SC(x,y) | Cont(f2(x,y),y).
-SC(x,y) | -Cont(z,x) | -Cont(z,y) | leq(z,x).
-SC(x,y) | -Cont(z,x) | -Cont(z,y) | -EqDim(z,x).
-SC(x,y) | -Cont(z,x) | -Cont(z,y) | leq(z,y).
-SC(x,y) | -Cont(z,x) | -Cont(z,y) | -EqDim(z,y).
SC(x,y) | -Cont(z,x) | -Cont(z,y) | Cont(f3(x,y),x).
SC(x,y) | -Cont(z,x) | -Cont(z,y) | Cont(f3(x,y),y).
SC(x,y) | -Cont(z,x) | -Cont(z,y) | -leq(f3(x,y),x) | EqDim(f3(x,y),x) | -leq(f3(x,y),y) | EqDim(f3(x,y),y).
-EqDim(x,y) | leq(x,y).
-EqDim(x,y) | leq(y,x).
EqDim(x,y) | -leq(x,y) | -leq(y,x).
-leq(x,y) | S(x).
-leq(x,y) | S(y).
-ZEX(x) | S(x).
-S(x) | leq(x,x).
-leq(x,y) | -leq(y,z) | leq(x,z).
-ZEX(x) | -ZEX(y) | y = x.
-ZEX(x) | -S(y) | leq(x,y).
-Cont(x,y) | leq(x,y).
MinDim(c1).
-MaxDim(x) | S(x).
-MaxDim(x) | -ZEX(x).
-MaxDim(x) | -S(y) | leq(y,x).
MaxDim(x) | -S(x) | ZEX(x) | S(f4(x)).
MaxDim(x) | -S(x) | ZEX(x) | -leq(f4(x),x).
-MinDim(x) | S(x).
-MinDim(x) | -ZEX(x).
-MinDim(x) | -S(y) | ZEX(y) | leq(x,y).
MinDim(x) | -S(x) | ZEX(x) | S(f5(x)).
MinDim(x) | -S(x) | ZEX(x) | -ZEX(f5(x)).
MinDim(x) | -S(x) | ZEX(x) | -leq(x,f5(x)).
-S(x) | ZEX(x) | Cont(x,x).
S(x) | -Cont(x,x).
-ZEX(x) | -Cont(x,x).
-Cont(x,y) | -Cont(y,x) | y = x.
-Cont(x,y) | -Cont(y,z) | Cont(x,z).
-ZEX(x) | S(x).
-ZEX(x) | -Cont(y,x).
-ZEX(x) | -Cont(x,y).
-ZEX(x) | -ZEX(y) | y = x.
-PP(x,y) | P(x,y).
-PP(x,y) | y != x.
PP(x,y) | -P(x,y) | y = x.
-P(x,y) | Cont(x,y).
-P(x,y) | EqDim(x,y).
P(x,y) | -Cont(x,y) | -EqDim(x,y).
-S(x) | -S(y) | C(x,y) | ZEX(intersection(x,y)).
S(x) | -ZEX(intersection(x,y)).
S(x) | -ZEX(intersection(y,x)).
-C(x,y) | -ZEX(intersection(x,y)).
-S(x) | -S(y) | ZEX(intersection(x,y)) | Cont(intersection(x,y),x).
-Cont(x,y) | -Cont(x,z) | leq(x,intersection(y,z)).
-Cont(x,y) | -Cont(x,z) | -EqDim(x,intersection(y,z)) | P(x,intersection(y,z)).
Cont(x,y) | -P(x,intersection(y,z)).
Cont(x,y) | -P(x,intersection(z,y)).
EqDim(x,intersection(y,z)) | -P(x,intersection(y,z)).
-S(x) | -S(y) | ZEX(difference(x,y)) | EqDim(x,difference(x,y)).
-lt(x,y) | difference(y,x) = y.
-leq(x,y) | -Cont(z,x) | -lt(intersection(z,y),z) | Cont(z,difference(x,y)).
-leq(x,y) | -Cont(z,difference(x,y)) | Cont(z,x).
-leq(x,y) | -P(z,difference(x,y)) | lt(intersection(z,y),z).
-ZEX(difference(x,y)) | ZEX(x) | Cont(x,y).
ZEX(difference(x,y)) | -ZEX(x).
ZEX(difference(x,y)) | -Cont(x,y).
-C(x,y) | Cont(f6(x,y),x).
-C(x,y) | Cont(f6(x,y),y).
C(x,y) | -Cont(z,x) | -Cont(z,y).
-gt(x,y) | lt(y,x).
gt(x,y) | -lt(y,x).
-geq(x,y) | leq(y,x).
geq(x,y) | -leq(y,x).
-lt(x,y) | leq(x,y).
-lt(x,y) | -EqDim(x,y).
lt(x,y) | -leq(x,y) | EqDim(x,y).
-ArealRegion(x) | -Curve(y) | Covers(x,y).
ArealRegion(x) | Curve(f7(x)).
ArealRegion(x) | -Covers(x,f7(x)).
-Covers(x,y) | lt(y,x).
-Covers(x,y) | -S(z) | -lt(y,z) | -lt(z,x).
Covers(x,y) | -lt(y,x) | S(f8(x,y)).
Covers(x,y) | -lt(y,x) | lt(y,f8(x,y)).
Covers(x,y) | -lt(y,x) | lt(f8(x,y),x).
-Curve(x) | -ZEX(x).
-Curve(x) | -MinDim(x).
-Curve(x) | -MinDim(y) | Covers(x,y).
-Curve(x) | MinDim(y) | -Covers(x,y).
Curve(x) | ZEX(x) | MinDim(x) | MinDim(f9(x)) | Covers(x,f9(x)).
Curve(x) | ZEX(x) | MinDim(x) | -MinDim(f9(x)) | -Covers(x,f9(x)).
end_of_list.

============================== end of clauses for search =============

% The maximum domain element in the input is 0.

============================== DOMAIN SIZE 2 =========================

=== Mace4 starting on domain size 2. ===

============================== MODEL =================================

interpretation( 2, [number=1, seconds=0], [

        function(c1, [ 0 ]),

        function(f1(_), [ 0, 0 ]),

        function(f4(_), [ 0, 0 ]),

        function(f5(_), [ 0, 0 ]),

        function(f7(_), [ 0, 0 ]),

        function(f9(_), [ 0, 0 ]),

        function(difference(_,_), [
			   1, 0,
			   1, 1 ]),

        function(intersection(_,_), [
			   0, 1,
			   1, 1 ]),

        function(f2(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f3(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f6(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f8(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(ArealRegion(_), [ 1, 1 ]),

        relation(Connected_S(_), [ 1, 1 ]),

        relation(Curve(_), [ 0, 0 ]),

        relation(MaxDim(_), [ 1, 0 ]),

        relation(MinDim(_), [ 1, 0 ]),

        relation(Multipart_ArealRegion(_), [ 0, 0 ]),

        relation(Multipart_S(_), [ 0, 0 ]),

        relation(S(_), [ 1, 1 ]),

        relation(ZEX(_), [ 0, 1 ]),

        relation(sf_multi_surface(_), [ 0, 0 ]),

        relation(C(_,_), [
			   1, 0,
			   0, 0 ]),

        relation(Cont(_,_), [
			   1, 0,
			   0, 0 ]),

        relation(Covers(_,_), [
			   0, 1,
			   0, 0 ]),

        relation(EqDim(_,_), [
			   1, 0,
			   0, 1 ]),

        relation(P(_,_), [
			   1, 0,
			   0, 0 ]),

        relation(PP(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(SC(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(geq(_,_), [
			   1, 1,
			   0, 1 ]),

        relation(gt(_,_), [
			   0, 1,
			   0, 0 ]),

        relation(leq(_,_), [
			   1, 0,
			   1, 1 ]),

        relation(lt(_,_), [
			   0, 0,
			   1, 0 ])
]).

============================== end of model ==========================

============================== STATISTICS ============================

For domain size 2.

Current CPU time: 0.00 seconds (total CPU time: 0.01 seconds).
Ground clauses: seen=411, kept=401.
Selections=26, assignments=27, propagations=77, current_models=1.
Rewrite_terms=247, rewrite_bools=652, indexes=51.
Rules_from_neg_clauses=10, cross_offs=10.

============================== end of statistics =====================

------ process 3292 exit (max_models) ------

User_CPU=0.01, System_CPU=0.03, Wall_clock=0.

Exiting with 1 model.

Process 3292 exit (max_models) Sun Feb 21 04:49:58 2021
The process finished Sun Feb 21 04:49:58 2021

========================== MACLEOD SUMMARY ===========================
reasoner: C:/Users/torsten/macleod/mace4
status: MODEL
execution finished: Sun Feb 21 04:50:03 2021
total CPU time used: 0
The command was "C:/Users/torsten/macleod/mace4 -v0 -t300 -s60 -n2 -N40 -f C:\Users\torsten\GitHub\colore\ontologies\simple_features\sfc_fol\conversions\sfc_fol_multi_surface.all.p9"
============================ end of footer ===========================

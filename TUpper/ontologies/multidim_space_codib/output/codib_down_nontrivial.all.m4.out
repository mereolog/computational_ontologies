============================== Mace4 =================================
Mace4 (32) version Oct-2007, Oct 2007.
Process 9536 was started by torsten on LAPTOP-UF9R3IH7,
Thu Feb 25 11:59:53 2021
The command was "/cygdrive/c/Users/torsten/macleod/mace4 -v0 -t600 -s60 -n2 -N40 -f C:\Users\torsten\GitHub\colore\ontologies\multidim_space_codib\conversions\codib_down_nontrivial.all.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file C:\Users\torsten\GitHub\colore\ontologies\multidim_space_codib\conversions\codib_down_nontrivial.all.p9


formulas(sos).
(all x (S(x) & -ZEX(x) -> (exists y (P(y,x) & Min(y))))).
(all x all y (S(x) & S(y) & BCont(x,y) -> Cont(x,y) & Inc(x,y))).
(all x all y all v all z (S(x) & S(y) & S(v) & S(z) & SC(x,y) & Min(x) & P(x,v) & Cont(y,v) & Cont(z,x) & Cont(z,y) -> BCont(z,x))).
(all x all y all z all v (S(x) & S(y) & S(v) & S(z) & SC(x,y) & P(x,v) & P(y,v) & Cont(z,x) & Cont(z,y) & Covers(v,z) -> -BCont(z,v))).
(all x all y all z (S(x) & S(y) & S(z) & BCont(x,y) & P(y,z) & (all v all w (S(v) & S(w) & P(v,z) & -PO(v,y) & P(w,x) -> -Cont(w,v))) -> BCont(x,z))).
(all x all y all z (S(x) & S(y) & S(z) & BCont(x,y) & Cont(z,x) -> BCont(z,y))).
(all x all y (S(x) & S(y) & BCont(x,y) <-> S(x) & S(y) & -ZEX(x) & (all z (P(z,x) & Min(z) -> BCont(z,y))))).
(exists var1 exists var2 (P(var1,var2) & var1 != var2)).
(exists var3 exists var4 (-P(var3,var4) & var3 != var4)).
(exists var5 exists var6 (Cont(var5,var6) & var5 != var6)).
(exists var7 exists var8 (-Cont(var7,var8) & var7 != var8)).
(exists var9 exists var10 (SC(var9,var10) & var9 != var10)).
(exists var11 exists var12 (-SC(var11,var12) & var11 != var12)).
(exists var13 MinDim(var13)).
(exists var14 -MinDim(var14)).
(exists var15 exists var16 (ICont(var15,var16) & var15 != var16)).
(exists var17 exists var18 (-ICont(var17,var18) & var17 != var18)).
(exists var19 S(var19)).
(exists var20 -S(var20)).
(exists var21 Max(var21)).
(exists var22 -Max(var22)).
(exists var23 exists var24 (lt(var23,var24) & var23 != var24)).
(exists var25 exists var26 (-lt(var25,var26) & var25 != var26)).
(exists var27 exists var28 (geq(var27,var28) & var27 != var28)).
(exists var29 exists var30 (-geq(var29,var30) & var29 != var30)).
(exists var31 exists var32 (PP(var31,var32) & var31 != var32)).
(exists var33 exists var34 (-PP(var33,var34) & var33 != var34)).
(exists var35 exists var36 (BCont(var35,var36) & var35 != var36)).
(exists var37 exists var38 (-BCont(var37,var38) & var37 != var38)).
(exists var39 exists var40 (PO(var39,var40) & var39 != var40)).
(exists var41 exists var42 (-PO(var41,var42) & var41 != var42)).
(exists var43 Min(var43)).
(exists var44 -Min(var44)).
(exists var45 exists var46 (gt(var45,var46) & var45 != var46)).
(exists var47 exists var48 (-gt(var47,var48) & var47 != var48)).
(exists var49 exists var50 (TCont(var49,var50) & var49 != var50)).
(exists var51 exists var52 (-TCont(var51,var52) & var51 != var52)).
(exists var53 exists var54 (Covers(var53,var54) & var53 != var54)).
(exists var55 exists var56 (-Covers(var55,var56) & var55 != var56)).
(exists var57 MaxDim(var57)).
(exists var58 -MaxDim(var58)).
(exists var59 exists var60 (EqDim(var59,var60) & var59 != var60)).
(exists var61 exists var62 (-EqDim(var61,var62) & var61 != var62)).
(exists var63 exists var64 (Inc(var63,var64) & var63 != var64)).
(exists var65 exists var66 (-Inc(var65,var66) & var65 != var66)).
(exists var67 exists var68 (C(var67,var68) & var67 != var68)).
(exists var69 exists var70 (-C(var69,var70) & var69 != var70)).
(exists var71 exists var72 (leq(var71,var72) & var71 != var72)).
(exists var73 exists var74 (-leq(var73,var74) & var73 != var74)).
(exists var75 ZEX(var75)).
(exists var76 -ZEX(var76)).
(exists var77 Closed(var77)).
(exists var78 -Closed(var78)).
(all x all y (TCont(x,y) <-> Cont(x,y) & (exists z (Cont(z,x) & BCont(z,y))))).
(all x all y (SC(x,y) -> C(x,y))).
(all x all y (SC(x,y) -> -(exists z (Cont(z,x) & P(z,y))))).
(all x all y (SC(x,y) -> -(exists z (P(z,x) & Cont(z,y))))).
(all x all y (C(x,y) & (all z (-Cont(z,x) | -Cont(z,y) | -P(z,x) & -P(z,y))) -> SC(x,y))).
(all x -SC(x,x)).
(all x all y (SC(x,y) -> SC(y,x))).
(all x all y (SC(x,y) -> (exists z (lt(z,x) & lt(z,y) & Cont(z,x) & Cont(z,y))))).
(all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> leq(z,x) & -EqDim(z,x) & leq(z,y) & -EqDim(z,y))))).
(all x all y (EqDim(x,y) <-> leq(x,y) & leq(y,x))).
(all x all y (leq(x,y) -> S(x))).
(all x all y (leq(x,y) -> S(y))).
(all x (ZEX(x) -> S(x))).
(all x (S(x) -> leq(x,x))).
(all x all y all z (leq(x,y) & leq(y,z) -> leq(x,z))).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x all y (ZEX(x) & S(y) -> leq(x,y))).
(all x all y (Cont(x,y) -> leq(x,y))).
(exists x MinDim(x)).
(all x (MaxDim(x) <-> S(x) & -ZEX(x) & (all y (S(y) -> leq(y,x))))).
(all x (MinDim(x) <-> S(x) & -ZEX(x) & (all y (S(y) & -ZEX(y) -> leq(x,y))))).
(all x (S(x) & -ZEX(x) <-> Cont(x,x))).
(all x all y (Cont(x,y) & Cont(y,x) -> x = y)).
(all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))).
(all x all y (ZEX(x) -> S(x) & -Cont(y,x) & -Cont(x,y))).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))).
(all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))).
(all x -Inc(x,x)).
(all x all y (Inc(x,y) -> Inc(y,x))).
(all x all y (EqDim(x,y) -> -Inc(x,y))).
(all x all y (Inc(x,y) -> lt(x,y) | lt(y,x))).
(all x all y (Cont(x,y) & lt(x,y) -> Inc(x,y))).
(all x all y all z (Inc(x,y) & P(y,z) -> Inc(x,z))).
(all x all y (Inc(x,y) <-> (exists z (leq(z,x) & -EqDim(z,x) & Cont(z,x) & P(z,y))) | (exists z (leq(z,y) & -EqDim(z,y) & Cont(z,y) & P(z,x))))).
(all x (S(x) & -ZEX(x) -> PO(x,x))).
(all x all y (PO(x,y) -> PO(y,x))).
(all x all y (PO(x,y) -> EqDim(x,y))).
(all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))).
(all x (Max(x) <-> S(x) & -ZEX(x) & (all y -PP(x,y)))).
(all x (Min(x) <-> S(x) & -ZEX(x) & (all y -PP(y,x)))).
(all x all y (PP(x,y) <-> P(x,y) & x != y)).
(all x all y (BCont(x,y) -> Cont(x,y) & -EqDim(x,y))).
(all x all y all v all z (SC(x,y) & Min(x) & P(x,v) & Cont(y,v) & Cont(z,x) & Cont(z,y) -> BCont(z,x))).
(all x all y all z all v (SC(x,y) & P(x,v) & P(y,v) & Cont(z,x) & Cont(z,y) & Covers(v,z) -> -BCont(z,v))).
(all x all y all z (BCont(x,y) & P(y,z) & (all v all w (P(v,z) & -PO(v,y) & P(w,x) -> -Cont(w,v))) -> BCont(x,z))).
(all x all y all z (BCont(x,y) & Cont(z,x) -> BCont(z,y))).
(all x all y (Covers(x,y) <-> lt(y,x) & (all z (S(z) -> -(lt(y,z) & lt(z,x)))))).
(all x all y (gt(x,y) <-> lt(y,x))).
(all x all y (geq(x,y) <-> leq(y,x))).
(all x all y (lt(x,y) <-> leq(x,y) & -EqDim(x,y))).
(all x all y (ICont(x,y) <-> Cont(x,y) & (all z (Cont(z,x) -> -BCont(z,y))))).
(all x (Closed(x) <-> (all y -BCont(y,x)))).
(all x all y (S(x) & S(y) & -C(x,y) <-> ZEX(intersection(x,y)))).
(all x all y (S(x) & S(y) & -ZEX(intersection(x,y)) -> Cont(intersection(x,y),x))).
(all x all y all z (Cont(z,x) & Cont(z,y) -> leq(z,intersection(x,y)))).
(all x all y all z (Cont(z,x) & Cont(z,y) & EqDim(z,intersection(x,y)) <-> P(z,intersection(x,y)))).
(all x all y (S(x) & S(y) & -ZEX(difference(x,y)) -> EqDim(x,difference(x,y)))).
(all x all y (lt(y,x) -> x = difference(x,y))).
(all x all y all z (leq(x,y) & Cont(z,x) & lt(intersection(z,y),z) -> Cont(z,difference(x,y)))).
(all x all y all z (leq(x,y) & Cont(z,difference(x,y)) -> Cont(z,x))).
(all x all y all z (leq(x,y) & P(z,difference(x,y)) -> lt(intersection(z,y),z))).
(all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))).
end_of_list.

% From the command line: clear(verbose).

% From the command line: assign(max_seconds, 600).

% From the command line: assign(max_seconds_per, 60).

% From the command line: assign(domain_size, 2).

% From the command line: assign(iterate_up_to, 40).

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x (S(x) & -ZEX(x) -> (exists y (P(y,x) & Min(y))))) # label(non_clause).  [assumption].
2 (all x all y (S(x) & S(y) & BCont(x,y) -> Cont(x,y) & Inc(x,y))) # label(non_clause).  [assumption].
3 (all x all y all v all z (S(x) & S(y) & S(v) & S(z) & SC(x,y) & Min(x) & P(x,v) & Cont(y,v) & Cont(z,x) & Cont(z,y) -> BCont(z,x))) # label(non_clause).  [assumption].
4 (all x all y all z all v (S(x) & S(y) & S(v) & S(z) & SC(x,y) & P(x,v) & P(y,v) & Cont(z,x) & Cont(z,y) & Covers(v,z) -> -BCont(z,v))) # label(non_clause).  [assumption].
5 (all x all y all z (S(x) & S(y) & S(z) & BCont(x,y) & P(y,z) & (all v all w (S(v) & S(w) & P(v,z) & -PO(v,y) & P(w,x) -> -Cont(w,v))) -> BCont(x,z))) # label(non_clause).  [assumption].
6 (all x all y all z (S(x) & S(y) & S(z) & BCont(x,y) & Cont(z,x) -> BCont(z,y))) # label(non_clause).  [assumption].
7 (all x all y (S(x) & S(y) & BCont(x,y) <-> S(x) & S(y) & -ZEX(x) & (all z (P(z,x) & Min(z) -> BCont(z,y))))) # label(non_clause).  [assumption].
8 (exists var1 exists var2 (P(var1,var2) & var1 != var2)) # label(non_clause).  [assumption].
9 (exists var3 exists var4 (-P(var3,var4) & var3 != var4)) # label(non_clause).  [assumption].
10 (exists var5 exists var6 (Cont(var5,var6) & var5 != var6)) # label(non_clause).  [assumption].
11 (exists var7 exists var8 (-Cont(var7,var8) & var7 != var8)) # label(non_clause).  [assumption].
12 (exists var9 exists var10 (SC(var9,var10) & var9 != var10)) # label(non_clause).  [assumption].
13 (exists var11 exists var12 (-SC(var11,var12) & var11 != var12)) # label(non_clause).  [assumption].
14 (exists var13 MinDim(var13)) # label(non_clause).  [assumption].
15 (exists var14 -MinDim(var14)) # label(non_clause).  [assumption].
16 (exists var15 exists var16 (ICont(var15,var16) & var15 != var16)) # label(non_clause).  [assumption].
17 (exists var17 exists var18 (-ICont(var17,var18) & var17 != var18)) # label(non_clause).  [assumption].
18 (exists var19 S(var19)) # label(non_clause).  [assumption].
19 (exists var20 -S(var20)) # label(non_clause).  [assumption].
20 (exists var21 Max(var21)) # label(non_clause).  [assumption].
21 (exists var22 -Max(var22)) # label(non_clause).  [assumption].
22 (exists var23 exists var24 (lt(var23,var24) & var23 != var24)) # label(non_clause).  [assumption].
23 (exists var25 exists var26 (-lt(var25,var26) & var25 != var26)) # label(non_clause).  [assumption].
24 (exists var27 exists var28 (geq(var27,var28) & var27 != var28)) # label(non_clause).  [assumption].
25 (exists var29 exists var30 (-geq(var29,var30) & var29 != var30)) # label(non_clause).  [assumption].
26 (exists var31 exists var32 (PP(var31,var32) & var31 != var32)) # label(non_clause).  [assumption].
27 (exists var33 exists var34 (-PP(var33,var34) & var33 != var34)) # label(non_clause).  [assumption].
28 (exists var35 exists var36 (BCont(var35,var36) & var35 != var36)) # label(non_clause).  [assumption].
29 (exists var37 exists var38 (-BCont(var37,var38) & var37 != var38)) # label(non_clause).  [assumption].
30 (exists var39 exists var40 (PO(var39,var40) & var39 != var40)) # label(non_clause).  [assumption].
31 (exists var41 exists var42 (-PO(var41,var42) & var41 != var42)) # label(non_clause).  [assumption].
32 (exists var43 Min(var43)) # label(non_clause).  [assumption].
33 (exists var44 -Min(var44)) # label(non_clause).  [assumption].
34 (exists var45 exists var46 (gt(var45,var46) & var45 != var46)) # label(non_clause).  [assumption].
35 (exists var47 exists var48 (-gt(var47,var48) & var47 != var48)) # label(non_clause).  [assumption].
36 (exists var49 exists var50 (TCont(var49,var50) & var49 != var50)) # label(non_clause).  [assumption].
37 (exists var51 exists var52 (-TCont(var51,var52) & var51 != var52)) # label(non_clause).  [assumption].
38 (exists var53 exists var54 (Covers(var53,var54) & var53 != var54)) # label(non_clause).  [assumption].
39 (exists var55 exists var56 (-Covers(var55,var56) & var55 != var56)) # label(non_clause).  [assumption].
40 (exists var57 MaxDim(var57)) # label(non_clause).  [assumption].
41 (exists var58 -MaxDim(var58)) # label(non_clause).  [assumption].
42 (exists var59 exists var60 (EqDim(var59,var60) & var59 != var60)) # label(non_clause).  [assumption].
43 (exists var61 exists var62 (-EqDim(var61,var62) & var61 != var62)) # label(non_clause).  [assumption].
44 (exists var63 exists var64 (Inc(var63,var64) & var63 != var64)) # label(non_clause).  [assumption].
45 (exists var65 exists var66 (-Inc(var65,var66) & var65 != var66)) # label(non_clause).  [assumption].
46 (exists var67 exists var68 (C(var67,var68) & var67 != var68)) # label(non_clause).  [assumption].
47 (exists var69 exists var70 (-C(var69,var70) & var69 != var70)) # label(non_clause).  [assumption].
48 (exists var71 exists var72 (leq(var71,var72) & var71 != var72)) # label(non_clause).  [assumption].
49 (exists var73 exists var74 (-leq(var73,var74) & var73 != var74)) # label(non_clause).  [assumption].
50 (exists var75 ZEX(var75)) # label(non_clause).  [assumption].
51 (exists var76 -ZEX(var76)) # label(non_clause).  [assumption].
52 (exists var77 Closed(var77)) # label(non_clause).  [assumption].
53 (exists var78 -Closed(var78)) # label(non_clause).  [assumption].
54 (all x all y (TCont(x,y) <-> Cont(x,y) & (exists z (Cont(z,x) & BCont(z,y))))) # label(non_clause).  [assumption].
55 (all x all y (SC(x,y) -> C(x,y))) # label(non_clause).  [assumption].
56 (all x all y (SC(x,y) -> -(exists z (Cont(z,x) & P(z,y))))) # label(non_clause).  [assumption].
57 (all x all y (SC(x,y) -> -(exists z (P(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
58 (all x all y (C(x,y) & (all z (-Cont(z,x) | -Cont(z,y) | -P(z,x) & -P(z,y))) -> SC(x,y))) # label(non_clause).  [assumption].
59 (all x -SC(x,x)) # label(non_clause).  [assumption].
60 (all x all y (SC(x,y) -> SC(y,x))) # label(non_clause).  [assumption].
61 (all x all y (SC(x,y) -> (exists z (lt(z,x) & lt(z,y) & Cont(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
62 (all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> leq(z,x) & -EqDim(z,x) & leq(z,y) & -EqDim(z,y))))) # label(non_clause).  [assumption].
63 (all x all y (EqDim(x,y) <-> leq(x,y) & leq(y,x))) # label(non_clause).  [assumption].
64 (all x all y (leq(x,y) -> S(x))) # label(non_clause).  [assumption].
65 (all x all y (leq(x,y) -> S(y))) # label(non_clause).  [assumption].
66 (all x (ZEX(x) -> S(x))) # label(non_clause).  [assumption].
67 (all x (S(x) -> leq(x,x))) # label(non_clause).  [assumption].
68 (all x all y all z (leq(x,y) & leq(y,z) -> leq(x,z))) # label(non_clause).  [assumption].
69 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
70 (all x all y (ZEX(x) & S(y) -> leq(x,y))) # label(non_clause).  [assumption].
71 (all x all y (Cont(x,y) -> leq(x,y))) # label(non_clause).  [assumption].
72 (exists x MinDim(x)) # label(non_clause).  [assumption].
73 (all x (MaxDim(x) <-> S(x) & -ZEX(x) & (all y (S(y) -> leq(y,x))))) # label(non_clause).  [assumption].
74 (all x (MinDim(x) <-> S(x) & -ZEX(x) & (all y (S(y) & -ZEX(y) -> leq(x,y))))) # label(non_clause).  [assumption].
75 (all x (S(x) & -ZEX(x) <-> Cont(x,x))) # label(non_clause).  [assumption].
76 (all x all y (Cont(x,y) & Cont(y,x) -> x = y)) # label(non_clause).  [assumption].
77 (all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))) # label(non_clause).  [assumption].
78 (all x all y (ZEX(x) -> S(x) & -Cont(y,x) & -Cont(x,y))) # label(non_clause).  [assumption].
79 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
80 (all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))) # label(non_clause).  [assumption].
81 (all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
82 (all x -Inc(x,x)) # label(non_clause).  [assumption].
83 (all x all y (Inc(x,y) -> Inc(y,x))) # label(non_clause).  [assumption].
84 (all x all y (EqDim(x,y) -> -Inc(x,y))) # label(non_clause).  [assumption].
85 (all x all y (Inc(x,y) -> lt(x,y) | lt(y,x))) # label(non_clause).  [assumption].
86 (all x all y (Cont(x,y) & lt(x,y) -> Inc(x,y))) # label(non_clause).  [assumption].
87 (all x all y all z (Inc(x,y) & P(y,z) -> Inc(x,z))) # label(non_clause).  [assumption].
88 (all x all y (Inc(x,y) <-> (exists z (leq(z,x) & -EqDim(z,x) & Cont(z,x) & P(z,y))) | (exists z (leq(z,y) & -EqDim(z,y) & Cont(z,y) & P(z,x))))) # label(non_clause).  [assumption].
89 (all x (S(x) & -ZEX(x) -> PO(x,x))) # label(non_clause).  [assumption].
90 (all x all y (PO(x,y) -> PO(y,x))) # label(non_clause).  [assumption].
91 (all x all y (PO(x,y) -> EqDim(x,y))) # label(non_clause).  [assumption].
92 (all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))) # label(non_clause).  [assumption].
93 (all x (Max(x) <-> S(x) & -ZEX(x) & (all y -PP(x,y)))) # label(non_clause).  [assumption].
94 (all x (Min(x) <-> S(x) & -ZEX(x) & (all y -PP(y,x)))) # label(non_clause).  [assumption].
95 (all x all y (PP(x,y) <-> P(x,y) & x != y)) # label(non_clause).  [assumption].
96 (all x all y (BCont(x,y) -> Cont(x,y) & -EqDim(x,y))) # label(non_clause).  [assumption].
97 (all x all y all v all z (SC(x,y) & Min(x) & P(x,v) & Cont(y,v) & Cont(z,x) & Cont(z,y) -> BCont(z,x))) # label(non_clause).  [assumption].
98 (all x all y all z all v (SC(x,y) & P(x,v) & P(y,v) & Cont(z,x) & Cont(z,y) & Covers(v,z) -> -BCont(z,v))) # label(non_clause).  [assumption].
99 (all x all y all z (BCont(x,y) & P(y,z) & (all v all w (P(v,z) & -PO(v,y) & P(w,x) -> -Cont(w,v))) -> BCont(x,z))) # label(non_clause).  [assumption].
100 (all x all y all z (BCont(x,y) & Cont(z,x) -> BCont(z,y))) # label(non_clause).  [assumption].
101 (all x all y (Covers(x,y) <-> lt(y,x) & (all z (S(z) -> -(lt(y,z) & lt(z,x)))))) # label(non_clause).  [assumption].
102 (all x all y (gt(x,y) <-> lt(y,x))) # label(non_clause).  [assumption].
103 (all x all y (geq(x,y) <-> leq(y,x))) # label(non_clause).  [assumption].
104 (all x all y (lt(x,y) <-> leq(x,y) & -EqDim(x,y))) # label(non_clause).  [assumption].
105 (all x all y (ICont(x,y) <-> Cont(x,y) & (all z (Cont(z,x) -> -BCont(z,y))))) # label(non_clause).  [assumption].
106 (all x (Closed(x) <-> (all y -BCont(y,x)))) # label(non_clause).  [assumption].
107 (all x all y (S(x) & S(y) & -C(x,y) <-> ZEX(intersection(x,y)))) # label(non_clause).  [assumption].
108 (all x all y (S(x) & S(y) & -ZEX(intersection(x,y)) -> Cont(intersection(x,y),x))) # label(non_clause).  [assumption].
109 (all x all y all z (Cont(z,x) & Cont(z,y) -> leq(z,intersection(x,y)))) # label(non_clause).  [assumption].
110 (all x all y all z (Cont(z,x) & Cont(z,y) & EqDim(z,intersection(x,y)) <-> P(z,intersection(x,y)))) # label(non_clause).  [assumption].
111 (all x all y (S(x) & S(y) & -ZEX(difference(x,y)) -> EqDim(x,difference(x,y)))) # label(non_clause).  [assumption].
112 (all x all y (lt(y,x) -> x = difference(x,y))) # label(non_clause).  [assumption].
113 (all x all y all z (leq(x,y) & Cont(z,x) & lt(intersection(z,y),z) -> Cont(z,difference(x,y)))) # label(non_clause).  [assumption].
114 (all x all y all z (leq(x,y) & Cont(z,difference(x,y)) -> Cont(z,x))) # label(non_clause).  [assumption].
115 (all x all y all z (leq(x,y) & P(z,difference(x,y)) -> lt(intersection(z,y),z))) # label(non_clause).  [assumption].
116 (all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))) # label(non_clause).  [assumption].

============================== end of process non-clausal formulas ===

============================== CLAUSES FOR SEARCH ====================

formulas(mace4_clauses).
-S(x) | ZEX(x) | P(f1(x),x).
-S(x) | ZEX(x) | Min(f1(x)).
-S(x) | -S(y) | -BCont(x,y) | Cont(x,y).
-S(x) | -S(y) | -BCont(x,y) | Inc(x,y).
-S(x) | -S(y) | -S(z) | -S(u) | -SC(x,y) | -Min(x) | -P(x,z) | -Cont(y,z) | -Cont(u,x) | -Cont(u,y) | BCont(u,x).
-S(x) | -S(y) | -S(z) | -S(u) | -SC(x,y) | -P(x,z) | -P(y,z) | -Cont(u,x) | -Cont(u,y) | -Covers(z,u) | -BCont(u,z).
-S(x) | -S(y) | -S(z) | -BCont(x,y) | -P(y,z) | S(f2(x,y,z)) | BCont(x,z).
-S(x) | -S(y) | -S(z) | -BCont(x,y) | -P(y,z) | S(f3(x,y,z)) | BCont(x,z).
-S(x) | -S(y) | -S(z) | -BCont(x,y) | -P(y,z) | P(f2(x,y,z),z) | BCont(x,z).
-S(x) | -S(y) | -S(z) | -BCont(x,y) | -P(y,z) | -PO(f2(x,y,z),y) | BCont(x,z).
-S(x) | -S(y) | -S(z) | -BCont(x,y) | -P(y,z) | P(f3(x,y,z),x) | BCont(x,z).
-S(x) | -S(y) | -S(z) | -BCont(x,y) | -P(y,z) | Cont(f3(x,y,z),f2(x,y,z)) | BCont(x,z).
-S(x) | -S(y) | -S(z) | -BCont(x,y) | -Cont(z,x) | BCont(z,y).
-S(x) | -S(y) | -BCont(x,y) | -ZEX(x).
-S(x) | -S(y) | -BCont(x,y) | -P(z,x) | -Min(z) | BCont(z,y).
BCont(x,y) | -S(x) | -S(y) | ZEX(x) | P(f4(x,y),x).
BCont(x,y) | -S(x) | -S(y) | ZEX(x) | Min(f4(x,y)).
BCont(x,y) | -S(x) | -S(y) | ZEX(x) | -BCont(f4(x,y),y).
P(c1,c2).
c2 != c1.
-P(c3,c4).
c4 != c3.
Cont(c5,c6).
c6 != c5.
-Cont(c7,c8).
c8 != c7.
SC(c9,c10).
c10 != c9.
-SC(c11,c12).
c12 != c11.
MinDim(c13).
-MinDim(c14).
ICont(c15,c16).
c16 != c15.
-ICont(c17,c18).
c18 != c17.
S(c19).
-S(c20).
Max(c21).
-Max(c22).
lt(c23,c24).
c24 != c23.
-lt(c25,c26).
c26 != c25.
geq(c27,c28).
c28 != c27.
-geq(c29,c30).
c30 != c29.
PP(c31,c32).
c32 != c31.
-PP(c33,c34).
c34 != c33.
BCont(c35,c36).
c36 != c35.
-BCont(c37,c38).
c38 != c37.
PO(c39,c40).
c40 != c39.
-PO(c41,c42).
c42 != c41.
Min(c43).
-Min(c44).
gt(c45,c46).
c46 != c45.
-gt(c47,c48).
c48 != c47.
TCont(c49,c50).
c50 != c49.
-TCont(c51,c52).
c52 != c51.
Covers(c53,c54).
c54 != c53.
-Covers(c55,c56).
c56 != c55.
MaxDim(c57).
-MaxDim(c58).
EqDim(c59,c60).
c60 != c59.
-EqDim(c61,c62).
c62 != c61.
Inc(c63,c64).
c64 != c63.
-Inc(c65,c66).
c66 != c65.
C(c67,c68).
c68 != c67.
-C(c69,c70).
c70 != c69.
leq(c71,c72).
c72 != c71.
-leq(c73,c74).
c74 != c73.
ZEX(c75).
-ZEX(c76).
Closed(c77).
-Closed(c78).
-TCont(x,y) | Cont(x,y).
-TCont(x,y) | Cont(f5(x,y),x).
-TCont(x,y) | BCont(f5(x,y),y).
TCont(x,y) | -Cont(x,y) | -Cont(z,x) | -BCont(z,y).
-SC(x,y) | C(x,y).
-SC(x,y) | -Cont(z,x) | -P(z,y).
-SC(x,y) | -P(z,x) | -Cont(z,y).
-C(x,y) | Cont(f6(x,y),x) | SC(x,y).
-C(x,y) | Cont(f6(x,y),y) | SC(x,y).
-C(x,y) | P(f6(x,y),x) | P(f6(x,y),y) | SC(x,y).
-SC(x,x).
-SC(x,y) | SC(y,x).
-SC(x,y) | lt(f7(x,y),x).
-SC(x,y) | lt(f7(x,y),y).
-SC(x,y) | Cont(f7(x,y),x).
-SC(x,y) | Cont(f7(x,y),y).
-SC(x,y) | Cont(f8(x,y),x).
-SC(x,y) | Cont(f8(x,y),y).
-SC(x,y) | -Cont(z,x) | -Cont(z,y) | leq(z,x).
-SC(x,y) | -Cont(z,x) | -Cont(z,y) | -EqDim(z,x).
-SC(x,y) | -Cont(z,x) | -Cont(z,y) | leq(z,y).
-SC(x,y) | -Cont(z,x) | -Cont(z,y) | -EqDim(z,y).
SC(x,y) | -Cont(z,x) | -Cont(z,y) | Cont(f9(x,y),x).
SC(x,y) | -Cont(z,x) | -Cont(z,y) | Cont(f9(x,y),y).
SC(x,y) | -Cont(z,x) | -Cont(z,y) | -leq(f9(x,y),x) | EqDim(f9(x,y),x) | -leq(f9(x,y),y) | EqDim(f9(x,y),y).
-EqDim(x,y) | leq(x,y).
-EqDim(x,y) | leq(y,x).
EqDim(x,y) | -leq(x,y) | -leq(y,x).
-leq(x,y) | S(x).
-leq(x,y) | S(y).
-ZEX(x) | S(x).
-S(x) | leq(x,x).
-leq(x,y) | -leq(y,z) | leq(x,z).
-ZEX(x) | -ZEX(y) | y = x.
-ZEX(x) | -S(y) | leq(x,y).
-Cont(x,y) | leq(x,y).
MinDim(c79).
-MaxDim(x) | S(x).
-MaxDim(x) | -ZEX(x).
-MaxDim(x) | -S(y) | leq(y,x).
MaxDim(x) | -S(x) | ZEX(x) | S(f10(x)).
MaxDim(x) | -S(x) | ZEX(x) | -leq(f10(x),x).
-MinDim(x) | S(x).
-MinDim(x) | -ZEX(x).
-MinDim(x) | -S(y) | ZEX(y) | leq(x,y).
MinDim(x) | -S(x) | ZEX(x) | S(f11(x)).
MinDim(x) | -S(x) | ZEX(x) | -ZEX(f11(x)).
MinDim(x) | -S(x) | ZEX(x) | -leq(x,f11(x)).
-S(x) | ZEX(x) | Cont(x,x).
S(x) | -Cont(x,x).
-ZEX(x) | -Cont(x,x).
-Cont(x,y) | -Cont(y,x) | y = x.
-Cont(x,y) | -Cont(y,z) | Cont(x,z).
-ZEX(x) | S(x).
-ZEX(x) | -Cont(y,x).
-ZEX(x) | -Cont(x,y).
-ZEX(x) | -ZEX(y) | y = x.
-P(x,y) | Cont(x,y).
-P(x,y) | EqDim(x,y).
P(x,y) | -Cont(x,y) | -EqDim(x,y).
-C(x,y) | Cont(f12(x,y),x).
-C(x,y) | Cont(f12(x,y),y).
C(x,y) | -Cont(z,x) | -Cont(z,y).
-Inc(x,x).
-Inc(x,y) | Inc(y,x).
-EqDim(x,y) | -Inc(x,y).
-Inc(x,y) | lt(x,y) | lt(y,x).
-Cont(x,y) | -lt(x,y) | Inc(x,y).
-Inc(x,y) | -P(y,z) | Inc(x,z).
-Inc(x,y) | leq(f13(x,y),x) | leq(f14(x,y),y).
-Inc(x,y) | leq(f13(x,y),x) | -EqDim(f14(x,y),y).
-Inc(x,y) | leq(f13(x,y),x) | Cont(f14(x,y),y).
-Inc(x,y) | leq(f13(x,y),x) | P(f14(x,y),x).
-Inc(x,y) | -EqDim(f13(x,y),x) | leq(f14(x,y),y).
-Inc(x,y) | -EqDim(f13(x,y),x) | -EqDim(f14(x,y),y).
-Inc(x,y) | -EqDim(f13(x,y),x) | Cont(f14(x,y),y).
-Inc(x,y) | -EqDim(f13(x,y),x) | P(f14(x,y),x).
-Inc(x,y) | Cont(f13(x,y),x) | leq(f14(x,y),y).
-Inc(x,y) | Cont(f13(x,y),x) | -EqDim(f14(x,y),y).
-Inc(x,y) | Cont(f13(x,y),x) | Cont(f14(x,y),y).
-Inc(x,y) | Cont(f13(x,y),x) | P(f14(x,y),x).
-Inc(x,y) | P(f13(x,y),y) | leq(f14(x,y),y).
-Inc(x,y) | P(f13(x,y),y) | -EqDim(f14(x,y),y).
-Inc(x,y) | P(f13(x,y),y) | Cont(f14(x,y),y).
-Inc(x,y) | P(f13(x,y),y) | P(f14(x,y),x).
Inc(x,y) | -leq(z,x) | EqDim(z,x) | -Cont(z,x) | -P(z,y).
Inc(x,y) | -leq(z,y) | EqDim(z,y) | -Cont(z,y) | -P(z,x).
-S(x) | ZEX(x) | PO(x,x).
-PO(x,y) | PO(y,x).
-PO(x,y) | EqDim(x,y).
-PO(x,y) | P(f15(x,y),x).
-PO(x,y) | P(f15(x,y),y).
PO(x,y) | -P(z,x) | -P(z,y).
-Max(x) | S(x).
-Max(x) | -ZEX(x).
-Max(x) | -PP(x,y).
Max(x) | -S(x) | ZEX(x) | PP(x,f16(x)).
-Min(x) | S(x).
-Min(x) | -ZEX(x).
-Min(x) | -PP(y,x).
Min(x) | -S(x) | ZEX(x) | PP(f17(x),x).
-PP(x,y) | P(x,y).
-PP(x,y) | y != x.
PP(x,y) | -P(x,y) | y = x.
-BCont(x,y) | Cont(x,y).
-BCont(x,y) | -EqDim(x,y).
-SC(x,y) | -Min(x) | -P(x,z) | -Cont(y,z) | -Cont(u,x) | -Cont(u,y) | BCont(u,x).
-SC(x,y) | -P(x,z) | -P(y,z) | -Cont(u,x) | -Cont(u,y) | -Covers(z,u) | -BCont(u,z).
-BCont(x,y) | -P(y,z) | P(f18(x,y,z),z) | BCont(x,z).
-BCont(x,y) | -P(y,z) | -PO(f18(x,y,z),y) | BCont(x,z).
-BCont(x,y) | -P(y,z) | P(f19(x,y,z),x) | BCont(x,z).
-BCont(x,y) | -P(y,z) | Cont(f19(x,y,z),f18(x,y,z)) | BCont(x,z).
-BCont(x,y) | -Cont(z,x) | BCont(z,y).
-Covers(x,y) | lt(y,x).
-Covers(x,y) | -S(z) | -lt(y,z) | -lt(z,x).
Covers(x,y) | -lt(y,x) | S(f20(x,y)).
Covers(x,y) | -lt(y,x) | lt(y,f20(x,y)).
Covers(x,y) | -lt(y,x) | lt(f20(x,y),x).
-gt(x,y) | lt(y,x).
gt(x,y) | -lt(y,x).
-geq(x,y) | leq(y,x).
geq(x,y) | -leq(y,x).
-lt(x,y) | leq(x,y).
-lt(x,y) | -EqDim(x,y).
lt(x,y) | -leq(x,y) | EqDim(x,y).
-ICont(x,y) | Cont(x,y).
-ICont(x,y) | -Cont(z,x) | -BCont(z,y).
ICont(x,y) | -Cont(x,y) | Cont(f21(x,y),x).
ICont(x,y) | -Cont(x,y) | BCont(f21(x,y),y).
-Closed(x) | -BCont(y,x).
Closed(x) | BCont(f22(x),x).
-S(x) | -S(y) | C(x,y) | ZEX(intersection(x,y)).
S(x) | -ZEX(intersection(x,y)).
S(x) | -ZEX(intersection(y,x)).
-C(x,y) | -ZEX(intersection(x,y)).
-S(x) | -S(y) | ZEX(intersection(x,y)) | Cont(intersection(x,y),x).
-Cont(x,y) | -Cont(x,z) | leq(x,intersection(y,z)).
-Cont(x,y) | -Cont(x,z) | -EqDim(x,intersection(y,z)) | P(x,intersection(y,z)).
Cont(x,y) | -P(x,intersection(y,z)).
Cont(x,y) | -P(x,intersection(z,y)).
EqDim(x,intersection(y,z)) | -P(x,intersection(y,z)).
-S(x) | -S(y) | ZEX(difference(x,y)) | EqDim(x,difference(x,y)).
-lt(x,y) | difference(y,x) = y.
-leq(x,y) | -Cont(z,x) | -lt(intersection(z,y),z) | Cont(z,difference(x,y)).
-leq(x,y) | -Cont(z,difference(x,y)) | Cont(z,x).
-leq(x,y) | -P(z,difference(x,y)) | lt(intersection(z,y),z).
-ZEX(difference(x,y)) | ZEX(x) | Cont(x,y).
ZEX(difference(x,y)) | -ZEX(x).
ZEX(difference(x,y)) | -Cont(x,y).
end_of_list.

============================== end of clauses for search =============

% The maximum domain element in the input is 0.

============================== DOMAIN SIZE 2 =========================

=== Mace4 starting on domain size 2. ===

============================== STATISTICS ============================

For domain size 2.

Current CPU time: 0.00 seconds (total CPU time: 0.01 seconds).
Ground clauses: seen=897, kept=799.
Selections=1, assignments=2, propagations=42, current_models=0.
Rewrite_terms=10, rewrite_bools=650, indexes=2.
Rules_from_neg_clauses=4, cross_offs=4.

============================== end of statistics =====================

============================== DOMAIN SIZE 3 =========================

=== Mace4 starting on domain size 3. ===

============================== STATISTICS ============================

For domain size 3.

Current CPU time: 0.00 seconds (total CPU time: 0.03 seconds).
Ground clauses: seen=2419, kept=2224.
Selections=3, assignments=7, propagations=342, current_models=0.
Rewrite_terms=18, rewrite_bools=8680, indexes=6.
Rules_from_neg_clauses=9, cross_offs=59.

============================== end of statistics =====================

============================== DOMAIN SIZE 4 =========================

=== Mace4 starting on domain size 4. ===

============================== STATISTICS ============================

For domain size 4.

Current CPU time: 0.00 seconds (total CPU time: 0.06 seconds).
Ground clauses: seen=5291, kept=4951.
Selections=6, assignments=17, propagations=706, current_models=0.
Rewrite_terms=350, rewrite_bools=21870, indexes=47.
Rules_from_neg_clauses=60, cross_offs=395.

============================== end of statistics =====================

============================== DOMAIN SIZE 5 =========================

=== Mace4 starting on domain size 5. ===

========================== MACLEOD SUMMARY ===========================
reasoner: C:/Users/torsten/macleod/mace4
status: 
execution finished: Thu Feb 25 12:00:08 2021
total CPU time used: 0
The command was "C:/Users/torsten/macleod/mace4 -v0 -t600 -s60 -n2 -N40 -f C:\Users\torsten\GitHub\colore\ontologies\multidim_space_codib\conversions\codib_down_nontrivial.all.p9"
============================ end of footer ===========================

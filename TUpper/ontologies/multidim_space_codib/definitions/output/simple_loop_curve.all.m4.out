============================== Mace4 =================================
Mace4 (32) version Oct-2007, Oct 2007.
Process 19476 was started by torsten on LAPTOP-UF9R3IH7,
Thu Feb 25 12:01:27 2021
The command was "/cygdrive/c/Users/torsten/macleod/mace4 -v0 -t600 -s60 -n2 -N40 -f C:\Users\torsten\GitHub\colore\ontologies\multidim_space_codib\definitions\conversions\simple_loop_curve.all.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file C:\Users\torsten\GitHub\colore\ontologies\multidim_space_codib\definitions\conversions\simple_loop_curve.all.p9


formulas(sos).
(all x (SimpleLoopCurve(x) <-> Curve(x) & Simple_S(x) & (all y (PointRegion(y) -> -BCont(y,x))))).
(all x (Simple_S(x) <-> Connected_S(x) & -Branched_S(x))).
(all x (Branched_S(x) <-> Connected_S(x) & (exists p exists q exists r exists s (PP(p,x) & PP(q,x) & PP(r,x) & -PO(p,q) & -PO(p,r) & -PO(q,r) & Covers(p,s) & Covers(q,s) & Covers(r,s) & Cont(s,p) & Cont(s,q) & Cont(s,r))))).
(all x all y (Covers(x,y) <-> lt(y,x) & (all z (S(z) -> -(lt(y,z) & lt(z,x)))))).
(all x all y (gt(x,y) <-> lt(y,x))).
(all x all y (geq(x,y) <-> leq(y,x))).
(all x all y (lt(x,y) <-> leq(x,y) & -EqDim(x,y))).
(all x all y (EqDim(x,y) <-> leq(x,y) & leq(y,x))).
(all x all y (leq(x,y) -> S(x))).
(all x all y (leq(x,y) -> S(y))).
(all x (ZEX(x) -> S(x))).
(all x (S(x) -> leq(x,x))).
(all x all y all z (leq(x,y) & leq(y,z) -> leq(x,z))).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x all y (ZEX(x) & S(y) -> leq(x,y))).
(all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))).
(all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))).
(all x all y (Cont(x,y) -> leq(x,y))).
(exists x MinDim(x)).
(all x (MaxDim(x) <-> S(x) & -ZEX(x) & (all y (S(y) -> leq(y,x))))).
(all x (MinDim(x) <-> S(x) & -ZEX(x) & (all y (S(y) & -ZEX(y) -> leq(x,y))))).
(all x (S(x) & -ZEX(x) <-> Cont(x,x))).
(all x all y (Cont(x,y) & Cont(y,x) -> x = y)).
(all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))).
(all x all y (ZEX(x) -> S(x) & -Cont(y,x) & -Cont(x,y))).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x (Connected_S(x) <-> S(x) & (all y (PP(y,x) -> SC(y,difference(x,y)))))).
(all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> leq(z,x) & -EqDim(z,x) & leq(z,y) & -EqDim(z,y))))).
(all x all y (PP(x,y) <-> P(x,y) & x != y)).
(all x all y (S(x) & S(y) & -C(x,y) <-> ZEX(intersection(x,y)))).
(all x all y (S(x) & S(y) & -ZEX(intersection(x,y)) -> Cont(intersection(x,y),x))).
(all x all y all z (Cont(z,x) & Cont(z,y) -> leq(z,intersection(x,y)))).
(all x all y all z (Cont(z,x) & Cont(z,y) & EqDim(z,intersection(x,y)) <-> P(z,intersection(x,y)))).
(all x all y (S(x) & S(y) & -ZEX(difference(x,y)) -> EqDim(x,difference(x,y)))).
(all x all y (lt(y,x) -> x = difference(x,y))).
(all x all y all z (leq(x,y) & Cont(z,x) & lt(intersection(z,y),z) -> Cont(z,difference(x,y)))).
(all x all y all z (leq(x,y) & Cont(z,difference(x,y)) -> Cont(z,x))).
(all x all y all z (leq(x,y) & P(z,difference(x,y)) -> lt(intersection(z,y),z))).
(all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))).
(all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))).
(all x (PointRegion(x) <-> MinDim(x))).
(all x (Max(x) <-> S(x) & -ZEX(x) & (all y -PP(x,y)))).
(all x (Min(x) <-> S(x) & -ZEX(x) & (all y -PP(y,x)))).
(all x all y (Inc(x,y) <-> (exists z (leq(z,x) & -EqDim(z,x) & Cont(z,x) & P(z,y))) | (exists z (leq(z,y) & -EqDim(z,y) & Cont(z,y) & P(z,x))))).
(all x (Curve(x) <-> -ZEX(x) & -MinDim(x) & (all y (MinDim(y) <-> Covers(x,y))))).
(all x all y (SC(x,y) -> C(x,y))).
(all x all y (SC(x,y) -> -(exists z (Cont(z,x) & P(z,y))))).
(all x all y (SC(x,y) -> -(exists z (P(z,x) & Cont(z,y))))).
(all x all y (C(x,y) & (all z (-Cont(z,x) | -Cont(z,y) | -P(z,x) & -P(z,y))) -> SC(x,y))).
(all x -SC(x,x)).
(all x all y (SC(x,y) -> SC(y,x))).
(all x all y (SC(x,y) -> (exists z (lt(z,x) & lt(z,y) & Cont(z,x) & Cont(z,y))))).
(all x -Inc(x,x)).
(all x all y (Inc(x,y) -> Inc(y,x))).
(all x all y (EqDim(x,y) -> -Inc(x,y))).
(all x all y (Inc(x,y) -> lt(x,y) | lt(y,x))).
(all x all y (Cont(x,y) & lt(x,y) -> Inc(x,y))).
(all x all y all z (Inc(x,y) & P(y,z) -> Inc(x,z))).
(all x (S(x) & -ZEX(x) -> PO(x,x))).
(all x all y (PO(x,y) -> PO(y,x))).
(all x all y (PO(x,y) -> EqDim(x,y))).
(all x all y (BCont(x,y) -> Cont(x,y) & -EqDim(x,y))).
(all x all y all v all z (SC(x,y) & Min(x) & P(x,v) & Cont(y,v) & Cont(z,x) & Cont(z,y) -> BCont(z,x))).
(all x all y all z all v (SC(x,y) & P(x,v) & P(y,v) & Cont(z,x) & Cont(z,y) & Covers(v,z) -> -BCont(z,v))).
(all x all y all z (BCont(x,y) & P(y,z) & (all v all w (P(v,z) & -PO(v,y) & P(w,x) -> -Cont(w,v))) -> BCont(x,z))).
(all x all y all z (BCont(x,y) & Cont(z,x) -> BCont(z,y))).
(all x (Closed(x) <-> (all y -BCont(y,x)))).
end_of_list.

% From the command line: clear(verbose).

% From the command line: assign(max_seconds, 600).

% From the command line: assign(max_seconds_per, 60).

% From the command line: assign(domain_size, 2).

% From the command line: assign(iterate_up_to, 40).

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x (SimpleLoopCurve(x) <-> Curve(x) & Simple_S(x) & (all y (PointRegion(y) -> -BCont(y,x))))) # label(non_clause).  [assumption].
2 (all x (Simple_S(x) <-> Connected_S(x) & -Branched_S(x))) # label(non_clause).  [assumption].
3 (all x (Branched_S(x) <-> Connected_S(x) & (exists p exists q exists r exists s (PP(p,x) & PP(q,x) & PP(r,x) & -PO(p,q) & -PO(p,r) & -PO(q,r) & Covers(p,s) & Covers(q,s) & Covers(r,s) & Cont(s,p) & Cont(s,q) & Cont(s,r))))) # label(non_clause).  [assumption].
4 (all x all y (Covers(x,y) <-> lt(y,x) & (all z (S(z) -> -(lt(y,z) & lt(z,x)))))) # label(non_clause).  [assumption].
5 (all x all y (gt(x,y) <-> lt(y,x))) # label(non_clause).  [assumption].
6 (all x all y (geq(x,y) <-> leq(y,x))) # label(non_clause).  [assumption].
7 (all x all y (lt(x,y) <-> leq(x,y) & -EqDim(x,y))) # label(non_clause).  [assumption].
8 (all x all y (EqDim(x,y) <-> leq(x,y) & leq(y,x))) # label(non_clause).  [assumption].
9 (all x all y (leq(x,y) -> S(x))) # label(non_clause).  [assumption].
10 (all x all y (leq(x,y) -> S(y))) # label(non_clause).  [assumption].
11 (all x (ZEX(x) -> S(x))) # label(non_clause).  [assumption].
12 (all x (S(x) -> leq(x,x))) # label(non_clause).  [assumption].
13 (all x all y all z (leq(x,y) & leq(y,z) -> leq(x,z))) # label(non_clause).  [assumption].
14 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
15 (all x all y (ZEX(x) & S(y) -> leq(x,y))) # label(non_clause).  [assumption].
16 (all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))) # label(non_clause).  [assumption].
17 (all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))) # label(non_clause).  [assumption].
18 (all x all y (Cont(x,y) -> leq(x,y))) # label(non_clause).  [assumption].
19 (exists x MinDim(x)) # label(non_clause).  [assumption].
20 (all x (MaxDim(x) <-> S(x) & -ZEX(x) & (all y (S(y) -> leq(y,x))))) # label(non_clause).  [assumption].
21 (all x (MinDim(x) <-> S(x) & -ZEX(x) & (all y (S(y) & -ZEX(y) -> leq(x,y))))) # label(non_clause).  [assumption].
22 (all x (S(x) & -ZEX(x) <-> Cont(x,x))) # label(non_clause).  [assumption].
23 (all x all y (Cont(x,y) & Cont(y,x) -> x = y)) # label(non_clause).  [assumption].
24 (all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))) # label(non_clause).  [assumption].
25 (all x all y (ZEX(x) -> S(x) & -Cont(y,x) & -Cont(x,y))) # label(non_clause).  [assumption].
26 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
27 (all x (Connected_S(x) <-> S(x) & (all y (PP(y,x) -> SC(y,difference(x,y)))))) # label(non_clause).  [assumption].
28 (all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> leq(z,x) & -EqDim(z,x) & leq(z,y) & -EqDim(z,y))))) # label(non_clause).  [assumption].
29 (all x all y (PP(x,y) <-> P(x,y) & x != y)) # label(non_clause).  [assumption].
30 (all x all y (S(x) & S(y) & -C(x,y) <-> ZEX(intersection(x,y)))) # label(non_clause).  [assumption].
31 (all x all y (S(x) & S(y) & -ZEX(intersection(x,y)) -> Cont(intersection(x,y),x))) # label(non_clause).  [assumption].
32 (all x all y all z (Cont(z,x) & Cont(z,y) -> leq(z,intersection(x,y)))) # label(non_clause).  [assumption].
33 (all x all y all z (Cont(z,x) & Cont(z,y) & EqDim(z,intersection(x,y)) <-> P(z,intersection(x,y)))) # label(non_clause).  [assumption].
34 (all x all y (S(x) & S(y) & -ZEX(difference(x,y)) -> EqDim(x,difference(x,y)))) # label(non_clause).  [assumption].
35 (all x all y (lt(y,x) -> x = difference(x,y))) # label(non_clause).  [assumption].
36 (all x all y all z (leq(x,y) & Cont(z,x) & lt(intersection(z,y),z) -> Cont(z,difference(x,y)))) # label(non_clause).  [assumption].
37 (all x all y all z (leq(x,y) & Cont(z,difference(x,y)) -> Cont(z,x))) # label(non_clause).  [assumption].
38 (all x all y all z (leq(x,y) & P(z,difference(x,y)) -> lt(intersection(z,y),z))) # label(non_clause).  [assumption].
39 (all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))) # label(non_clause).  [assumption].
40 (all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
41 (all x (PointRegion(x) <-> MinDim(x))) # label(non_clause).  [assumption].
42 (all x (Max(x) <-> S(x) & -ZEX(x) & (all y -PP(x,y)))) # label(non_clause).  [assumption].
43 (all x (Min(x) <-> S(x) & -ZEX(x) & (all y -PP(y,x)))) # label(non_clause).  [assumption].
44 (all x all y (Inc(x,y) <-> (exists z (leq(z,x) & -EqDim(z,x) & Cont(z,x) & P(z,y))) | (exists z (leq(z,y) & -EqDim(z,y) & Cont(z,y) & P(z,x))))) # label(non_clause).  [assumption].
45 (all x (Curve(x) <-> -ZEX(x) & -MinDim(x) & (all y (MinDim(y) <-> Covers(x,y))))) # label(non_clause).  [assumption].
46 (all x all y (SC(x,y) -> C(x,y))) # label(non_clause).  [assumption].
47 (all x all y (SC(x,y) -> -(exists z (Cont(z,x) & P(z,y))))) # label(non_clause).  [assumption].
48 (all x all y (SC(x,y) -> -(exists z (P(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
49 (all x all y (C(x,y) & (all z (-Cont(z,x) | -Cont(z,y) | -P(z,x) & -P(z,y))) -> SC(x,y))) # label(non_clause).  [assumption].
50 (all x -SC(x,x)) # label(non_clause).  [assumption].
51 (all x all y (SC(x,y) -> SC(y,x))) # label(non_clause).  [assumption].
52 (all x all y (SC(x,y) -> (exists z (lt(z,x) & lt(z,y) & Cont(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
53 (all x -Inc(x,x)) # label(non_clause).  [assumption].
54 (all x all y (Inc(x,y) -> Inc(y,x))) # label(non_clause).  [assumption].
55 (all x all y (EqDim(x,y) -> -Inc(x,y))) # label(non_clause).  [assumption].
56 (all x all y (Inc(x,y) -> lt(x,y) | lt(y,x))) # label(non_clause).  [assumption].
57 (all x all y (Cont(x,y) & lt(x,y) -> Inc(x,y))) # label(non_clause).  [assumption].
58 (all x all y all z (Inc(x,y) & P(y,z) -> Inc(x,z))) # label(non_clause).  [assumption].
59 (all x (S(x) & -ZEX(x) -> PO(x,x))) # label(non_clause).  [assumption].
60 (all x all y (PO(x,y) -> PO(y,x))) # label(non_clause).  [assumption].
61 (all x all y (PO(x,y) -> EqDim(x,y))) # label(non_clause).  [assumption].
62 (all x all y (BCont(x,y) -> Cont(x,y) & -EqDim(x,y))) # label(non_clause).  [assumption].
63 (all x all y all v all z (SC(x,y) & Min(x) & P(x,v) & Cont(y,v) & Cont(z,x) & Cont(z,y) -> BCont(z,x))) # label(non_clause).  [assumption].
64 (all x all y all z all v (SC(x,y) & P(x,v) & P(y,v) & Cont(z,x) & Cont(z,y) & Covers(v,z) -> -BCont(z,v))) # label(non_clause).  [assumption].
65 (all x all y all z (BCont(x,y) & P(y,z) & (all v all w (P(v,z) & -PO(v,y) & P(w,x) -> -Cont(w,v))) -> BCont(x,z))) # label(non_clause).  [assumption].
66 (all x all y all z (BCont(x,y) & Cont(z,x) -> BCont(z,y))) # label(non_clause).  [assumption].
67 (all x (Closed(x) <-> (all y -BCont(y,x)))) # label(non_clause).  [assumption].

============================== end of process non-clausal formulas ===

============================== CLAUSES FOR SEARCH ====================

formulas(mace4_clauses).
-SimpleLoopCurve(x) | Curve(x).
-SimpleLoopCurve(x) | Simple_S(x).
-SimpleLoopCurve(x) | -PointRegion(y) | -BCont(y,x).
SimpleLoopCurve(x) | -Curve(x) | -Simple_S(x) | PointRegion(f1(x)).
SimpleLoopCurve(x) | -Curve(x) | -Simple_S(x) | BCont(f1(x),x).
-Simple_S(x) | Connected_S(x).
-Simple_S(x) | -Branched_S(x).
Simple_S(x) | -Connected_S(x) | Branched_S(x).
-Branched_S(x) | Connected_S(x).
-Branched_S(x) | PP(f2(x),x).
-Branched_S(x) | PP(f3(x),x).
-Branched_S(x) | PP(f4(x),x).
-Branched_S(x) | -PO(f2(x),f3(x)).
-Branched_S(x) | -PO(f2(x),f4(x)).
-Branched_S(x) | -PO(f3(x),f4(x)).
-Branched_S(x) | Covers(f2(x),f5(x)).
-Branched_S(x) | Covers(f3(x),f5(x)).
-Branched_S(x) | Covers(f4(x),f5(x)).
-Branched_S(x) | Cont(f5(x),f2(x)).
-Branched_S(x) | Cont(f5(x),f3(x)).
-Branched_S(x) | Cont(f5(x),f4(x)).
Branched_S(x) | -Connected_S(x) | -PP(y,x) | -PP(z,x) | -PP(u,x) | PO(y,z) | PO(y,u) | PO(z,u) | -Covers(y,w) | -Covers(z,w) | -Covers(u,w) | -Cont(w,y) | -Cont(w,z) | -Cont(w,u).
-Covers(x,y) | lt(y,x).
-Covers(x,y) | -S(z) | -lt(y,z) | -lt(z,x).
Covers(x,y) | -lt(y,x) | S(f6(x,y)).
Covers(x,y) | -lt(y,x) | lt(y,f6(x,y)).
Covers(x,y) | -lt(y,x) | lt(f6(x,y),x).
-gt(x,y) | lt(y,x).
gt(x,y) | -lt(y,x).
-geq(x,y) | leq(y,x).
geq(x,y) | -leq(y,x).
-lt(x,y) | leq(x,y).
-lt(x,y) | -EqDim(x,y).
lt(x,y) | -leq(x,y) | EqDim(x,y).
-EqDim(x,y) | leq(x,y).
-EqDim(x,y) | leq(y,x).
EqDim(x,y) | -leq(x,y) | -leq(y,x).
-leq(x,y) | S(x).
-leq(x,y) | S(y).
-ZEX(x) | S(x).
-S(x) | leq(x,x).
-leq(x,y) | -leq(y,z) | leq(x,z).
-ZEX(x) | -ZEX(y) | y = x.
-ZEX(x) | -S(y) | leq(x,y).
-PO(x,y) | P(f7(x,y),x).
-PO(x,y) | P(f7(x,y),y).
PO(x,y) | -P(z,x) | -P(z,y).
-P(x,y) | Cont(x,y).
-P(x,y) | EqDim(x,y).
P(x,y) | -Cont(x,y) | -EqDim(x,y).
-Cont(x,y) | leq(x,y).
MinDim(c1).
-MaxDim(x) | S(x).
-MaxDim(x) | -ZEX(x).
-MaxDim(x) | -S(y) | leq(y,x).
MaxDim(x) | -S(x) | ZEX(x) | S(f8(x)).
MaxDim(x) | -S(x) | ZEX(x) | -leq(f8(x),x).
-MinDim(x) | S(x).
-MinDim(x) | -ZEX(x).
-MinDim(x) | -S(y) | ZEX(y) | leq(x,y).
MinDim(x) | -S(x) | ZEX(x) | S(f9(x)).
MinDim(x) | -S(x) | ZEX(x) | -ZEX(f9(x)).
MinDim(x) | -S(x) | ZEX(x) | -leq(x,f9(x)).
-S(x) | ZEX(x) | Cont(x,x).
S(x) | -Cont(x,x).
-ZEX(x) | -Cont(x,x).
-Cont(x,y) | -Cont(y,x) | y = x.
-Cont(x,y) | -Cont(y,z) | Cont(x,z).
-ZEX(x) | S(x).
-ZEX(x) | -Cont(y,x).
-ZEX(x) | -Cont(x,y).
-ZEX(x) | -ZEX(y) | y = x.
-Connected_S(x) | S(x).
-Connected_S(x) | -PP(y,x) | SC(y,difference(x,y)).
Connected_S(x) | -S(x) | PP(f10(x),x).
Connected_S(x) | -S(x) | -SC(f10(x),difference(x,f10(x))).
-SC(x,y) | Cont(f11(x,y),x).
-SC(x,y) | Cont(f11(x,y),y).
-SC(x,y) | -Cont(z,x) | -Cont(z,y) | leq(z,x).
-SC(x,y) | -Cont(z,x) | -Cont(z,y) | -EqDim(z,x).
-SC(x,y) | -Cont(z,x) | -Cont(z,y) | leq(z,y).
-SC(x,y) | -Cont(z,x) | -Cont(z,y) | -EqDim(z,y).
SC(x,y) | -Cont(z,x) | -Cont(z,y) | Cont(f12(x,y),x).
SC(x,y) | -Cont(z,x) | -Cont(z,y) | Cont(f12(x,y),y).
SC(x,y) | -Cont(z,x) | -Cont(z,y) | -leq(f12(x,y),x) | EqDim(f12(x,y),x) | -leq(f12(x,y),y) | EqDim(f12(x,y),y).
-PP(x,y) | P(x,y).
-PP(x,y) | y != x.
PP(x,y) | -P(x,y) | y = x.
-S(x) | -S(y) | C(x,y) | ZEX(intersection(x,y)).
S(x) | -ZEX(intersection(x,y)).
S(x) | -ZEX(intersection(y,x)).
-C(x,y) | -ZEX(intersection(x,y)).
-S(x) | -S(y) | ZEX(intersection(x,y)) | Cont(intersection(x,y),x).
-Cont(x,y) | -Cont(x,z) | leq(x,intersection(y,z)).
-Cont(x,y) | -Cont(x,z) | -EqDim(x,intersection(y,z)) | P(x,intersection(y,z)).
Cont(x,y) | -P(x,intersection(y,z)).
Cont(x,y) | -P(x,intersection(z,y)).
EqDim(x,intersection(y,z)) | -P(x,intersection(y,z)).
-S(x) | -S(y) | ZEX(difference(x,y)) | EqDim(x,difference(x,y)).
-lt(x,y) | difference(y,x) = y.
-leq(x,y) | -Cont(z,x) | -lt(intersection(z,y),z) | Cont(z,difference(x,y)).
-leq(x,y) | -Cont(z,difference(x,y)) | Cont(z,x).
-leq(x,y) | -P(z,difference(x,y)) | lt(intersection(z,y),z).
-ZEX(difference(x,y)) | ZEX(x) | Cont(x,y).
ZEX(difference(x,y)) | -ZEX(x).
ZEX(difference(x,y)) | -Cont(x,y).
-C(x,y) | Cont(f13(x,y),x).
-C(x,y) | Cont(f13(x,y),y).
C(x,y) | -Cont(z,x) | -Cont(z,y).
-PointRegion(x) | MinDim(x).
PointRegion(x) | -MinDim(x).
-Max(x) | S(x).
-Max(x) | -ZEX(x).
-Max(x) | -PP(x,y).
Max(x) | -S(x) | ZEX(x) | PP(x,f14(x)).
-Min(x) | S(x).
-Min(x) | -ZEX(x).
-Min(x) | -PP(y,x).
Min(x) | -S(x) | ZEX(x) | PP(f15(x),x).
-Inc(x,y) | leq(f16(x,y),x) | leq(f17(x,y),y).
-Inc(x,y) | leq(f16(x,y),x) | -EqDim(f17(x,y),y).
-Inc(x,y) | leq(f16(x,y),x) | Cont(f17(x,y),y).
-Inc(x,y) | leq(f16(x,y),x) | P(f17(x,y),x).
-Inc(x,y) | -EqDim(f16(x,y),x) | leq(f17(x,y),y).
-Inc(x,y) | -EqDim(f16(x,y),x) | -EqDim(f17(x,y),y).
-Inc(x,y) | -EqDim(f16(x,y),x) | Cont(f17(x,y),y).
-Inc(x,y) | -EqDim(f16(x,y),x) | P(f17(x,y),x).
-Inc(x,y) | Cont(f16(x,y),x) | leq(f17(x,y),y).
-Inc(x,y) | Cont(f16(x,y),x) | -EqDim(f17(x,y),y).
-Inc(x,y) | Cont(f16(x,y),x) | Cont(f17(x,y),y).
-Inc(x,y) | Cont(f16(x,y),x) | P(f17(x,y),x).
-Inc(x,y) | P(f16(x,y),y) | leq(f17(x,y),y).
-Inc(x,y) | P(f16(x,y),y) | -EqDim(f17(x,y),y).
-Inc(x,y) | P(f16(x,y),y) | Cont(f17(x,y),y).
-Inc(x,y) | P(f16(x,y),y) | P(f17(x,y),x).
Inc(x,y) | -leq(z,x) | EqDim(z,x) | -Cont(z,x) | -P(z,y).
Inc(x,y) | -leq(z,y) | EqDim(z,y) | -Cont(z,y) | -P(z,x).
-Curve(x) | -ZEX(x).
-Curve(x) | -MinDim(x).
-Curve(x) | -MinDim(y) | Covers(x,y).
-Curve(x) | MinDim(y) | -Covers(x,y).
Curve(x) | ZEX(x) | MinDim(x) | MinDim(f18(x)) | Covers(x,f18(x)).
Curve(x) | ZEX(x) | MinDim(x) | -MinDim(f18(x)) | -Covers(x,f18(x)).
-SC(x,y) | C(x,y).
-SC(x,y) | -Cont(z,x) | -P(z,y).
-SC(x,y) | -P(z,x) | -Cont(z,y).
-C(x,y) | Cont(f19(x,y),x) | SC(x,y).
-C(x,y) | Cont(f19(x,y),y) | SC(x,y).
-C(x,y) | P(f19(x,y),x) | P(f19(x,y),y) | SC(x,y).
-SC(x,x).
-SC(x,y) | SC(y,x).
-SC(x,y) | lt(f20(x,y),x).
-SC(x,y) | lt(f20(x,y),y).
-SC(x,y) | Cont(f20(x,y),x).
-SC(x,y) | Cont(f20(x,y),y).
-Inc(x,x).
-Inc(x,y) | Inc(y,x).
-EqDim(x,y) | -Inc(x,y).
-Inc(x,y) | lt(x,y) | lt(y,x).
-Cont(x,y) | -lt(x,y) | Inc(x,y).
-Inc(x,y) | -P(y,z) | Inc(x,z).
-S(x) | ZEX(x) | PO(x,x).
-PO(x,y) | PO(y,x).
-PO(x,y) | EqDim(x,y).
-BCont(x,y) | Cont(x,y).
-BCont(x,y) | -EqDim(x,y).
-SC(x,y) | -Min(x) | -P(x,z) | -Cont(y,z) | -Cont(u,x) | -Cont(u,y) | BCont(u,x).
-SC(x,y) | -P(x,z) | -P(y,z) | -Cont(u,x) | -Cont(u,y) | -Covers(z,u) | -BCont(u,z).
-BCont(x,y) | -P(y,z) | P(f21(x,y,z),z) | BCont(x,z).
-BCont(x,y) | -P(y,z) | -PO(f21(x,y,z),y) | BCont(x,z).
-BCont(x,y) | -P(y,z) | P(f22(x,y,z),x) | BCont(x,z).
-BCont(x,y) | -P(y,z) | Cont(f22(x,y,z),f21(x,y,z)) | BCont(x,z).
-BCont(x,y) | -Cont(z,x) | BCont(z,y).
-Closed(x) | -BCont(y,x).
Closed(x) | BCont(f23(x),x).
end_of_list.

============================== end of clauses for search =============

% The maximum domain element in the input is 0.

============================== DOMAIN SIZE 2 =========================

=== Mace4 starting on domain size 2. ===

============================== MODEL =================================

interpretation( 2, [number=1, seconds=0], [

        function(c1, [ 0 ]),

        function(f1(_), [ 0, 0 ]),

        function(f2(_), [ 0, 0 ]),

        function(f3(_), [ 0, 0 ]),

        function(f4(_), [ 0, 0 ]),

        function(f5(_), [ 0, 0 ]),

        function(f8(_), [ 0, 0 ]),

        function(f9(_), [ 0, 0 ]),

        function(f10(_), [ 0, 0 ]),

        function(f14(_), [ 0, 0 ]),

        function(f15(_), [ 0, 0 ]),

        function(f18(_), [ 0, 0 ]),

        function(f23(_), [ 0, 0 ]),

        function(difference(_,_), [
			   1, 0,
			   1, 1 ]),

        function(intersection(_,_), [
			   0, 1,
			   1, 1 ]),

        function(f6(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f7(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f11(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f12(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f13(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f16(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f17(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f19(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f20(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f21(_,_,_), [
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0 ]),

        function(f22(_,_,_), [
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0 ]),

        relation(Branched_S(_), [ 0, 0 ]),

        relation(Closed(_), [ 1, 1 ]),

        relation(Connected_S(_), [ 1, 1 ]),

        relation(Curve(_), [ 0, 0 ]),

        relation(Max(_), [ 1, 0 ]),

        relation(MaxDim(_), [ 1, 0 ]),

        relation(Min(_), [ 1, 0 ]),

        relation(MinDim(_), [ 1, 0 ]),

        relation(PointRegion(_), [ 1, 0 ]),

        relation(S(_), [ 1, 1 ]),

        relation(SimpleLoopCurve(_), [ 0, 0 ]),

        relation(Simple_S(_), [ 1, 1 ]),

        relation(ZEX(_), [ 0, 1 ]),

        relation(BCont(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(C(_,_), [
			   1, 0,
			   0, 0 ]),

        relation(Cont(_,_), [
			   1, 0,
			   0, 0 ]),

        relation(Covers(_,_), [
			   0, 1,
			   0, 0 ]),

        relation(EqDim(_,_), [
			   1, 0,
			   0, 1 ]),

        relation(Inc(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(P(_,_), [
			   1, 0,
			   0, 0 ]),

        relation(PO(_,_), [
			   1, 0,
			   0, 0 ]),

        relation(PP(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(SC(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(geq(_,_), [
			   1, 1,
			   0, 1 ]),

        relation(gt(_,_), [
			   0, 1,
			   0, 0 ]),

        relation(leq(_,_), [
			   1, 0,
			   1, 1 ]),

        relation(lt(_,_), [
			   0, 0,
			   1, 0 ])
]).

============================== end of model ==========================

============================== STATISTICS ============================

For domain size 2.

Current CPU time: 0.00 seconds (total CPU time: 0.03 seconds).
Ground clauses: seen=761, kept=711.
Selections=74, assignments=75, propagations=97, current_models=1.
Rewrite_terms=493, rewrite_bools=1091, indexes=79.
Rules_from_neg_clauses=12, cross_offs=12.

============================== end of statistics =====================

------ process 19476 exit (max_models) ------

User_CPU=0.03, System_CPU=0.06, Wall_clock=0.

Exiting with 1 model.

Process 19476 exit (max_models) Thu Feb 25 12:01:27 2021
The process finished Thu Feb 25 12:01:27 2021

========================== MACLEOD SUMMARY ===========================
reasoner: C:/Users/torsten/macleod/mace4
status: MODEL
execution finished: Thu Feb 25 12:01:33 2021
total CPU time used: 0
The command was "C:/Users/torsten/macleod/mace4 -v0 -t600 -s60 -n2 -N40 -f C:\Users\torsten\GitHub\colore\ontologies\multidim_space_codib\definitions\conversions\simple_loop_curve.all.p9"
============================ end of footer ===========================

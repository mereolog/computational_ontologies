

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%DOLCE SIMPLE plus REIFIED RELATIONS
%
%
%version for MACE4 / PROVER9 by D. Porello, S. Borgo, L. Vieu.
%
%Axioms of the OWL version of DOLCE SIMPLE with reified relations translated into first-order logic.
%
%Proofs with PROVER 9 that "DOLCE SIMPLE plus REIFIED RELATIONS" entails the OWL version of DOLCE SIMPLE with reified relations.
%
%
%
%NOTE ON REIFIED RELATIONS:
%Reified relations are here considered separated from the particulars of DOLCE (pt): proper conceptual clarification of reified relations is in progress.
%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




set(prolog_style_variables).

assign(max_megs, 600).

formulas(assumptions).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%DOLCE SIMPLE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%Taxonomy%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Taxonomy: inclusions
(all X ((ab(X) | ed(X) | pd(X) | q(X)) <-> pt(X))).
(all X ((as(X) | nped(X) | ped(X)) <-> ed(X))).
(all X ((pro(X) | st(X)) <-> stv(X))).
(all X ((ev(X) | stv(X)) <-> pd(X))).
(all X ((aq(X) | pq(X) | tq(X)) <-> q(X))).
(all X ((acc(X) | ach(X)) <-> ev(X))).
(all X ((apo(X) | napo(X)) <-> pob(X))).
(all X ((sag(X) | sc(X)) <-> aso(X))).
(all X ((aso(X) | naso(X)) <-> sob(X))).
(all X ((sob(X) | mob(X)) <-> npob(X))).
(all X ((ar(X) | pr(X) | tr(X)) <-> r(X))).
(all X (r(X) -> ab(X))).
(all X ((f(X) | m(X) | pob(X)) <-> ped(X))).
(all X (npob(X) -> nped(X))).
(all X (s(X) -> pr(X))).
(all X (sl(X) -> pq(X))).
(all X (t(X) -> tr(X))).
(all X (tl(X) -> tq(X))).

%Taxonomy: disjoitness

(-(exists X (ab(X) & ed(X)))).
(-(exists X (ab(X) & pd(X)))).
(-(exists X (ab(X) & q(X)))).
(-(exists X (ed(X) & pd(X)))).
(-(exists X (pd(X) & q(X)))).
(-(exists X (ed(X) & q(X)))).
(-(exists X (ped(X) & nped(X)))).
(-(exists X (ped(X) & as(X)))).
(-(exists X (nped(X) & as(X)))).
(-(exists X (m(X) & f(X)))).
(-(exists X (f(X) & pob(X)))).
(-(exists X (m(X) & pob(X)))).
(-(exists X (mob(X) & sob(X)))).
(-(exists X (aso(X) & naso(X)))).
(-(exists X (sag(X) & sc(X)))).
(-(exists X (apo(X) & napo(X)))).
(-(exists X (ev(X) & stv(X)))).
(-(exists X (ach(X) & acc(X)))).
(-(exists X (st(X) & pro(X)))).
(-(exists X (tq(X) & pq(X)))).
(-(exists X (pq(X) & aq(X)))).
(-(exists X (tq(X) & aq(X)))).
(-(exists X (tr(X) & pr(X)))).
(-(exists X (pr(X) & ar(X)))).
(-(exists X (tr(X) & ar(X)))).




%Mereology%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


(all X all Y (p(X,Y) -> ((ab(X) | pd(X)) & (ab(Y) | pd(Y))))) # label(parthood_Argument_restrictions_Ad1).
(all X all Y (p(X,Y) -> (pd(X) <-> pd(Y)))) # label(parthood_argument_restrictions_Ad2).
(all X all Y (p(X,Y) -> (ab(X) <-> ab(Y)))) # label(parthood_argument_restrictions_Ad3).
(all X all Y (p(X,Y) -> (t(X) <-> t(Y)))) # label(parthood_argument_restrictions_instance_of_Ad4_1).
(all X all Y (p(X,Y) -> (s(X) <-> s(Y)))) # label(parthood_argument_restrictions_instance_of_Ad4_2).
(all X all Y (p(X,Y) -> (ar(X) <-> ar(Y)))) # label(parthood_argument_restrictions_instance_of_Ad4_3).
(all X ((ab(X) | pd(X)) -> p(X,X))) # label(parthood_reflexivity_Ad5).
(all X all Y ((p(X,Y) & p(Y,X)) -> ((X)=(Y)))) # label(parthood_antysymmetry_Ad6).
(all X all Y all Z((p(X,Y) & p(Y,Z)) -> p(X,Z))) # label(parthood_transitivity_Ad7).
(all X all Y (pp(X,Y) <-> (p(X,Y) & -(p(Y,X))))) # label(proper_part_definition_Dd14).
(all X all Y (ov(X,Y) <-> (exists Z (p(Z,X) & p(Z,Y))))) # label(overlap_definition_Dd15).
(all X (at(X) <-> ((pd(X) | ab(X)) & -(exists Y (pp(Y,X)))))) # label(atom_definition_Dd16_corrected).
(all X all Y (atp(X,Y) <-> (p(X,Y)& at(X)))) # label(atomic_part_definition_Dd17).

(all X all Y all Z (sum(Z,X,Y) <-> (((ab(Z) & ab(X) & ab(Y)) | (pd(Z) & pd(X) & pd(Y))) & (all W (ov(W,Z) <-> (ov(W,X) | ov(W,Y))))))) # label(binary_sum_definition_Dd18).


%Check without this for larger models:
%(all X all Y ((ab(X) & ab(Y)) -> (exists Z (ab(Z) & sum(Z,X,Y))))) # label(binary_sum_existence_restriction_of_Ad9).
%(all X all Y ((pd(X) & pd(Y)) -> (exists Z (pd(Z) & sum(Z,X,Y))))) # label(binary_sum_existence_restriction_of_Ad9).

(all X all Y all Z (dif(Z,X,Y) <-> (((ab(Z) & ab(X) & ab(Y)) | (pd(Z) & pd(X) & pd(Y))) & (all W (p(W,Z) <-> (p(W,X) & -(ov(W,Y)))))))) # label(binary_difference_definition).

(all X all Y ((ab(X) & ab(Y) & -(p(X,Y))) -> (exists Z (dif(Z,X,Y))))) # label(binary_difference_existence_from_Ad8_1).
(all X all Y ((pd(X) & pd(Y) & -(p(X,Y))) -> (exists Z (dif(Z,X,Y))))) # label(binary_difference_existence_from_Ad8_2).


%Present_at%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


(all X all T (pre(X,T) -> ((ed(X) | pd(X) | q(X)) & t(T)))).


(all X all T all S ((pre(X,T) & p(S,T)) -> (pre(X,S)))) # label(present_at_dissectivity_Td17).


%Temporary_parthood%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(all X all Y all T (tp(X,Y,T) -> (ed(X) & ed(Y) & t(T)))) # label(temporary_parthood_argument_restrictions_Ad10).
(all X all Y all T (tp(X,Y,T) -> (ped(X) <-> ped(Y)))) # label(temporary_parthood_argument_restrictions_Ad11).
(all X all Y all T (tp(X,Y,T) -> (nped(X) <-> nped(Y)))) # label(temporary_parthood_argument_restrictions_Ad12).
(all X all Y all Z all T ((tp(X,Y,T) & tp(Y,Z,T)) -> tp(X,Z,T))) # label(temporary_parthood_ground_axiom_Ad13).
(all X all Y all T (tov(X,Y,T) <-> (exists Z (tp(Z,X,T) & tp(Z,Y,T))))) # label(temporary_overlap_definition_Dd21).
(all X all Y all T (tpp(X,Y,T) <-> (tp(X,Y,T) & -(tp(Y,X,T))))) # label(temporary_proper_part_definition_Dd20).
(all X all T (tat(X,T) <-> (ed(X) & t(T) & -(exists Y (tpp(Y,X,T)))))) # label(temporary_proper_part_definition_Dd22_corrected).
(all X all Y all T (tatp(X,Y,T) <-> (tp(X,Y,T) & tat(X,T)))) # label(temporary_atomic_part_definition_Dd23).

(all X all Y all Z (tsum(Z,X,Y) <-> (((ped(Z) & ped(X) & ped(Y)) | (nped(Z) & nped(X) & nped(Y))) & (all W all T (tov(W,Z,T) <-> (tov(W,X,T) | tov(W,Y,T))))))) # label(temporary_sum_definition_from_Dd26).


%Check without this for larger models:
(all X all Y ((ped(X) & ped(Y)) -> (exists Z (tsum(Z,X,Y))))) # label(temporary_sum_existence_from_Dd26).
(all X all Y ((nped(X) & nped(Y)) -> (exists Z (tsum(Z,X,Y))))) # label(temporary_sum_existence_from_Dd26).



(all X all T ((ed(X) & pre(X,T)) -> tp(X,X,T))) # label(temporary_parthood_Ad16).
(all X all Y all T (tp(X,Y,T) -> (pre(X,T) & pre(Y,T)))) # label(temporary_parthood_Ad17).
(all X all Y all T (tp(X,Y,T) -> (all S (p(S,T) -> tp(X,Y,S))))) # label(temporary_parthood_Ad18).


%Temporal_parthood_on_PD%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(all X all Y (temporalPart(X,Y) <-> (pd(X) & pd(Y) & p(X,Y) &
                    (all Z ((pd(Z) & p(Z,Y) & (all T (pre(Z,T) -> pre(X,T)))) -> p(Z,X)))))).



%Constitution%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(all X all Y all T (k(X,Y,T) -> ((ed(X) | pd(X)) & (ed(Y) | pd(Y)) & t(T)))) # label(constitution_argument_restrictions_Ad20).

(all X all Y all T (k(X,Y,T) -> (ped(X) <-> ped(Y)))) # label(constitution__argument_restrictions_Ad21).

(all X all Y all T (k(X,Y,T) -> (nped(X) <-> nped(Y)))) # label(constitution__argument_restrictions_Ad22).

(all X all Y all T (k(X,Y,T) -> (pd(X) <-> pd(Y)))) # label(constitution_argument_restrictions_Ad23).

(all X all Y all T (k(X,Y,T) -> -(k(Y,X,T)))) # label(constitution__ground_axiom_Ad24).

(all X all Y all Z all T ((k(X,Y,T) & k(Y,Z,T)) -> k(X,Z,T))) # label(constitution__ground_axiom_Ad25).

(all X all Y all T (k(X,Y,T) -> (pre(X,T) & pre(Y,T)))) # label(constitution_Ad26).

(all X all Y all T (k(X,Y,T) -> (all S (p(S,T) -> k(X,Y,S))))) # label(constitution_Ad27_weakened).

(all X all Y all V all T ((k(X,Y,T) & tp(V,Y,T)) -> (exists U (tp(U,X,T) & k(U,V,T))))) # label(constitution_Ad29).


%Participation%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


(all X all Y all T (pc(X,Y,T) -> (ed(X) & pd(Y) & t(T)))) # label(participation_argument_restrictions_Ad33).

(all X all T ((pd(X) & pre(X,T)) -> (exists Y (pc(Y,X,T))))) # label(participation_existential_Ad34).

(all X (ed(X) -> (exists Y exists T (pc(X,Y,T))))) # label(participation_existential_Ad35_corrected).

(all X all Y all T (pc(X,Y,T) -> (pre(X,T) & pre(Y,T)))) # label(participation_present_Ad36).

(all X all Y all T (pc(X,Y,T) -> (all S (p(S,T) -> pc(X,Y,S))))) # label(participation_present_Ad37).


%Direct_quality%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


(all X all Y (dqt(X,Y) -> (q(X) & (ed(Y) | pd(Y))))) # label(direct_quality_argument_restrictions_Ad38_simplified).
(all X all Y (dqt(X,Y) -> (tq(X) <-> pd(Y)))) # label(direct_quality_argument_restrictions_Ad39_for_dqt).
(all X all Y (dqt(X,Y) -> (pq(X) <-> ped(Y)))) # label(direct_quality_argument_restrictions_Ad40_for_dqt).
(all X all Y (dqt(X,Y) -> (aq(X) <-> nped(Y)))) # label(direct_quality_argument_restrictions_Ad41_for_dqt).
(all X all Y all V ((dqt(X,Y) & dqt(X,V)) -> ((Y)=(V)))) # label(direct_quality_Ad43).
(all X all U all Y ((dqt(X,Y) & dqt(U,Y) & tl(X) & tl(U)) -> ((X)=(U)))) # label(direct_quality_unicity_Ad44_1).
(all X all U all Y ((dqt(X,Y) & dqt(U,Y) & sl(X) & sl(U)) -> ((X)=(U)))) # label(direct_quality_unicity_Ad44_2).


(all X (tq(X) -> (exists Y (dqt(X,Y) & pd(Y))))) # label(direct_quality_existential_Ad46).
(all X (pq(X) -> (exists Y (dqt(X,Y) & ped(Y))))) # label(direct_quality_existential_Ad47).
(all X (aq(X) -> (exists Y (dqt(X,Y) & nped(Y))))) # label(direct_quality_existential_Ad48).
(all X (pd(X) -> (exists Y (dqt(Y,X) & tl(Y))))) # label(direct_quality_existential_Ad49).
(all X (ped(X) -> (exists Y (dqt(Y,X) & sl(Y))))) # label(direct_quality_existential_Ad50).

(all X (nped(X) -> (exists Y (dqt(Y,X) & aq(Y))))) # label(direct_quality_existential_Ad51).



%Immediate_quale%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(all X all Y (ql(X,Y) -> (tr(X) & tq(Y)))) # label(immediate_quale_argument_restrictions_Ad52).
(all X all Y ((ql(X,Y) & tl(Y)) -> t(X))) # label(immediate_quale_argument_restrictions_Ad53).
(all X all Y all U ((ql(X,Y) & ql(U,Y)) -> ((X)=(U)))) # label(immediate_quale_ground_Ad54).
(all X (tq(X) -> (exists Y (ql(Y,X))))) # label(immediate_quale_existential_Ad55).

%Temporary_quale%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(all X all Y all T (tql(X,Y,T) -> ((pr(X) | ar(X)) & (pq(Y) | aq(Y)) & t(T)))) # label(temporary_quale_argument_restrictions_Ad58).

(all X all Y all T (tql(X,Y,T) -> (pr(X) <-> pq(Y)))) # label(temporary_quale_argument_restrictions_Ad59).
(all X all Y all T (tql(X,Y,T) -> (ar(X) <-> aq(Y)))) # label(temporary_quale_argument_restrictions_Ad60).
(all X all Y all T ((tql(X,Y,T) & sl(Y)) -> s(X))) # label(temporary_quale_argument_restrictions_Ad61).
(all X all T (((pq(X) | aq(X)) & pre(X,T)) -> (exists Y (tql(Y,X,T))))) # label(temporary_quale_existential_Ad62).
(all X all Y all T (tql(X,Y,T) -> pre(Y,T))) # label(temporary_quale_present_Ad65).
(all X all Y all T (tql(X,Y,T) -> (all S (p(S,T) -> tql(X,Y,S))))) # label(temporary_quale_present_Ad66).


%Specific_constant_dependence%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


(all X all Y (sd(X,Y) <-> ((exists T (pre(X,T))) & (all T (pre(X,T) -> pre(Y,T)))))) # label(specific_dependence_Dd69).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%Definitions required for OWL:

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


(all X (cat(X) <-> (all T (tat(X,T)))))  # label(constant_atom).
(all X all Y (catp(X,Y) <-> (all T (tatp(X,Y,T)))))  # label(constant_atomic_part).
(all X all Y(cp(X,Y) <-> (all T (tp(X,Y,T))))) # label(constant_part).
(all X all Y (cpp(X,Y) <-> (all T (tpp(X,Y,T))))) # label(constant_proper_part).
(all X all Y (cov(X,Y) <-> (all T (tov(X,Y,T))))) # label(constant_proper_part).

(all X all Y all Z all T (sumt(Z,X,Y,T) <-> (((ped(Z) & ped(X) & ped(Y)) | (nped(Z) & nped(X) & nped(Y))) & (all W (tov(W,Z,T) <-> (tov(W,X,T) | tov(W,Y,T))))))) # label(temporary_sum_definition_from_Dd26).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%REIFIED RELATIONS

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%Taxonomy of reified relations:

(- (exists X (reln(X) & pt(X)))).
(all X ((r_csum(X) | r_kt(X) | r_ovt(X) | r_pct(X) | r_qlt(X) | r_sum(X) | r_sumt(X)) <-> reln(X))).
(- (exists X (r_csum(X) & r_kt(X)))).
(- (exists X (r_csum(X) & r_ovt(X)))).
(- (exists X (r_csum(X) & r_pct(X)))).
(- (exists X (r_csum(X) & r_qlt(X)))).
(- (exists X (r_csum(X) & r_sum(X)))).
(- (exists X (r_csum(X) & r_sumt(X)))).
(- (exists X (r_kt(X) & r_ovt(X)))).
(- (exists X (r_kt(X) & r_pct(X)))).
(- (exists X (r_kt(X) & r_qlt(X)))).
(- (exists X (r_kt(X) & r_sum(X)))).
(- (exists X (r_kt(X) & r_sumt(X)))).
(- (exists X (r_ovt(X) & r_pct(X)))).
(- (exists X (r_ovt(X) & r_qlt(X)))).
(- (exists X (r_ovt(X) & r_sum(X)))).
(- (exists X (r_ovt(X) & r_sumt(X)))).
(- (exists X (r_pct(X) & r_qlt(X)))).
(- (exists X (r_pct(X) & r_sum(X)))).
(- (exists X (r_pct(X) & r_sumt(X)))).
(- (exists X (r_qlt(X) & r_sum(X)))).
(- (exists X (r_qlt(X) & r_sumt(X)))).
(- (exists X (r_sum(X) & r_sumt(X)))).

(all X ((r_kpdt(X) | r_kpedt(X) | r_knpedt(X)) <-> r_kt(X))).
(- (exists X (r_kpdt(X) & r_kpedt(X)))).
(- (exists X (r_kpedt(X) & r_knpedt(X)))).
(- (exists X (r_kpdt(X) & r_knpedt(X)))).

(all X (r_pt(X) -> r_ovt(X))).
(all X ((r_atpt(X) | r_ppt(X)) <-> r_pt(X))).
(- (exists X (r_atpt(X) & r_ppt(X)))).

(all X ((r_ql_ar_aqt(X) | r_ql_pr_pqt (X)) <-> r_qlt(X))).
(- (exists X (r_ql_ar_aqt(X) & r_ql_pr_pqt(X)))).

(all X ((r_sum_ab(X) | r_sum_pd(X)) <-> r_sum(X))).




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%Definitional and existential axioms for reified relations:
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%r_atpt%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%reification of atomic temporal part.

(all R (r_atpt(R) -> (exists X exists Y exists T (tatp(X,Y,T) & atpt1(R,X) & atpt2(R,Y) & atptt(R,T))))). %def


(all X all Y (atpt1(X,Y) -> (r_atpt(X) & ed(Y)))).
(all X all Y (atpt2(X,Y) -> (r_atpt(X) & ed(Y)))).
(all X all Y (atptt(X,Y) -> (r_atpt(X) & t(Y)))).


(all X all Y (atpt1(X,Y) -> pt1(X,Y))).
(all X all Y (atpt2(X,Y) -> pt2(X,Y))).
(all X all Y (atptt(X,Y) -> ptt(X,Y))).


%r_csum%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%reification of constant sum.


%(all R (r_csum(R) -> ((exists X exists Y exists Z (tsum(X,Y,Z) & csum1(R,X) & csum2(R,Y) & csum3(R,Z)))))). %def


%(all X all Y (csum1(X,Y) -> (r_csum(X) & ed(Y)))).
%(all X all Y (csum2(X,Y) -> (r_csum(X) & ed(Y)))).
%(all X all Y (csum3(X,Y) -> (r_csum(X) & ed(Y)))).



%r_knpedt%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%reification of constitution of non-physical endurants

(all R (r_knpedt(R) -> (exists X exists Y exists T (k(X,Y,T) & knpedt1(R,X) & knpedt2(R,Y) & knpedtt(R,T))))). %Def


(all X all Y (knped1(X,Y) -> (r_knpedt(X) & nped(Y)))).
(all X all Y (knped2(X,Y) -> (r_knpedt(X) & nped(Y)))).
(all X all Y (knpedt(X,Y) -> (r_knpedt(X) & t(Y)))).



%r_kpdt%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%reification of constitution of perdurants.

(all R (r_kpdt(R) -> (exists X exists Y exists T (k(X,Y,T) & kpdt1(R,X) & kpdt2(R,Y) & kpdtt(R,T))))). %def


(all X all Y (kpd1(X,Y) -> (r_kpdt(X) & pd(Y)))).
(all X all Y (kpd2(X,Y) -> (r_kpdt(X) & pd(Y)))).
(all X all Y (kpdt(X,Y) -> (r_kpdt(X) & t(Y)))).


%r_kpedt%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%reification of constitution of physical endurants.

(all R (r_kpedt(R) -> (exists X exists Y exists T (k(X,Y,T) & kpedt1(R,X) & kpedt2(R,Y) & kpedtt(R,T))))). %Def


(all X all Y (kped1(X,Y) -> (r_kpedt(X) & ped(Y)))).
(all X all Y (kped2(X,Y) -> (r_kpedt(X) & ped(Y)))).
(all X all Y (kpedt(X,Y) -> (r_kpedt(X) & t(Y)))).




%r_ovt%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%reification of temporal overlap.

(all R (r_ovt(R) -> (exists X exists Y exists T (tov(X,Y,T) & ovt1(R,X) & ovt2(R,Y) & ovtt(R,T))))). %def



(all X all Y (ovt1(X,Y) -> (r_ovt(X) & ed(Y)))).
(all X all Y (ovt2(X,Y) -> (r_ovt(X) & ed(Y)))).
(all X all Y (ovtt(X,Y) -> (r_ovt(X) & t(Y)))).

%r_pt%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%reification of temporal part.

(all R (r_pt(R) -> (exists X exists Y exists T (tp(X,Y,T) & pt1(R,X) & pt2(R,Y) & ptt(R,T))))). %def


(all X all Y (pt1(X,Y) -> (r_pt(X) & ed(Y)))).
(all X all Y (pt2(X,Y) -> (r_pt(X) & ed(Y)))).
(all X all Y (ptt(X,Y) -> (r_pt(X) & t(Y)))).


%r_pct%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%reification of participaton.


(all R (r_pct(R) -> (exists X exists Y exists T (pc(X,Y,T) & pct1(R,X) & pct2(R,Y) & pctt(R,T))))). %def.

(all X all Y (pct1(X,Y) -> (r_pct(X) & ed(Y)))).
(all X all Y (pct2(X,Y) -> (r_pct(X) & pd(Y)))).
(all X all Y (pctt(X,Y) -> (r_pct(X) & t(Y)))).


%r_ppt%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%reification of temporal proper part.

(all R (r_ppt(R) -> (exists X exists Y exists T (tpp(X,Y,T) & ppt1(R,X) & ppt2(R,Y) & pptt(R,T))))). %def


(all X all Y (ppt1(X,Y) -> (r_ppt(X) & ed(Y)))).
(all X all Y (ppt2(X,Y) -> (r_ppt(X) & ed(Y)))).
(all X all Y (pptt(X,Y) -> (r_ppt(X) & t(Y)))).

(all X all Y (ppt1(X,Y) -> pt1(X,Y))).
(all X all Y (ppt2(X,Y) -> pt2(X,Y))).
(all X all Y (pptt(X,Y) -> ptt(X,Y))).

%r_ql_ar_aqt%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%reification of temporal quale of abstract region and quality.

(all R (r_ql_ar_aqt(R) -> ((exists X exists Y exists T (tql(X,Y,T) & ql_ar_aq1(R,X) & ql_ar_aq2(R,Y) & ql_ar_aqt(R,T)))))). %Def

(all X all Y (ql_ar_aq1(X,Y) -> (r_ql_ar_aqt(X) & ar(Y)))).
(all X all Y (ql_ar_aq2(X,Y) -> (r_ql_ar_aqt(X) & aq(Y)))).
(all X all Y (ql_ar_aqt(X,Y) -> (r_ql_ar_aqt(X) & t(Y)))).


%r_ql_pr_pqt%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%reification of temporal quale of physical region and quality.

(all R (r_ql_pr_pqt(R) -> ((exists X exists Y exists T (tql(X,Y,T) & ql_pr_pq1(R,X) & ql_pr_pq2(R,Y) & ql_pr_pqt(R,T)))))). %Def

(all X all Y (ql_pr_pq1(X,Y) -> (r_ql_pr_pqt(X) & pr(Y)))).
(all X all Y (ql_pr_pq2(X,Y) -> (r_ql_pr_pqt(X) & pq(Y)))).
(all X all Y (ql_pr_pqt(X,Y) -> (r_ql_pr_pqt(X) & t(Y)))).



%r_sum_ab%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%reification of the sum of abstracts.

(all R (r_sum_ab(R) -> ((exists X exists Y exists Z (sum(X,Y,Z) & sum_ab1(R,X) & sum_ab2(R,Y) & sum_ab3(R,Z)))))). %def


(all X all Y (sum_ab1(X,Y) -> (r_sum_ab(X) & ab(Y)))).
(all X all Y (sum_ab2(X,Y) -> (r_sum_ab(X) & ab(Y)))).
(all X all Y (sum_ab3(X,Y) -> (r_sum_ab(X) & ab(Y)))).

%r_sum_pd%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%reification of the sum of perdurants.

(all R (r_sum_pd(R) -> ((exists X exists Y exists Z (sum(X,Y,Z) & sum_pd1(R,X) & sum_pd2(R,Y) & sum_pd3(R,Z)))))). %def



(all X all Y (sum_pd1(X,Y) -> (r_sum_pd(X) & pd(Y)))).
(all X all Y (sum_pd2(X,Y) -> (r_sum_pd(X) & pd(Y)))).
(all X all Y (sum_pd3(X,Y) -> (r_sum_pd(X) & pd(Y)))).


%r_sumt%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%reification of temporary sum.

(all R (r_sumt(R) -> (exists X exists Y exists Z exists T (sumt(X,Y,Z,T) & sumt1(R,X) & sumt2(R,Y) & sumt3(R,Z) & sumtt(R,T))))). %def

(all X all Y (sumt1(X,Y) -> (r_sumt(X) & ed(Y)))).
(all X all Y (sumt2(X,Y) -> (r_sumt(X) & ed(Y)))).
(all X all Y (sumt3(X,Y) -> (r_sumt(X) & ed(Y)))).
(all X all Y (sumtt(X,Y) -> (r_sumt(X) & t(Y)))).


end_of_list.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%                                     AXIOMS FROM DOLCE  OWL
%
%
% Proofs that DOLCE SIMPLE Plus Axioms and DEFINITIONS entails the OWL axioms
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%







%PROVER9

formulas(goals).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Reifications of relations - object properties
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Reification of atomic temproal part atpt1, atpt2, atptt.

%atpt1%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X all Y (atpt1(X,Y) -> pt1(X,Y))). %PROVED ONLY BECAUSE ASSUMED


%(all X exists Y (atpt1(X,Y) -> (r_atpt(X)))). %PROVED
%(all X all Y (atpt1(X,Y) -> (ed(Y)))). %PROVED


%atpt2%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X all Y (atpt2(X,Y) -> pt2(X,Y))). %PROVED ONLY BECAUSE ASSUMED

%(all X exists Y (atpt2(X,Y) -> (r_atpt(X)))). %PROVED
%(all X all Y (atpt2(X,Y) -> (ed(Y)))). %PROVED


%atptt%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X all Y (atptt(X,Y) -> ptt(X,Y))). %PROVED ONLY BECAUSE ASSUMED

%(all X exists Y (atptt(X,Y) -> (r_atpt(X)))). %PROVED
%(all X all Y (atptt(X,Y) -> (t(Y)))). %PROVED



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Reification of constant sum csum1, csum2, csum3.

%csum1%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED:Keeping only the axioms for r_csum e csum1 to make it quicker.

%(all X exists Y (csum1(X,Y) -> r_csum(X))). %PROVED
%(all X all Y (csum1(X,Y) -> (exists T (pre(Y,T))))). %PROVED
%(all X all Y (csum1(X,Y) -> (ed(Y)))). %PROVED.

%csum-2%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED:Keeping only the axioms for r_csum e csum2 to make it quicker.

%(all X exists Y (csum2(X,Y) -> r_csum(X))). %PROVED
%(all X all Y (csum2(X,Y) -> (exists T (pre(Y,T))))). %PROVED
%(all X all Y (csum2(X,Y) -> (ed(Y)))). %PROVED

%csum-3%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED:Keeping only the axioms for r_csum e csum3 to make it quicker.


%(all X exists Y (csum3(X,Y) -> r_csum(X))). %PROVED
%(all X all Y (csum3(X,Y) -> (exists T (pre(Y,T))))). %PROVED
%(all X all Y (csum3(X,Y) -> (ed(Y)))). %PROVED



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%Reification of constitution of non physical endurants knped1, knped2, knpedt.


%knped1%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X exists Y (knped1(X,Y) -> (r_knpedt(X)))). %PROVED
%(all X all Y (knped1(X,Y) -> (nped(Y)))). %PROVED

%knped2%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X exists Y (knped2(X,Y) -> (r_knpedt(X)))). %PROVED
%(all X all Y (knped2(X,Y) -> (nped(Y)))). %PROVED

%knpedt%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X exists Y (knpedt(X,Y) -> (r_knpedt(X)))). %PROVED
%(all X all Y (knpedt(X,Y) -> (t(Y)))). %PROVED

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%Reification of constitution of perdurants kpd1, kpd2, kpdt.


%kpd1%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X exists Y (kpd1(X,Y) -> (r_kpdt(X)))). %PROVED
%(all X all Y (kpd1(X,Y) -> (pd(Y)))). %PROVED

%kpd2%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X exists Y (kpd2(X,Y) -> (r_kpdt(X)))). %PROVED
%(all X all Y (kpd2(X,Y) -> (pd(Y)))). %PROVED

%kpdt%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X exists Y (kpdt(X,Y) -> (r_kpdt(X)))). %PROVED
%(all X all Y (kpdt(X,Y) -> (t(Y)))). %PROVED

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Reification of constitution of physical endurants kped1, kped2, kpedt.


%kped1%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X exists Y (kped1(X,Y) -> (r_kpedt(X)))). %PROVED
%(all X all Y (kped1(X,Y) -> (ped(Y)))). %PROVED

%kped2%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X exists Y (kped2(X,Y) -> (r_kpedt(X)))). %PROVED
%(all X all Y (kped2(X,Y) -> (ped(Y)))). %PROVED

%kpedt%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X exists Y (kpedt(X,Y) -> (r_kpedt(X)))). %PROVED
%(all X all Y (kpedt(X,Y) -> (t(Y)))). %PROVED




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Reification of temporary overlap ovt1, ovt2, ovtt

%ovt1%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED:Keeping only the axioms for r_ovt e ovt1 to make it quicker.

%%%%note: it is termed tov in OWL.

%(all X exists Y (ovt1(X,Y) -> (r_ovt(X)))). %PROVED
%(all X all Y (ovt1(X,Y) -> (ed(Y)))). %PROVED

%ovt2%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED:Keeping only the axioms for r_ovt e ovt2 to make it quicker.


%(all X exists Y (ovt2(X,Y) -> (r_ovt(X)))). %PROVED
%(all X all Y (ovt2(X,Y) -> (ed(Y)))). %PROVED

%ovtt%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED:Keeping only the axioms for r_ovt e ovt1 to make it quicker.


%(all X exists Y (ovtt(X,Y) -> (r_ovt(X)))). %PROVED
%(all X all Y (ovtt(X,Y) -> (t(Y)))). %PROVED



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%Reification of the temporal part relation r_pt and pt1, pt2, ptt.


%pt1%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X exists Y (pt1(X,Y) -> (r_pt(X)))). %PROVED
%(all X all Y (pt1(X,Y) -> (ed(Y)))). %PROVED

%pt2%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X exists Y (pt2(X,Y) -> (r_pt(X)))). %PROVED
%(all X all Y (pt2(X,Y) -> (ed(Y)))). %PROVED

%ptt%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X exists Y (ptt(X,Y) -> (r_pt(X)))). %PROVED
%(all X all Y (ptt(X,Y) -> (t(Y)))). %PROVED


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Reification of the participation relation r_pct and pct1, pct2, pctt.



%pct1%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X exists Y (pct1(X,Y) -> (r_pct(X)))). %PROVED
%(all X all Y (pct1(X,Y) -> (ed(Y)))). v

%pct2%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X exists Y (pct2(X,Y) -> (r_pct(X)))). %PROVED
%(all X all Y (pct2(X,Y) -> (pd(Y)))). %PROVED


%pctt%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X exists Y (pctt(X,Y) -> (r_pct(X)))). %PROVED
%(all X all Y (pctt(X,Y) -> (t(Y)))). %PROVED


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Reification of the temporal proper part relation r_ppt and ppt1, ppt2, pptt.



%ppt1%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X all Y (ppt1(X,Y) -> pt1(X,Y))). %PROVED

%(all X exists Y (ppt1(X,Y) -> (r_ppt(X)))). %PROVED
%(all X all Y (ppt1(X,Y) -> (ed(Y)))). %PROVED

%ppt2%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X all Y (ppt2(X,Y) -> pt2(X,Y))). %PROVED

%(all X exists Y (ppt2(X,Y) -> (r_ppt(X)))). %PROVED
%(all X all Y (ppt2(X,Y) -> (ed(Y)))). %PROVED

%pptt%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X all Y (pptt(X,Y) -> ptt(X,Y))). %PROVED

%(all X exists Y (pptt(X,Y) -> (r_ppt(X)))). %PROVED
%(all X all Y (pptt(X,Y) -> (t(Y)))). %PROVED

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



%Reification of the temporal quale relation between abstract reagion and abstract qualities r_ql_ar_aqt and ql_ar_aq1, ql_ar_aq2, ql_ar_aqt

%ql_ar_aq1%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X exists Y (ql_ar_aq1(X,Y) -> (r_ql_ar_aqt(X)))). %PROVED
%(all X all Y (ql_ar_aq1(X,Y) -> (ar(Y)))). %PROVED

%ql_ar_aq2%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X exists Y (ql_ar_aq2(X,Y) -> (r_ql_ar_aqt(X)))). %PROVED
%(all X all Y (ql_ar_aq2(X,Y) -> (aq(Y)))). %PROVED

%ql_ar_aqt%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X exists Y (ql_ar_aqt(X,Y) -> (r_ql_ar_aqt(X)))). %PROVED
%(all X all Y (ql_ar_aqt(X,Y) -> (t(Y)))). %PROVED


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Reification of the temporal quale relation between physcial reagion and physcial qualities r_ql_pr_pqt and ql_pr_pq1, ql_pr_pq2, ql_pr_pqt




%ql_pr_pq1%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED


%(all X exists Y (ql_pr_pq1(X,Y) -> (r_ql_pr_pqt(X)))). %PROVED

%(all X all Y (ql_pr_pq1(X,Y) -> (pr(Y)))). %PROVED


%ql_pr_pq2%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X exists Y (ql_pr_pq2(X,Y) -> (r_ql_pr_pqt(X)))). %PROVED
%(all X all Y (ql_pr_pq2(X,Y) -> (pq(Y)))). %PROVED

%ql_pr_pqt%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X exists Y (ql_pr_pqt(X,Y) -> (r_ql_pr_pqt(X)))). %PROVED
%(all X all Y (ql_pr_pqt(X,Y) -> (t(Y)))). %PROVED




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Reification of sum of abstracts sum_ab1, sum_ab2, sum_ab3

%sum_ab1%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X exists Y (sum_ab1(X,Y) -> (r_sum_ab(X)))). %PROVED
%(all X all Y (sum_ab1(X,Y) -> (ab(Y)))). %PROVED

%sum_ab2%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X exists Y (sum_ab2(X,Y) -> (r_sum_ab(X)))).%PROVED
%(all X all Y (sum_ab2(X,Y) -> (ab(Y)))).%PROVED

%sum_ab3%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X exists Y (sum_ab3(X,Y) -> (r_sum_ab(X)))). %%PROVED
%(all X all Y (sum_ab3(X,Y) -> (ab(Y)))). %%PROVED

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Reification of sum of perdurants sum_pd1, sum_pd2, sum_pd3

%sum_pd1%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X exists Y (sum_pd1(X,Y) -> (r_sum_pd(X)))). %PROVED
%(all X all Y (sum_pd1(X,Y) -> (pd(Y)))). %PROVED

%sum_pd2%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X exists Y (sum_pd2(X,Y) -> (r_sum_pd(X)))). %PROVED
%(all X all Y (sum_pd2(X,Y) -> (pd(Y)))). %PROVED

%sum_pd3%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X exists Y (sum_pd3(X,Y) -> (r_sum_pd(X)))). %PROVED
%(all X all Y (sum_pd3(X,Y) -> (pd(Y)))). %PROVED


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Reification of temporal sum of endurants r_sumt and sumt1, sumt2, sumt3, sumtt.


%sumt1%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X exists Y (sumt1(X,Y) -> (r_sumt(X)))). %PROVED
%(all X all Y (sumt1(X,Y) -> (ed(Y)))).%PROVED

%tsum2%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X exists Y (sumt2(X,Y) -> (r_sumt(X)))). %PROVED
%(all X all Y (sumt2(X,Y) -> (ed(Y)))). %PROVED

%tsum3%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%def

%(all X exists Y (sumt3(X,Y) -> (r_sumt(X)))). %PROVED
%(all X all Y (sumt3(X,Y) -> (ed(Y)))). %PROVED

%tsumt%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%PROVED

%(all X exists Y (sumtt(X,Y) -> (r_sumt(X)))). %PROVED
%(all X all Y (sumtt(X,Y) -> (t(Y)))). %PROVED


end_of_list.

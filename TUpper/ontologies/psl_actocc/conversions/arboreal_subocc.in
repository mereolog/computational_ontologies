
(all o1 all o 
	(subactivity_occurrence(o1,o2) 
	->
	(activity_occurrence(o1) 
	& activity_occurrence(o2)))).

(all o 
	(activity_occurrence(o) 
	->
	subactivity_occurrence(o,o))).

(all o1 all o2 
	((subactivity_occurrence(o1,o2) 
	& subactivity_occurrence(o2,o1)) 
	->
	(o1=o2))).


(all o1 all o2 all o3
	((subactivity_occurrence(o1,o2) 
	& subactivity_occurrence(o2,o3)) 
	->
	subactivity_occurrence(o1,o3))).

(all o1 all o2
	((legal(o1) 
	& subactivity_occurrence(o2,o1))
	->
	 (o1=o2))).

(all o1
	(legal(o1) 
	<->
	(activity_occurrence(o1) 
	& (all o2 
		(subactivity_occurrence(o2,o1)
		->
		 (o1=o2)))))).

(all o1 all o2 
	((subactivity_occurrence(o1,o2) 
	& (o1 != o2))
	->
	(exists o3
		(legal(o3) 
		& subactivity_occurrence(o3,o1))))).



(all x all y
	(leq(x,y)
	->
	(D(x) & D(y)))).

% Reflexive
all x
	(D(x)
	->
	(leq(x,x))).

% Antisymmetry
all x all y
	((leq(x,y)
	& leq(y,x))
	->
	(x=y)).

% Transitive
all x all y all z
	((leq(x,y)
	& leq(y,z))
	->
	leq(x,z)).

(all x all y
	(lt(x,y)
	<->
	(leq(x,y)
	& (x != y)))).

%antichain
(all x all y
	(leq(x,y)
	->
	(x=y))).

all o(
    arboreal(o) -> activity_occurrence(o)
).

all s1 all s2(
    arboreal_subocc(s1,s2) -> subactivity_occurrence(s1,s2)
).

all o(
    arboreal(o) <-> atom_subocc(o)
).


all o1(
    atom_subocc(o1) <-> activity_occurrence(o1) & all o2(
        subactivity_occurrence(o2,o1) -> (o1=o2)
    )
).

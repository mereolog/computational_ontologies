% Saved by Prover9-Mace4 Version 0.5, December 2007.

set(ignore_option_dependencies). % GUI handles dependencies

if(Prover9). % Options for Prover9
  assign(max_seconds, 60).
end_if.

if(Mace4).   % Options for Mace4
  assign(max_seconds, 60).
end_if.

formulas(assumptions).

all a all s1 all s2(
    min_precedes(s1,s2,a)
    -> exists a1 exists a2(
        subactivity(a1,a)
        &subactivity(a2,a)
        & atocc(s1,a1)
        & atocc(s2,a2)
    )
).

all a all s
    (root(s,a)
    -> exists a1(
        subactivity(a1,a)
        & atocc(s,a1)
    )).

all s1 all s2 all a
    (min_precedes(s1,s2,a)
    -> exists s3(
        root(s3,a)
        & min_precedes(s3,s2,a)
    )).

all s1 all s2 all a
    (min_precedes(s1,s2,a)
    -> precedes(s1,s2)).

all s all a
    (root(s,a)
    -> legal(s)).

all s all a
    (atocc(s,a)&legal(s)
    -> root(s,a)).

all s1 all s2 all a
    (min_precedes(s1,s2,a)
    -> exists s3(
        next_subocc(s1,s3,a)
        & (
            min_precedes(s3,s2,a)
            |(s3=s2)
        )
    )).

all a all s1 all s2 all s3 
    (
        min_precedes(s1,s2,a) & min_precedes(s1,s3,a)&precedes(s2,s3)
        -> min_precedes(s2,s3,a)
    ).

all a1 all a2 all s1 all s2 all s3 
    (subactivity(a1,a2)
    & subtree(s1,a1,s2,a2)
    & min_precedes(s1,s3,a1)
    -> min_precedes(s1,s3,a2)).

all s1 all s2 all a 
    (min_precedes(s1,s2,a)
    -> - atomic(a)).

all a all s1 all s2 all s3 
    (min_precedes(s2,s1,a)
    & min_precedes(s3,s1,a)
    & precedes(s2,s3)
    -> min_precedes(s2,s3,a)).

all s all a 
    (leaf(s,a)
    <-> 
        (root(s,a) | exists s1(min_precedes(s1,s,a)))
        &-(exists s2(min_precedes(s,s2,a)))
    ).

all a all s1 all s2
    (do(a,s1,s2)
    <-> root(s1,a)
    &leaf(s2,a)
    &(min_precedes(s1,s2,a)|(s1=s2))).

all s1 all s2 all a 
    (next_subocc(s1,s2,a)
    <-> min_precedes(s1,s2,a)
        & -(exists(s3)(
            activity_occurrence(s3)
            & min_precedes(s1,s3,a)
            & min_precedes(s3,s2,a)
        ))
       ).

all s1 all s2 all a1 all a2
    (subtree(s1,a1,s2,a2)
    <-> root(s1,a1)
        & root(s2,a2)
        & (min_precedes(s1,s2,a1)|(s1=s2))
        & all s3 (
            min_precedes(s1,s3,a1)-> min_precedes(s2,s3,a2)
        )).

all s1 all s2 all a
    (sibling(s1,s2,a)
    <-> 
        (exists s3(next_subocc(s3,s1,a)& next_subocc(s3,s2,a)))
        |(
            root(s1,a)
            &root(s2,a)
            &(
                (initial(s1)&initial(s2))
                | (exists s4 exists a1 exists a2(
                    s1=successor(a1,a4)
                    & s2 =successor(s2,s4)
                ))
            )
        )
    ).

arboreal_subocc(x,y) <-> subactivity_occurrence(x,y) & arboreal(x)&arboreal(y).

all o1 all o2
    (subactivity_occurrence(o1,o2)
    -> activity_occurrence(o2)
    & activity_occurrence(o1)).

all a all s1 all s2
    (min_precedes(s1,s2,a)
    -> exists occ(
        occurrence_of(occ,a)
        & subactivity_occurrence(s1,occ)
        & subactivity_occurrence(s2,occ)
    )).

all a all s
    (root(s,a)& -atomic(a)
    -> exists occ(
        occurrence_of(occ, a)
        & subactivity_occurrence(s,occ)
    )).

all a all occ
    (occurrence_of(occ, a)& - atomic(a)
    -> exists s (
        root(s,a) & subactivity_occurrence(s,occ)
    )).

all a all s1 all occ1 all occ2 
    (occurrence_of(occ, a) 
    & occurrence_of(occ2, a)
    & -(occ1 = occ2)
    -> exists s
    (arboreal(s)
    &subactivity_occurrence(s, occ1)
    & - subactivity_occurrence(s, occ2))).

all a all occ all s1 all s2 
    (occurrence_of(occ, a)
    & arboreal(s1)
    & arboreal(s2)
    & subactivity_occurrence(s1, occ)
    & subactivity_occurrence(s2, occ)
    -> min_precedes(s1,s2,a)
    | min_precedes(s2, s1, a)
    | (s1,s2)).

all a all s1 all s2 all occ 
    (min_precedes(s1, s2, a)
    & occurrence_of(occ, a)
    & subactivity_occurrence(s2,occ)
    -> subactivity_occurrence(s1,occ)).

all a1 all a2 all occ1 all occ2
    (occurrence_of(occ1, a1)
    & occurrence_of(occ2, a2)
    & - atomic(a1)
    & subactivity_occurrence(occ1, occ2)
    -> subactivity(a1, a2)).

all occ1 all occ2 all occ3 
    (subactivity_occurrence(occ1, occ2)
    & subactivity_occurrence(occ2, occ3)
    -> subactivity_occurrence(occ1, occ3)).

all a1 all a2 all occ1 all occ2
    (occurrence_of(occ1, a1)
    & occurrence_of(occ2, a2)
    & subactivity(a1, a2)
    & -subactivity_occurrence(occ1, occ2)
    -> exists s 
    (subactivity_occurrence(s, occ1)
    & - subactivity_occurrence(s, occ2))).   

all s all occ
    (root_occ(s, occ)
    -> (beginof(occ)=beginof(s))).

all s all occ
    (leaf_occ(s, occ)
    -> (endof(occ) = endof(s))).

all s1 all s2 all a
    (mono(s1, s2, a)
    -> hom(s1, s2, a)).

all s1 all s2 all a 
    (hom(s1, s2, a)
    & -mono(s1, s2, a)
    -> exists s3 
    (
        (min_precedes(s3, s2, a)& mono(s1, s3, a))
        |(min_precedes(s3,s1,a)&mono(s2, s3,a))
    )).

all s1 all s2 all s3 all a 
    (mono(s1, s2, a) & mono(s3,s2,a)
    -> -(min_precedes(s1,s3,a) | min_precedes(s3,s1,a)
    )).

all s1 all s2 all s3 all a
    (mono(s1, s2, a)
    & mono(s2,s3,a)
    -> mono(s1, s3,a)).

all s1 all s2 all a(
    iso_occ(s1,s2,a)
    <-> exists a1 exists a2 exists a3
    (
        atomic(a1)
        &atomic(s2)
        &atomic(a3)
        &subactivity(a3,a)
        &occurrence_of(s1, conc(a1,a3))
        &occurrence_of(s2, conc(a2,a3))
        & all a4(
            subactivity(a4, conc(a3,a1))
            & subactivity(a4, conc(a3,a1))
            &subactivity(a4,a)
            &subactivity(a3,a4)
            -> subactivity(a3,a4) | (a3=a4)
        )
    )
).

all s1 all s2 all a(
    hom(s1,s2,a)
    <-> exists occ1 exists occ2(
        iso_occ(s1,s2,a)
        & - min_precedes(s1,s2,a)
        & - min_precedes(s2,s1,a)
        & subactivity_occurrence(s1,occ1)
        & subactivity_occurrence(s2,occ2)
        & occurrence_of(occ1, a)
        & occurrence_of(occ2, a)
    )
).

all s all occ
    (root_occ(s, occ)
    <-> exists a (
        occurrence_of(occ, a)
        & subactivity_occurrence(s, occ)
        & root(s, a)
    )).

all s all occ 
    (leaf_occ(s, occ)
    <-> exists a (
        occurrence_of(occ, a)
        & subactivity_occurrence(s, occ)
        & leaf(s,a)
    )).

all occ1 all occ2 
    (same_grove(occ1, occ2)
    <-> exists a exists s1 exists s2
    (
        occurrence_of(occ1,a)
        &occurrence_of(occ2, a)
        & root_occ(s1, occ1)
        & root_occ(s2, occ2)
        & (
            (initial(s1)&initial(s2))
            | (exists s4 exists a1 exists a2(
                (s1 = successor(s1,s4))
                & (s2 = successor(a2, s4))
            ))
        )
    )).

all o1 
    (atom_subocc(o1)
    <-> legal(o1)&
    (all o2(
        subactivity_occurrence(o2,o1)-> (o1=o2)
    ))).

all o 
    (activity_occurrence(o) -> subactivity_occurrence(o,o)).

all o1 all o2 
    (subactivity_occurrence(o1,o2)
    & subactivity_occurrence(o2,o1)
    -> (o1=o2)).

all o1 all o2
    (arboreal(o1)
    & subactivity_occurrence(o2,o1)
    -> (o1 = o2)).

all o
    (arboreal(o)<->atom_subocc(o)).

all s1 all s2 all o
    (subactivity_occurrence(s1,o) & subactivity_occurrence(s2,0) & arboreal(s1) & arboreal(s2)
    -> precedes(s1,s2) | precedes(s2,s1) | (s1=s2)).

all s1 all s2 all o 
    (subactivity_occurrence(s1,o) & subactivity_occurrence(s2,o) & precedes(s1,s2)
    -> exists s3 (root_occ(s3,o) & (precedes(s3,s1) | s3=s1))).

all o 
    (activity_occurrence(o) -> exists s(root_occ(s,o))).
all o all a 
    (occurrence(o,a) & -atomic(a) -> exists s (legal(s) & subactivity_occurrence(s,o))).

end_of_list.

formulas(goals).

all s1 all s2
    (min_precedes(s1,s2,a) -> exists s3 (next_subocc(s1,s3,a))).

end_of_list.


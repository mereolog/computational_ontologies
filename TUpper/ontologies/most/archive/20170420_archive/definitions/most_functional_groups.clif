/*******************************************************************************
* Copyright (c) University of Toronto and others. All rights reserved.
* The content of this file is licensed under the Creative Commons Attribution-
* ShareAlike 4.0 Unported license. The legal text of this license can be
* found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
*
* Contributors:
* Carmen Chui, Michael Gruninger
*******************************************************************************/

(cl-text https://raw.githubusercontent.com/mereolog/computational_ontologies/main/TUpper/most/definitions/most_groups.clif

(cl-imports https://raw.githubusercontent.com/mereolog/computational_ontologies/main/TUpper/most/definitions/most_shape.clif)
(cl-imports https://raw.githubusercontent.com/mereolog/computational_ontologies/main/TUpper/most/definitions/most_connections.clif)

(cl-comment 'We note that R groups are simply another functional group in this axiomatization.')

(cl-comment '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')
(cl-comment ' H Y D R O C A R B O N S ')
(cl-comment 'These are axioms for functional groups that contain hydrocarbons.')
(cl-comment 'Only carbon and hydrogens.')
(cl-comment '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')

(cl-comment '================================================')
(cl-comment 'ALKYL GROUP R(CH2)nH')
(cl-comment '1 carbon - methane')
(cl-comment '2 carbon - ethane')
(cl-comment '3 carbon - propane')
(cl-comment '4 carbon - butane, isobutane')
(cl-comment '5 carbon - pentane, isopentane, neopentane')
(cl-comment '6 carbon - hexane, 2-methylpentane, 3-methylpentane, 2,2-dimethylebutane, 2,3-dimethylbutane')
(cl-comment 'Comprehensive listing of isomers for alkanes: http://www.kentchemistry.com/links/organic/isomersofalkanes.htm')
(cl-comment '================================================')

(forall (x)
	(iff (alkyl_group x)
		(and (saturated x)
			(forall (a)
				(if (and (atom a)(inGroup a x))
					(carbon a))))))

(cl-imports https://raw.githubusercontent.com/mereolog/computational_ontologies/main/TUpper/most/definitions/methane.clif)
(cl-imports https://raw.githubusercontent.com/mereolog/computational_ontologies/main/TUpper/most/definitions/ethane.clif)
(cl-imports https://raw.githubusercontent.com/mereolog/computational_ontologies/main/TUpper/most/definitions/propane.clif)
(cl-imports https://raw.githubusercontent.com/mereolog/computational_ontologies/main/TUpper/most/definitions/butane.clif)
(cl-imports https://raw.githubusercontent.com/mereolog/computational_ontologies/main/TUpper/most/definitions/isobutane.clif)
(cl-imports https://raw.githubusercontent.com/mereolog/computational_ontologies/main/TUpper/most/definitions/pentane.clif)
(cl-imports https://raw.githubusercontent.com/mereolog/computational_ontologies/main/TUpper/most/definitions/isopentane.clif)
(cl-imports https://raw.githubusercontent.com/mereolog/computational_ontologies/main/TUpper/most/definitions/neopentane.clif)
(cl-imports https://raw.githubusercontent.com/mereolog/computational_ontologies/main/TUpper/most/definitions/hexane.clif)
(cl-imports https://raw.githubusercontent.com/mereolog/computational_ontologies/main/TUpper/most/definitions/2_methylpentane.clif)
(cl-imports https://raw.githubusercontent.com/mereolog/computational_ontologies/main/TUpper/most/definitions/3_methylpentane.clif)
(cl-imports https://raw.githubusercontent.com/mereolog/computational_ontologies/main/TUpper/most/definitions/2_2_dimethylebutane.clif)
(cl-imports https://raw.githubusercontent.com/mereolog/computational_ontologies/main/TUpper/most/definitions/2_3_dimethylbutane.clif)




(cl-comment 'HEPTANE C7H16')
(cl-comment 'Heptane has 1 CHAIN isomer:')
(cl-comment ' -  n-heptane')
(cl-comment 'Heptane has 8 BRANCHED isomers:')
(cl-comment ' -  2-methylhexane')
(cl-comment ' -  3-methylhexane')
(cl-comment ' -  2,2-dimethylpentane')
(cl-comment ' -  2,3-dimethylpentane')
(cl-comment ' -  2,4-dimethylpentane')
(cl-comment ' -  3,3-dimethylpentane')
(cl-comment ' -  3-ethylpentane')
(cl-comment ' -  2,2,3-trimethylbutane')
(cl-comment 'See https://web.viu.ca/patrick/Isomers.htm')

(cl-comment ' to do later! ')

(cl-comment '================================================')
(cl-comment 'ALKENYL GROUP CnH2n')
(cl-comment 'The alkenes are straight-chain hydrocarbons with one double bond per molecule')
(cl-comment '2 carbon - ethene')
(cl-comment '3 carbon - propene')
(cl-comment '4 carbon - but-1-ene')
(cl-comment '5 carbon - pent-1-ene')
(cl-comment '6 carbon - hex-1-ene')
(cl-comment '================================================')

(forall (x)
	(iff (alkenyl_group x)
		(and (unsaturated x)
			(forall (a)
				(if (and (atom a)(inGroup a x))
					(carbon a))))))

(cl-imports https://raw.githubusercontent.com/mereolog/computational_ontologies/main/TUpper/most/definitions/ethene.clif)
(cl-imports https://raw.githubusercontent.com/mereolog/computational_ontologies/main/TUpper/most/definitions/propene.clif)
(cl-imports https://raw.githubusercontent.com/mereolog/computational_ontologies/main/TUpper/most/definitions/but_1_ene.clif)
(cl-imports https://raw.githubusercontent.com/mereolog/computational_ontologies/main/TUpper/most/definitions/pent_1_ene.clif)
(cl-imports https://raw.githubusercontent.com/mereolog/computational_ontologies/main/TUpper/most/definitions/hex_1_ene.clif)






(cl-comment 'PENTENE C5H10')
(cl-comment 'Pentene has 2 CHAIN isomers:')
(cl-comment ' -  1-pentene')
(cl-comment ' -  2-pentene (cis/trans)')
(cl-comment 'Pentene has 3 BRANCHED isomers:')
(cl-comment ' -  2-methylbut-1-ene')
(cl-comment ' -  3-methylbut-1-ene (isopentene)')
(cl-comment ' -  2-methylbut-2-ene (isoamylene)')
(cl-comment 'See http://www.gcsescience.com/o28.htm')
(forall (x)
	(if (pentene x)
		(or (1_pentene x)(2_pentene x)(2_methylbut_1_ene x)(3_methylbut_1_ene x)(2_methylbut_2_ene x))))

(forall (x)
	(iff (1_pentene x)
		(and (chain x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 b1 b2 b3 b4)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))
					(not (= c3 c4))(not (= c3 c5))
					(not (= c4 c5))
					(end c1 x)
					(end c5 x)
					(doublebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(singlebond b3 c3 c4)
					(singlebond b4 c4 c5)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)))))))))

(forall (x)
	(iff (pent_2_ene x)
		(and (chain x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 b1 b2 b3 b4)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))
					(not (= c3 c4))(not (= c3 c5))
					(not (= c4 c5))
					(end c1 x)
					(end c5 x)
					(singlebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(doublebond b3 c3 c4)
					(singlebond b4 c4 c5)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)))))))))

(cl-comment 'TO FIX: isomer axioms for cis/trans (pent-2-ene x)')
(cl-comment 'https://pubchem.ncbi.nlm.nih.gov/compound/5326160#section=Top')
(cl-comment 'https://pubchem.ncbi.nlm.nih.gov/compound/trans-2-Pentene#section=Top')

(forall (x)
	(iff (2_methylbut_1_ene x)
		(and (branchedgroup x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 b1 b2 b3 b4)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))
					(not (= c3 c4))(not (= c3 c5))
					(not (= c4 c5))
					(fork c2 x)
					(doublebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(singlebond b3 c2 c4)
					(singlebond b4 c4 c5)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)))))))))

(forall (x)
	(iff (isopentene x)
		(3_methylbut_1_ene x)))

(forall (x)
	(iff (3_methylbut_1_ene x)
		(and (branchedgroup x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 b1 b2 b3 b4)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))
					(not (= c3 c4))(not (= c3 c5))
					(not (= c4 c5))
					(fork c3 x)
					(doublebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(singlebond b3 c3 c4)
					(singlebond b4 c3 c5)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)))))))))

(forall (x)
	(iff (isoamylene x)
		(2_methylbut_2_ene x)))

(forall (x)
	(iff (2_methylbut_2_ene x)
		(and (branchedgroup x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 b1 b2 b3 b4)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))
					(not (= c3 c4))(not (= c3 c5))
					(not (= c4 c5))
					(fork c3 x)
					(singlebond b1 c1 c2)
					(doublebond b2 c2 c3)
					(singlebond b3 c3 c4)
					(singlebond b4 c3 c5)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)))))))))

(cl-comment 'HEXENE C6H12')
(cl-comment 'Hexene has 3 CHAIN isomers:')
(cl-comment ' -  1-hexene')
(cl-comment ' -  2-hexene (cis/trans)')
(cl-comment ' -  3-hexene (cis/trans)')
(cl-comment 'Hexene has 4 BRANCHED isomers:')
(cl-comment ' -  2-methyl-1-pentene')
(cl-comment ' -  3-ethyl-1-butene')
(cl-comment ' -  3-methyl-2-pentene (cis/trans)')
(cl-comment ' -  2,3-dimethyl-2-butene')
(cl-comment 'See http://www.chem.canterbury.ac.nz/LetsTalkChemistry/ElectronicVersion/ElectronicVersionNew/chapter06/alkenenames.shtml')
(forall (x)
	(if (hexene x)
		(or (hex-1-ene x)(2_hexene x)(3_hexene x)(2_methyl_1_pentene x)(2_ethyl_1_butene x)(3_methyl_2_pentene x)(2_3_dimethyl_2_butene x))))

(forall (x)
	(iff (or (1_hexene x)(hexylene x)(butylethylene x))
		(hex_1_ene x)))

(forall (x)
	(iff (hex-1-ene x)
		(and (chain x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 c6 b1 b2 b3 b4 b5)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)(carbon c6)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))(not (= c1 c6))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))(not (= c2 c6))
					(not (= c3 c4))(not (= c3 c5))(not (= c3 c6))
					(not (= c4 c5))(not (= c4 c6))
					(not (= c5 c6))
					(end c1 x)
					(end c6 x)
					(doublebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(singlebond b3 c3 c4)
					(singlebond b4 c4 c5)
					(singlebond b4 c5 c6)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)(= y c6)))))))))

(cl-comment 'Fix this?  Deal with isomers.')
(forall (x)
	(iff (2_hexene x)
		(or (cis_2_hexene x)(trans_2_hexene x)))

(forall (x)
	(iff (z_2_hexene x)
		(cis_2_hexene x)))

(forall (x)
	(iff (cis_2_hexene x)
		(and (chain x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 c6 b1 b2 b3 b4 b5)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)(carbon c6)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))(not (= c1 c6))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))(not (= c2 c6))
					(not (= c3 c4))(not (= c3 c5))(not (= c3 c6))
					(not (= c4 c5))(not (= c4 c6))
					(not (= c5 c6))
					(end c1 x)
					(end c6 x)
					(singlebond b1 c1 c2)
					(doublebond b2 c2 c3)
					(singlebond b3 c3 c4)
					(singlebond b4 c4 c5)
					(singlebond b4 c5 c6)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)(= y c6)))))))))

(forall (x)
	(iff (e_2_hexene x)
		(trans_2_hexene x)))

(forall (x)
	(iff (trans_2_hexene x)
		(and (chain x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 c6 b1 b2 b3 b4 b5)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)(carbon c6)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))(not (= c1 c6))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))(not (= c2 c6))
					(not (= c3 c4))(not (= c3 c5))(not (= c3 c6))
					(not (= c4 c5))(not (= c4 c6))
					(not (= c5 c6))
					(end c1 x)
					(end c6 x)
					(singlebond b1 c1 c2)
					(doublebond b2 c2 c3)
					(singlebond b3 c3 c4)
					(singlebond b4 c4 c5)
					(singlebond b4 c5 c6)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)(= y c6)))))))))

(cl-comment 'Fix this?  Deal with isomers.')
(forall (x)
	(iff (3_hexene x)
		(or (cis_3_hexene x)(trans_3_hexene x)))

(forall (x)
	(iff (z_3_hexene x)
		(cis_3_hexene x)))

(forall (x)
	(iff (cis_3_hexene x)
		(and (chain x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 c6 b1 b2 b3 b4 b5)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)(carbon c6)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))(not (= c1 c6))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))(not (= c2 c6))
					(not (= c3 c4))(not (= c3 c5))(not (= c3 c6))
					(not (= c4 c5))(not (= c4 c6))
					(not (= c5 c6))
					(end c1 x)
					(end c6 x)
					(singlebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(doublebond b3 c3 c4)
					(singlebond b4 c4 c5)
					(singlebond b4 c5 c6)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)(= y c6)))))))))

(forall (x)
	(iff (e_2_hexene x)
		(trans_2_hexene x)))

(forall (x)
	(iff (trans_2_hexene x)
		(and (chain x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 c6 b1 b2 b3 b4 b5)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)(carbon c6)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))(not (= c1 c6))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))(not (= c2 c6))
					(not (= c3 c4))(not (= c3 c5))(not (= c3 c6))
					(not (= c4 c5))(not (= c4 c6))
					(not (= c5 c6))
					(end c1 x)
					(end c6 x)
					(singlebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(doublebond b3 c3 c4)
					(singlebond b4 c4 c5)
					(singlebond b4 c5 c6)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)(= y c6)))))))))

(forall (x)
	(iff (2_methyl_1_pentene x)
		(and (branchedgroup x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 c6 b1 b2 b3 b4 b5)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)(carbon c6)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))(not (= c1 c6))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))(not (= c2 c6))
					(not (= c3 c4))(not (= c3 c5))(not (= c3 c6))
					(not (= c4 c5))(not (= c4 c6))
					(not (= c5 c6))
					(fork c2 x)
					(doublebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(singlebond b3 c2 c4)
					(singlebond b4 c4 c5)
					(singlebond b5 c5 c6)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)(= y c6)))))))))

(forall (x)
	(iff (2_ethyl_1_butene x)
		(and (branchedgroup x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 c6 b1 b2 b3 b4 b5)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)(carbon c6)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))(not (= c1 c6))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))(not (= c2 c6))
					(not (= c3 c4))(not (= c3 c5))(not (= c3 c6))
					(not (= c4 c5))(not (= c4 c6))
					(not (= c5 c6))
					(fork c2 x)
					(doublebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(singlebond b3 c3 c4)
					(singlebond b4 c2 c5)
					(singlebond b5 c5 c6)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)(= y c6)))))))))

(cl-comment 'Fix this?  Deal with isomers.')
(forall (x)
	(iff (3_methyl_2_pentene x)
		(or (cis_3_methyl_2_pentene x)(trans_3_methyl_2_pentene x)))

(forall (x)
	(iff (z_3_methyl_2_pentene x)
		(cis_3_methyl_2_pentene x)))

(forall (x)
	(iff (cis_3_methyl_2_pentene x)
		(and (branchedgroup x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 c6 b1 b2 b3 b4 b5)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)(carbon c6)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))(not (= c1 c6))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))(not (= c2 c6))
					(not (= c3 c4))(not (= c3 c5))(not (= c3 c6))
					(not (= c4 c5))(not (= c4 c6))
					(not (= c5 c6))
					(fork c3 x)
					(singlebond b1 c1 c2)
					(doublebond b2 c2 c3)
					(singlebond b3 c3 c4)
					(singlebond b4 c4 c5)
					(singlebond b4 c3 c6)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)(= y c6)))))))))


(forall (x)
	(iff (e_3_methyl_2_pentene x)
		(trans_3_methyl_2_pentene x)))

(forall (x)
	(iff (trans_3_methyl_2_pentene x)
		(and (branchedgroup x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 c6 b1 b2 b3 b4 b5)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)(carbon c6)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))(not (= c1 c6))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))(not (= c2 c6))
					(not (= c3 c4))(not (= c3 c5))(not (= c3 c6))
					(not (= c4 c5))(not (= c4 c6))
					(not (= c5 c6))
					(fork c3 x)
					(singlebond b1 c1 c2)
					(doublebond b2 c2 c3)
					(singlebond b3 c3 c4)
					(singlebond b4 c3 c5)
					(singlebond b4 c5 c6)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)(= y c6)))))))))

(forall (x)
	(iff (2_3_dimethyl_2_butene x)
		(and (branchedgroup x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 c6 b1 b2 b3 b4 b5)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)(carbon c6)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))(not (= c1 c6))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))(not (= c2 c6))
					(not (= c3 c4))(not (= c3 c5))(not (= c3 c6))
					(not (= c4 c5))(not (= c4 c6))
					(not (= c5 c6))
					(fork c2 x)
					(singlebond b1 c1 c2)
					(singlebond b2 c3 c2)
					(doublebond b3 c2 c4)
					(singlebond b4 c4 c5)
					(singlebond b5 c4 c6)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)(= y c6)))))))))

(cl-comment '================================================')
(cl-comment 'ALKYNYL GROUP CnH2n')
(cl-comment 'The alkynes are unsaturated hydrocarbons containing at least one carbon�Xcarbon triple bond between two carbon atoms.')
(cl-comment '2 carbon - ethyne')
(cl-comment '3 carbon - propyne')
(cl-comment '4 carbon - butyne')
(cl-comment '5 carbon - pentyne')
(cl-comment '6 carbon - hexyne')
(cl-comment '================================================')

(forall (x)
	(iff (alkynyl_group x)
		(and (unsaturated x)
			(forall (a)
				(if (and (atom a)(inGroup a x))
					(carbon a))))))

(cl-comment 'ETHYNE C2H2')
(forall (x)
	(iff (acetylene x)
		(ethyne x)))

(forall (x)
	(iff (ethyne x)
		(and (chain x)(unsaturated x)
			(exists (c1 c2 b1)
				(and (carbon c1)(carbon c2)
					(not (= c1 c2))
					(end c1 x)
					(end c2 x)
					(triplebond b1 c1 c2)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)))))))))

(cl-comment 'PROPYNE C3H4')
(forall (x)
	(iff (or (methylacetylene x)(methyl_acetylene x)(allylene x))
		(propyne x)))

(forall (x)
	(iff (propyne x)
		(and (chain x)(unsaturated x)
			(exists (c1 c2 c3 b1 b2)
				(and (carbon c1)(carbon c2)(carbon c3)
					(not (= c1 c2))(not (= c1 c3))
					(not (= c2 c3))
					(end c1 x)
					(end c3 x)
					(triplebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)))))))))

(cl-comment 'BUTYNE C4H6')
(cl-comment 'Butyne has two isomers:')
(cl-comment ' - but-1-yne')
(cl-comment ' - but-2-yne')
(cl-comment 'See http://intro.chem.okstate.edu/1014/Lecture/Lec111699.html')
							
(forall (x)
	(iff (or (ethylacetylene x)(ethylethyne x)(1_butyne x))
		(but_1_yne x)))

(forall (x)
	(iff (but_1_yne x)
		(and (chain x)(unsaturated x)
			(exists (c1 c2 c3 c4 b1 b2 b3)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)
					(not (= c1 c2))(not (= c1 c3))
					(not (= c2 c3))
					(end c1 x)
					(end c4 x)
					(triplebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(singlebond b3 c3 c4)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)))))))))


(forall (x)
	(iff (or (dimethylacetylene x)(crotonylene x)(2_butyne x))
		(but_1_yne x)))

(forall (x)
	(iff (but_2_yne x)
		(and (chain x)(unsaturated x)
			(exists (c1 c2 c3 c4 b1 b2 b3)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)
					(not (= c1 c2))(not (= c1 c3))
					(not (= c2 c3))
					(end c1 x)
					(end c4 x)
					(singlebond b1 c1 c2)
					(triplebond b2 c2 c3)
					(singlebond b3 c3 c4)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)))))))))

(cl-comment 'PENTYNE C5H8')
(cl-comment 'Pentyne has two CHAIN isomers:')
(cl-comment ' - pent-1-yne')
(cl-comment ' - pent-2-yne')
(cl-comment 'Pentyne has one BRANCHED isomer:')
(cl-comment ' - 3-methyl-1-butyne')
(cl-comment 'See http://intro.chem.okstate.edu/1014/Lecture/Lec111699.html')

(forall (x)
	(iff (or (propylacetylene x)(1_pentyne x))
		(pent_1_yne x)))

(forall (x)
	(iff (pent_1_yne x)
		(and (chain x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 b1 b2 b3 b4)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))
					(not (= c3 c4))(not (= c3 c5))
					(not (= c4 c5))
					(end c1 x)
					(end c5 x)
					(singlebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(singlebond b3 c3 c4)
					(triplebond b4 c4 c5)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)))))))))

(forall (x)
	(iff (or (ethylmethylacetylene x)(1_ethyl_2_methylacetylene x)(2_pentyne x))
		(pent_2_yne x)))

(forall (x)
	(iff (pent_2_yne x)
		(and (chain x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 b1 b2 b3 b4)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))
					(not (= c3 c4))(not (= c3 c5))
					(not (= c4 c5))
					(end c1 x)
					(end c5 x)
					(singlebond b1 c1 c2)
					(triplebond b2 c2 c3)
					(singlebond b3 c3 c4)
					(singlebond b4 c4 c5)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)))))))))

(forall (x)
	(iff (3_methylbut_1_yne x)
		(3_methyl_1_butyne x)))

(forall (x)
	(iff (3_methyl_1_butyne x)
		(and (branchedgroup x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 b1 b2 b3 b4)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))
					(not (= c3 c4))(not (= c3 c5))
					(not (= c4 c5))
					(fork c3 x)
					(triplebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(singlebond b3 c3 c4)
					(singlebond b4 c3 c5)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)))))))))

(cl-comment 'HEXYNE C6H10')
(cl-comment 'Hexyne has three CHAIN isomers:')
(cl-comment ' - hex-1-yne')
(cl-comment ' - hex-2-yne')
(cl-comment ' - hex-3-yne')
(cl-comment 'Hexyne has four BRANCHED isomers:')
(cl-comment ' - 3_methyl_1_pentyne')
(cl-comment ' - 3_3_dimethyl_1_butyne')
(cl-comment ' - 4_methyl_2_pentyne')
(cl-comment ' - 4_methyl_1_pentyne')

(cl-comment 'http://www.stenutz.eu/chem/solv6.php?name=1-hexyne')

(forall (x)
	(iff (or (hexyne x)(1_hexyne x)(butylacetylene x))
		(hex_1_yne x)))

(forall (x)
	(iff (hex_1_yne x)
		(and (chain x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 c6 b1 b2 b3 b4 b5)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)(carbon c6)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))(not (= c1 c6))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))(not (= c2 c6))
					(not (= c3 c4))(not (= c3 c5))(not (= c3 c6))
					(not (= c4 c5))(not (= c4 c6))
					(not (= c5 c6))
					(end c1 x)
					(end c6 x)
					(singlebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(singlebond b3 c3 c4)
					(singlebond b4 c4 c5)
					(triplebond b5 c5 c6)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)(= y c6)))))))))

(forall (x)
	(iff (or (2_hexyne x)(methylpropylacetylene x))
		(hex_2_yne x)))

(forall (x)
	(iff (hex_2_yne x)
		(and (chain x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 c6 b1 b2 b3 b4 b5)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)(carbon c6)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))(not (= c1 c6))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))(not (= c2 c6))
					(not (= c3 c4))(not (= c3 c5))(not (= c3 c6))
					(not (= c4 c5))(not (= c4 c6))
					(not (= c5 c6))
					(end c1 x)
					(end c6 x)
					(singlebond b1 c1 c2)
					(triplebond b2 c2 c3)
					(singlebond b3 c3 c4)
					(singlebond b4 c4 c5)
					(singlebond b5 c5 c6)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)(= y c6)))))))))

(forall (x)
	(iff (or (3_hexyne x)(diethylacetylene x))
		(hex_3_yne x)))

(forall (x)
	(iff (hex_3_yne x)
		(and (chain x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 c6 b1 b2 b3 b4 b5)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)(carbon c6)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))(not (= c1 c6))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))(not (= c2 c6))
					(not (= c3 c4))(not (= c3 c5))(not (= c3 c6))
					(not (= c4 c5))(not (= c4 c6))
					(not (= c5 c6))
					(end c1 x)
					(end c6 x)
					(singlebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(triplebond b3 c3 c4)
					(singlebond b4 c4 c5)
					(singlebond b5 c5 c6)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)(= y c6)))))))))

(forall (x)
	(iff (3_methyl_1_pentyne x)
		(and (branchedgroup x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 c6 b1 b2 b3 b4 b5)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)(carbon c6)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))(not (= c1 c6))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))(not (= c2 c6))
					(not (= c3 c4))(not (= c3 c5))(not (= c3 c6))
					(not (= c4 c5))(not (= c4 c6))
					(not (= c5 c6))
					(fork c3 x)
					(triplebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(singlebond b3 c3 c4)
					(singlebond b4 c3 c5)
					(singlebond b5 c5 c6)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)(= y c6)))))))))

(forall (x)
	(iff (or (t_butylacetylene x)(tert_butylacetylene x))
		(3_3_dimethyl_1_butyne x)))

(forall (x)
	(iff (3_3_dimethyl_1_butyne x)
		(and (branchedgroup x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 c6 b1 b2 b3 b4 b5)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)(carbon c6)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))(not (= c1 c6))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))(not (= c2 c6))
					(not (= c3 c4))(not (= c3 c5))(not (= c3 c6))
					(not (= c4 c5))(not (= c4 c6))
					(not (= c5 c6))
					(fork c3 x)
					(triplebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(singlebond b3 c3 c4)
					(singlebond b4 c3 c5)
					(singlebond b5 c3 c6)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)(= y c6)))))))))

(forall (x)
	(iff (4_methyl_2_pentyne x)
		(and (branchedgroup x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 c6 b1 b2 b3 b4 b5)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)(carbon c6)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))(not (= c1 c6))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))(not (= c2 c6))
					(not (= c3 c4))(not (= c3 c5))(not (= c3 c6))
					(not (= c4 c5))(not (= c4 c6))
					(not (= c5 c6))
					(fork c2 x)
					(singlebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(singlebond b3 c2 c4)
					(doublebond b4 c4 c5)
					(singlebond b5 c5 c6)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)(= y c6)))))))))
							
(forall (x)
	(iff (isobutylethyne x)
		(4_methyl_1_pentyne x)))
		
(forall (x)
	(iff (4_methyl_1_pentyne x)
		(and (branchedgroup x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 c6 b1 b2 b3 b4 b5)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)(carbon c6)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))(not (= c1 c6))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))(not (= c2 c6))
					(not (= c3 c4))(not (= c3 c5))(not (= c3 c6))
					(not (= c4 c5))(not (= c4 c6))
					(not (= c5 c6))
					(fork c2 x)
					(singlebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(singlebond b3 c2 c4)
					(singlebond b4 c4 c5)
					(doublebond b5 c5 c6)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)(= y c6)))))))))
							
(cl-comment '================================================')
(cl-comment 'TO DO')
(cl-comment '- alkyl:')
(cl-comment '- - heptane + higher')
(cl-comment '- alkenes:')
(cl-comment '- - heptene')
(cl-comment '- - octene')
(cl-comment '- - nonene')
(cl-comment '- - decene')
(cl-comment '- alknynyl:')
(cl-comment '- - heptyne + higher')
(cl-comment '================================================')

(cl-comment '================================================')
(cl-comment 'PHENYL GROUP (RC6H5) - RING')
(cl-comment '================================================')
(forall (x)
	(iff (phenyl_group x)
		(and (ring x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 c6 a y b1 b2 b3 b4 b5 b6 b)
				(and (group y)
					(inGroup a y)
					(carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)(carbon c6)
					(singleBond b a c3)
					(doublebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(doublebond b3 c3 c4)
					(singlebond b4 c4 c5)
					(doublebond b5 c5 c6)
					(singlebond b6 c1 c6))))))

(forall (x)
	(iff (benzene x)
		(and (molecule x)(ring x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 c6 b1 b2 b3 b4 b5 b6)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)(carbon c6)
					(doublebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(doublebond b3 c3 c4)
					(singlebond b4 c4 c5)
					(doublebond b5 c5 c6)
					(singlebond b6 c1 c6))))))

(cl-comment '================================================')
(cl-comment 'BENZYL GROUP (C6H5CH2R) - COMPOUND')
(cl-comment '================================================')
(forall (x)
	(iff (benzyl_group x)
		(and (unsaturated x)
			(exists (m1 c a1 a2 b1 a b g)
				(and (benzene m1)(methylene c)
					(group g)
					(tether m1 c b1)
					(tether c g b2))))))

(cl-comment 'Alternatively, a full decomposed description:')

(forall (x)
	(iff (benzyl_group x)
		(and (unsaturated x)
			(exists (c1 c2 c3 c4 c5 c6 c7 a y b b1 b2 b3 b4 b5 b6 b7)
				(and (group y)
					(inGroup a y)
					(carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)(carbon c6)
					(carbon c7)
					(singleBond b c3 c7)
					(singleBond b c7 a)
					(doublebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(doublebond b3 c3 c4)
					(singlebond b4 c4 c5)
					(doublebond b5 c5 c6)
					(singlebond b6 c1 c6))))))

(cl-comment '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')
(cl-comment ' H A L O G E N S ')
(cl-comment 'These are axioms for functional groups that contain halogens.')
(cl-comment 'Only carbon, halogens, and hydrogens.')
(cl-comment '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')

(cl-comment 'These are axioms for functional groups that contain halogens.')
(forall (x)(iff (haloalkane_group x)(and (chain_group x)(saturated x)(exists (a) (and (atom a)(inGroup a x)(halogen a))))))
(forall (x)(iff (fluoroalkane_group x)(and (chain_group x)(saturated x)(exists (a) (and (atom a)(inGroup a x)(fluorine a))))))
(forall (x)(iff (chloroalkane_group x)(and (chain_group x)(saturated x)(exists (a) (and (atom a)(inGroup a x)(chlorine a))))))
(forall (x)(iff (bromoalkane_group x)(and (chain_group x)(saturated x)(exists (a) (and (atom a)(inGroup a x)(bromine a))))))
(forall (x)(iff (iodoalkane_group x)(and (chain_group x)(saturated x)(exists (a) (and (atom a)(inGroup a x)(iodine a))))))
(forall (x)(iff (haloalkane_group x)(and (ring x)(saturated x)(exists (a) (and (atom a)(inGroup a x)(halogen a))))))
(forall (x)(iff (fluoroalkane_group x)(and (ring x)(saturated x)(exists (a) (and (atom a)(inGroup a x)(fluorine a))))))
(forall (x)(iff (chloroalkane_group x)(and (ring x)(saturated x)(exists (a) (and (atom a)(inGroup a x)(chlorine a))))))
(forall (x)(iff (bromoalkane_group x)(and (ring x)(saturated x)(exists (a) (and (atom a)(inGroup a x)(bromine a))))))
(forall (x)(iff (iodoalkane_group x)(and (ring x)(saturated x)(exists (a) (and (atom a)(inGroup a x)(iodine a))))))


)
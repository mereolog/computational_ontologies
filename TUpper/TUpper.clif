/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved. 
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
 *******************************************************************************/

(cl-text http://colore.oor.net/psl_core/psl_core.clif

(cl-comment 'The before relation only holds between timepoints.')

(forall (t1 t2)
	(if	(before t1 t2)
		(and 	(timepoint t1) 
			(timepoint t2))))

(cl-comment 'The before relation is a total ordering.')

(forall (t1 t2)
	(if	(and 	(timepoint t1) 
			(timepoint t2))
		(or 	(= t1 t2) 
			(before t1 t2) 
			(before t2 t1))))

(cl-comment 'The before relation is irreflexive.')

(forall (t1)
	(not (before t1 t1)))

(cl-comment 'The before relation is transitive.')

(forall (t1 t2 t3)
	(if	(and 	(before t1 t2) 
			(before t2 t3))
		(before t1 t3)))

(cl-comment 'The timepoint inf- is before all other timepoints.')

(forall (t)
        (if	(and 	(timepoint t) 
			(not (= t inf-)))
		(before inf- t)))

(cl-comment 'Every other timepoint is before inf+.')

(forall (t)
        (if	(and 	(timepoint t) 
			(not (= t inf+)))
		(before t inf+)))

(cl-comment 'Given any timepoint t other than inf-, there is a timepoint between inf- and t.')

(forall (t)
	(if	(and 	(timepoint t) 
			(not (= t inf-)))
		(exists (u) 
			(between inf- u t))))

(cl-comment 'Given any timepoint t other than inf+, there is a timepoint between
t and inf+.')

(forall (t)
	(if	(and 	(timepoint t) 
			(not (= t inf+)))
		(exists (u) 
			(between t u inf+))))

(cl-comment 'Everything is either an activity, activity occurrence, timepoint,
or object.')

(forall (x)
	(or 	(activity x) 
		(activity_occurrence x) 
		(timepoint x) 
		(object x)))


(cl-comment 'Objects, activities, activity occurrences, and timepoints are all 
distinct kinds of things.')

(forall (x)
(and (if (activity x)
         (not (or (activity_occurrence x) (object x) (timepoint x))))
     (if (activity_occurrence x)
         (not (or (object x) (timepoint x))))
     (if (object x)
         (not (timepoint x)))))

(cl-comment 'The occurrence relation only holds between activities and 
activity occurrences.')

(forall (a occ)
	(if	(occurrence_of occ a)
		(and	(activity a)
			(activity_occurrence occ))))

(cl-comment 'Every activity occurrence is the occurrence of some activity.')

(forall (occ)
	(if	(activity_occurrence occ)
		(exists (a)
			(and	(activity a)
				(occurrence_of occ a)))))

(cl-comment 'An activity occurrence is associated with a unique activity.')

(forall (occ a1 a2)
        (if	(and	(occurrence_of occ a1)
                        (occurrence_of occ a2))
		(= a1 a2)))

(cl-comment 'The begin point of every activity occurrence or object is 
before or equal to its end point.')

(forall (x)
	(if	(or	(activity_occurrence x)
			(object x))
		(beforeEq (beginof x) (endof x))))

(cl-comment 'The participates_in relation only holds between objects,
activity occurrences, and timepoints, respectively.')

(forall (x occ t)
	(if	(participates_in x occ t)
		(and 	(object x) 
			(activity_occurrence occ) 
			(timepoint t))))

(cl-comment 'An object can participate in an activity
occurrence only at those timepoints at which both the object exists and
the activity is occurring.')

(forall (x occ t)
	(if	(participates_in x occ t)
		(and 	(exists_at x t)
         		(is_occurring_at occ t))))

(cl-comment 'Timepoint t2 is between timepoints t1 and t3 if and only if t1 is before 
t2 and t2 is before t3.')

(forall (t1 t2 t3) (iff (between t1 t2 t3)
  (and (before t1 t2) (before t2 t3))))

(cl-comment 'Timepoint t1 is beforeEq timepoint t2 if and only if t1 is before or equal
to t2.')

(forall (t1 t2) (iff (beforeEq t1 t2)
  (and (timepoint t1) (timepoint t2)
       (or (before t1 t2) (= t1 t2)))))

(cl-comment 'Timepoint t2 is betweenEq timepoints t1 and t3 if and only if 
t1 is before or equal to t2, and t2 is before or equal to t3.')

(forall (t1 t2 t3) (iff (betweenEq t1 t2 t3)
  (and (beforeEq t1 t2)
       (beforeEq t2 t3))))

(cl-comment 'An object exists at a timepoint t if and only if t is betweenEq its begin
and end points.')

(forall (x t) (iff (exists_at x t)
  (and (object x)
       (betweenEq (beginof x) t (endof x)))))

(cl-comment 'An activity is occurring at a timepoint t if and only if t 
is betweenEq the begin and end points of the activity occurrence.')

(forall (occ t) (iff (is_occurring_at occ t)
	(and	(activity_occurrence occ)
		(betweenEq (beginof occ) t (endof occ)))))

)


/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved. 
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
 *******************************************************************************/
 
(cl-text http://colore.oor.net/psl_subactivity/subactivity.clif


(cl-comment 'subactivity is a relation over activities.')

(forall (a1 a2)
	(if	(subactivity a1 a2)
		(and	(activity a1)
			(activity a2))))

(cl-comment 'The subactivity relation is reflexive.')

(forall (a)
	(if	(activity a)
		(subactivity a a)))

(cl-comment 'The subactivity relation is antisymmetric.')

(forall (a1 a2)
	(if	(and	(subactivity a1 a2)
			(subactivity a2 a1))
		(= a1 a2)))

(cl-comment 'The subactivity relation is transitive.')

(forall (a1 a2 a3)
	(if	(and	(subactivity a1 a2)
			(subactivity a2 a3))
		(subactivity a1 a3)))

(cl-comment 'The subactivity relation is a discrete ordering, so every
activity has an upwards successor in the ordering.')

(forall (a1 a2)
	(if	(and	(subactivity a1 a2)
			(not (= a1 a2)))
		(exists (a3)
			(and	(subactivity a1 a3)
				(subactivity a3 a2)
				(not (= a3 a1))
				(forall (a4)
					(if	(and	(subactivity a1 a4)
							(subactivity a4 a3))
						(or	(= a4 a1)
							(= a4 a3))))))))

(cl-comment 'The subactivity relation is a discrete ordering, so every
activity has a downwards successor in the ordering.')

(forall (a1 a2)
	(if	(and	(subactivity a1 a2)
			(not (= a1 a2)))
		(exists (a3)
			(and	(subactivity a1 a3)
				(subactivity a3 a2)
				(not (= a3 a2))
				(forall (a4)
					(if	(and	(subactivity a3 a4)
							(subactivity a4 a2))
						(or	(= a4 a2)
							(= a4 a3))))))))

(cl-comment 'An activity is primitive iff it has no proper subactivities.')

(forall (a) (iff (primitive a)
(and    (activity a)
	(forall (a1)
		(if	(subactivity a1 a)
			(= a1 a))))))


)

/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved. 
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
 *******************************************************************************/

(cl-text http://colore.oor.net/psl_occtree/occtree.clif

(cl-imports http://colore.oor.net/psl_core/psl_core.clif)

(forall (s)
	(if	(arboreal s)
		(activity_occurrence s)))

(cl-comment 'The earlier relation is restricted to 
arboreal activity occurrences (that is, activity occurrences that
are elements of the occurrence tree).')

(forall (s1 s2)
	(if	(earlier s1 s2)
		(and	(arboreal s1)
			(arboreal s2))))

(cl-comment 'The ordering relation over occurrences is irreflexive.')

(forall (s1 s2)
	(if	(earlier s1 s2)
		(not (earlier s2 s1))))

(cl-comment 'The ordering relation over occurrences is transitive.')

(forall (s1 s2 s3)
	(if	(and	(earlier s1 s2)
			(earlier s2 s3))
		(earlier s1 s3)))

(cl-comment 'A branch in the occurrence tree is totally ordered.')

(forall (s1 s2 s3)
	(if	(and	(earlier s1 s2)
			(earlier s3 s2))
		(or	(earlier s1 s3)
			(earlier s3 s1)
			(= s3 s1))))

(cl-comment 'Every branch of the occurrence tree has an initial occurrence.')

(forall (s1 s2)
	(if	(earlier s1 s2)
		(exists (sp)
			(and	(initial sp)
				(earlierEq sp s1)))))

(cl-comment 'No two initial activity occurrences in the occurrence tree are occurrences
of the same activity.')

(forall (s1 s2 a)
	(if	(and	(initial s1)
			(initial s2)
			(occurrence_of s1 a)
			(occurrence_of s2 a))
		(= s1 s2)))

(cl-comment 'An activity is a generator iff it has an initial occurrence in the
occurrence tree.')

(forall (a) 
	(if	(generator a)
		(exists (s)
        		(and    (initial s)
                		(occurrence_of s a)))))
   
(cl-comment 'There is an initial occurrence of each activity.')

(forall (s a)
        (if	(occurrence_of s a)
		(iff	(arboreal s)
			(generator a))))

(cl-comment 'The successor of an arboreal activity occurrence is an occurrence of a generator activity.')

(forall (a o)
        (iff    (occurrence_of (successor a o) a)
                (and    (generator a)
                        (arboreal o))))

(cl-comment 'Every non-initial activity occurrence is the successor of 
another activity occurrence.')

(forall (s1 s2)
        (if	(earlier s1 s2)
		(exists (a s3)
                        (and    (generator a)
                                (= s2 (successor a s3))))))

(cl-comment 'An occurrence s1 is earlier than the successor occurrence 
of s2 if and only if the occurrence s2 is later than s1.')

(forall (a s1 s2)
        (if	(generator a)
		(iff	(earlier s1 (successor a s2))
			(earlierEq s1 s2))))

(cl-comment 'The legal relation restricts arboreal activity occurrences.')

(forall (s)
	(if	(legal s)
		(arboreal s)))

(cl-comment 'If an activity occurrence is legal, all earlier activity
occurrences in the occurrence tree are also legal.')

(forall (s1 s2)
	(if	(and	(legal s1)
			(earlier s2 s1))
		(legal s2)))

(cl-comment 'The endof an activity occurrence is before to the beginof 
the successor of the activity occurrence.')

(forall (s1 s2)
	(if	(earlier s1 s2)
		(before (endof s1) (beginof s2))))

(cl-comment 'An activity occurrence s1 precedes another activity occurrence s2 
if and only if s1 is earlier than s2 in the occurrence tree and s2 is legal.')

(forall (s1 s2) (iff (precedes s1 s2)
(and	(earlier s1 s2)
	(legal s2))))

(cl-comment 'An activity occurrence s1 is EarlierEq than
an activity occurrence s2 if and only if it is either earlier than
s2 or it is equal to s2.')

(forall (s1 s2) (iff (earlierEq s1 s2)
(and	(arboreal s1)
	(arboreal s2)
	(or	(earlier s1 s2)
		(= s1 s2)))))

(cl-comment 'An activity is poss at some occurrence if and only if the successor
occurrence of the activity is legal.')

(forall (a s) (iff (poss a s)
(legal (successor a s))))

(cl-comment 'No occurrence in the occurrence tree is earlier than an initial occurrence.')

(forall (s)
	(iff	(initial s)
		(and	(arboreal s)
			(not (exists (sp)
				(earlier sp s))))))


)

/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved. 
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
 *******************************************************************************/

(cl-text http://colore.oor.net/psl_disc_state/disc_state.clif

(cl-imports http://colore.oor.net/psl_occtree/occtree.clif)

(cl-comment 'States are objects.')

(forall (f)
	(if	(state f)
		(object f)))

(cl-comment 'The holds relation is only between states and arboreal ctivity occurrences.
Intuitively, it means that the fluent (property of the world) is true after
the activity occurrence occ.')

(forall (f occ)
	(if	(holds f occ)
		(and	(state f)
			(arboreal occ))))

(cl-comment 'The prior relation is only between states and arboreal activity occurrences.
Intuitively, it means that the fluent (property of the world) is true before
the activity occurrence occ.')

(forall (f occ)
	(if	(prior f occ)
		(and	(state f)
			(arboreal occ))))

(cl-comment 'All initial occurrences agree on the states that hold prior to them.')

(forall (occ1 occ2 f)
	(if	(and	(initial occ1)
			(initial occ2))
		(iff	(prior f occ1)
			(prior f occ2))))

(cl-comment 'A state holds after an arboreal activity occurrence if and only if it 
holds prior to the successor occurrence.')

(forall (f a occ)
        (iff    (prior f (successor a occ))
                (and    (holds f occ)
                        (generator a))))
(cl-comment 'If a fluent holds after some activity occurrence, then there exists
an earliest activity occurrence along the branch where the fluent holds.')

(forall (occ1 f)
	(if	(holds f occ1)
		(exists (occ2)
			(and	(earlierEq occ2 occ1)
				(holds f occ2)
				(or	(initial occ2)
					(not (prior f occ2)))
				(forall (occ3)
					(if	(and	(earlierEq occ2 occ3)
							(earlierEq occ3 occ1))
						(holds f occ3)))))))

(cl-comment 'If a fluent does not hold after some activity occurrence, then there exists
an earliest activity occurrence along the branch where the fluent does not hold.')

(forall (occ1 f)
	(if	(and	(state f)
			(arboreal occ1)
			(not (holds f occ1)))
		(exists (occ2)
			(and	(earlierEq occ2 occ1)
				(not (holds f occ2))
				(or	(initial occ2)
					(prior f occ2))
				(not (exists (occ3)
					(and	(earlierEq occ2 occ3)
						(earlierEq occ3 occ1)
						(holds f occ3))))))))

(cl-comment 'If a fluent holds, there exists an earliest activity occurrence where it
holds.')

(forall (f s1)
	(if	(holds f s1)
		(exists (s2)
			(and	(holds f s2)
				(earlierEq s2 s1)
				(forall (s3)
					(if	(holds f s3)
						(not (earlier s3 s2))))))))

)


/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved. 
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
 *******************************************************************************/

(cl-text http://colore.oor.net/psl_atomic/atomic.clif

(cl-imports http://colore.oor.net/psl_occtree/occtree.clif)
(cl-imports http://colore.oor.net/psl_subactivity/subactivity.clif)

(cl-comment 'Primitive activities are atomic.')

(forall (a)
	(if	(primitive a)
		(atomic a)))

(cl-comment 'The function conc is idempotent.')

(forall (a)
	(= a (conc a a)))

(cl-comment 'The function conc is commutative.')

(forall (a1 a2)
	(= (conc a1 a2) (conc a2 a1)))

(cl-comment 'The function conc is associative.')

(forall (a1 a2 a3)
	(= (conc a1 (conc a2 a3)) (conc (conc a1 a2) a3)))

(cl-comment 'The concurrent aggregation of atomic action is an atomic action.')

(forall (a1 a2)
	(iff	(atomic (conc a1 a2))
		(and	(atomic a1)
			(atomic a2))))

(cl-comment 'An atomic activity a1 is a subactivity of an atomic activity a2 if and only if
a2 is an idempotent for a1.')

(forall (a1 a2)
	(if	(and	(atomic a1)
			(atomic a2))
		(iff	(subactivity a1 a2)
			(= a2 (conc a1 a2)))))

(cl-comment 'An atomic action has a proper subactivity if and only if there exists another atomic 
activity which can be concurrently aggregated.')

(forall (a1 a2)
	(if	(and	(atomic a2)
		  	(subactivity a1 a2)
			(not (= a1 a2)))
		(exists (a3)
			(and	(atomic a3)
				(= a2 (conc a1 a3))
				(not (exists (a4)
					(and	(atomic a4)
						(subactivity a4 a1)
						(subactivity a4 a3))))))))

(cl-comment 'The semilattice of atomic activities is distributive.')

(forall (a b0 b1)
	(if	(and	(atomic a)
			(atomic b0)
			(atomic b1)
			(subactivity a (conc b0 b1))
			(not (primitive a)))
		(exists (a0 a1)
			(and	(subactivity a0 b0)
				(subactivity a1 b1)
				(= a (conc a0 a1))))))

(cl-comment 'Only atomic activities can be generator activities.
Equivalently, only occurrences of atomic activities can be
elements of an occurrence tree.')

(forall (a)
	(if	(generator a)
		(atomic a)))

(cl-comment 'Atomic activities are activities.')

(forall (a)
	(if	(atomic a)
		(activity a)))

)



/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved. 
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
 *******************************************************************************/

(cl-text http://colore.oor.net/psl_complex/psl_complex.clif

(cl-imports http://colore.oor.net/psl_atomic/psl_atomic.clif)

(cl-comment 'Occurrences in the activity tree for an activity correspond to atomic subactivity
occurrences of the activity.')

(forall (a s1 s2)
	(if	(min_precedes s1 s2 a)
		(exists (a1 a2)
			(and	(subactivity a1 a)
				(subactivity a2 a)
				(atocc s1 a1)
				(atocc s2 a2)))))

(cl-comment 'Root occurrences in the activity tree correspond to atomic subactivity
occurrences of the activity.')

(forall (a s)
	(if	(root s a)
		(exists (a1)
			(and	(subactivity a1 a)
				(atocc s a1)))))

(cl-comment 'All activity trees have a root subactivity occurrence.')

(forall (s1 s2 a)
	(if	(min_precedes s1 s2 a)
		(exists (s3)
			(and	(root s3 a)
				(min_precedes s3 s2 a)))))

(cl-comment 'No subactivity occurrences in an activity tree occur earlier than 
the root subactivity occurrence.')

(forall (s1 s2 a)
	(if	(min_precedes s1 s2 a)
		(not (root s2 a))))

(cl-comment 'Activity trees are subtrees of the occurrence tree.')

(forall (s1 s2 a)
	(if	(min_precedes s1 s2 a)
		(precedes s1 s2)))

(cl-comment 'Root occurrences are elements of the occurrence tree.')

(forall (s a)
	(if	(root s a)
		(legal s)))

(cl-comment 'Every legal atomic activity occurrence is an activity tree containing only
one occurrence.')

(forall (s a)
        (if	(and    (atocc s a)
                        (legal s))
		(root s a)))

(cl-comment 'Activity trees are discrete.')

(forall (s1 s2 a)
	(if	(min_precedes s1 s2 a)
		(exists (s3)
			(and	(next_subocc s1 s3 a)
				(or	(min_precedes s3 s2 a)
					(= s3 s2))))))

(cl-comment 'Subactivity occurrences on the same branch of the occurrence tree are
on the same branch of the activity tree.')


(forall (a s1 s2 s3)
	(if	(and	(min_precedes s1 s2 a)
			(min_precedes s1 s3 a)
			(precedes s2 s3))
		(min_precedes s2 s3 a)))

(cl-comment 'The activity tree for a complex subactivity occurrence
is a subtree of the activity tree for the activity occurrence.')

(forall (a1 a2 s1 s2 s3)
	(if	(and	(subactivity a1 a2)
			(subtree s1 a1 s2 a2)
			(min_precedes s1 s3 a1))
		(min_precedes s1 s3 a2)))

(cl-comment 'Only complex activities can be arguments to the min_precedes relation.')

(forall (s1 s2 a)
        (if	(min_precedes s1 s2 a)
                (not (atomic a))))

(cl-comment 'Subactivity occurrences on the same branch of the activity tree are
linearly ordered by the min_precedes relation.')

(forall (a s1 s2 s3)
	(if	(and	(min_precedes s2 s1 a)
			(min_precedes s3 s1 a)
			(precedes s2 s3))
		(min_precedes s2 s3 a)))

(cl-comment 'An occurrence is the leaf of an activity tree if and only if there exists an earlier
atomic subactivity occurrence but there does not exist a later atomic 
subactivity occurrence.')

(forall (s a) (iff (leaf s a)
    (and    (or    (root s a)
            (exists (s1) (min_precedes s1 s a)))
        (not (exists (s2)
            (min_precedes s s2 a))))))

(cl-comment 'The do relation specifies the initial and final atomic subactivity occurrences
of an occurrence of an activity.')

(forall (a s1 s2) (iff (do a s1 s2)
(and	(root s1 a)
	(leaf s2 a)
	(or	(min_precedes s1 s2 a)
		(= s1 s2)))))

(cl-comment 'An activity occurrence s2 is the next subactivity occurrence after s1
in an activity tree for a if and only of s1 precedes s2
in the tree and there does not exist a subactivity occurrence that is between
them in the tree.')

(forall (s1 s2 a) (iff (next_subocc s1 s2 a)
(and    (min_precedes s1 s2 a)
        (not (exists (s3)
                (and    (activity_occurrence s3)
			(min_precedes s1 s3 a)
                        (min_precedes s3 s2 a)))))))

(cl-comment 'The activity tree for a1 with root occurrence s1
contains an activity tree for a2 as a subtree if and only if
every atomic subactivity occurrence in the activity tree for a2
is an element of the activity tree for a1, and there is an atomic subactivity
occurrence in the activity tree for a1 that is not in the  activity tree for a2.')

(forall (s1 s2 a1 a2) (iff (subtree s1 a1 s2 a2)
(and	(root s1 a1)
	(root s2 a2)
	(or	(min_precedes s1 s2 a1) (= s1 s2))
	(forall (s3)
		(if	(min_precedes s1 s3 a1)
			(min_precedes s2 s3 a2))))))

(cl-comment 'The atomic subactivity occurrences s1 and s2 are siblings
in an activity tree for a iff they either have a common
predecessor in the activity tree or they are both roots of
activity trees that have a common predecessor in the occurrence
tree.')

(forall (s1 s2 a) (iff (sibling s1 s2 a)
(or	(exists (s3)
		(and	(next_subocc s3 s1 a)
			(next_subocc s3 s2 a)))
	(and	(root s1 a)
		(root s2 a)
		(or	(and	(initial s1)
				(initial s2))
			(exists (s4 a1 a2)
				(and	(= s1 (successor a1 s4))
					(= s2 (successor a2 s4)))))))))

)


/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved. 
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
 *******************************************************************************/

(cl-text http://colore.oor.net/psl_actocc/psl_actocc.clif

(cl-imports http://colore.oor.net/psl_complex/psl_complex.clif)

(forall (o1 o2) 
	(if	(subactivity_occurrence o1 o2)
		(and  	(activity_occurrence o1)
			(activity_occurrence o2))))

(cl-comment 'There exists an occurrence of an activity a for every branch of an activity
tree for a. All atomic subactivity occurrences on the branch are subactivity
occurrences of the occurrence of a.')

(forall (a s1 s2)
	(if	(min_precedes s1 s2 a)
		(exists (occ)
			(and	(occurrence_of occ a)
				(subactivity_occurrence s1 occ)
				(subactivity_occurrence s2 occ)))))

(cl-comment 'There exists an occurrence of an activity a for every branch of an activity
tree for a. All root subactivity occurrences on the branch are subactivity
occurrences of the occurrence of a.')

(forall (a s)
	(if	(and	(root s a)
			(not (atomic a)))
		(exists (occ)
			(and	(occurrence_of occ a)
				(subactivity_occurrence s occ)))))


(cl-comment 'Every occurrence of a complex activity a contains an atomic subactivity 
occurrence that is the root of an activity tree for a.')

(forall (occ a)
	(if	(and   (occurrence_of occ a)
                       (not (atomic a)))
		(exists (s)
			(and	(root s a)
				(subactivity_occurrence s occ)))))


(cl-comment 'Distinct occurrences of an activity correspond to distinct branches of an activity tree.')

(forall (a s1 occ1 occ2)
	(if	(and	(occurrence_of occ1 a)
			(occurrence_of occ2 a)
			(not (= occ1 occ2)))
		(exists (s)
			(and	(arboreal s)
				(subactivity_occurrence s occ1)
				(not (subactivity_occurrence s occ2))))))

(cl-comment 'All atomic subactivity occurrences of a complex activity occurrence
are elements of the same branch of the activity tree.')

(forall (a occ s1 s2)
	(if	(and	(occurrence_of occ a)
			(arboreal s1)
			(arboreal s2)
			(subactivity_occurrence s1 occ)
		  	(subactivity_occurrence s2 occ))
		(or	(min_precedes s1 s2 a)
		  	(min_precedes s2 s1 a)
			(= s1 s2))))

(cl-comment 'All elements of the same branch of an activity tree are atomic
subactivity occurrences of the same activity occurrences.')

(forall (a s1 s2 occ)
	(if	(and	(min_precedes s1 s2 a)
			(occurrence_of occ a)
			(subactivity_occurrence s2 occ))
		(subactivity_occurrence s1 occ)))

(cl-comment 'The subactivity_occurrence relation preserves the subactivity relation.')

(forall (a1 a2 occ1 occ2)
	(if	(and	(occurrence_of occ1 a1)
			(occurrence_of occ2 a2)
			(not (atomic a1))
			(subactivity_occurrence occ1 occ2))
		(subactivity a1 a2)))

(cl-comment 'The subactivity_occurrence relation is transitive.')

(forall (occ1 occ2 occ3)
        (if	(and  (subactivity_occurrence occ1 occ2)
                  	(subactivity_occurrence occ2 occ3))
		(subactivity_occurrence occ1 occ3)))

(cl-comment 'Occurrences of subactivities are subactivity occurrences if the
occurrences satisfy branch containment.')

(forall (a1 a2 occ1 occ2)
        (if	(and	(occurrence_of occ1 a1)
			(occurrence_of occ2 a2)
			(subactivity a1 a2)
			(not (subactivity_occurrence occ1 occ2)))
		(exists (s)
			(and	(subactivity_occurrence s occ1)
				(not (subactivity_occurrence s occ2))))))

(cl-comment 'The beginof timepoint for a complex activity occurrence is
equal to the beginof timepoint of its root occurrence.')

(forall (s occ)
	(if	(root_occ s occ)
		(= (beginof occ) (beginof s))))

(cl-comment 'The endof timepoint for a complex activity occurrence is
equal to the endof timepoint of its leaf occurrence.')

(forall (s occ)
	(if	(leaf_occ s occ)
		(= (endof occ) (endof s))))

(cl-comment 'The mono relation is a branch homomorphism.')

(forall (s1 s2 a)
        (if	(mono s1 s2 a)
		(hom s1 s2 a)))

(cl-comment 'If an atomic subactivity occurrence is mapped in a branch homomorphism,
then there exists another atomic subactivity occurrence that is mono with it.')

(forall (s1 s2 a)
        (if	(and	(hom s1 s2 a)
			(not (mono s1 s2 a)))
		(exists (s3)
			(or	(and	(min_precedes s3 s2 a)
					(mono s1 s3 a))
				(and	(min_precedes s3 s1 a)
					(mono s2 s3 a))))))

(cl-comment 'The mono relation is restricted to one-to-one homomorphisms between different
branches of the activity tree.')

(forall (s1 s2 s3 a)
        (if	(and	(mono s1 s2 a)
			(mono s3 s2 a))
		(not 	(or	(min_precedes s1 s3 a)
				(min_precedes s3 s1 a)))))

(cl-comment 'The mono relation is symmetric on activity occurrences.')

(forall (s1 s2 a)
    (if   (mono s1 s2 a)
          (mono s2 s1 a)))

(cl-comment 'The mono relation is transitive on activity occurrences.')

(forall (s1 s2 s3 a)
    (if   (and   (mono s1 s2 a)
                 (mono s2 s3 a))
          (mono s1 s3 a)))

(cl-comment 'Two activity occurrences are occurrence isomorphic iff they are occurrences of
atomic activities that have a common subactivity with the complex activity a.')

(forall (s1 s2 a) (iff (iso_occ s1 s2 a)
(exists (a1 a2 a3)
        (and    (atomic a1)
		(atomic a2)
		(atomic a3)
		(subactivity a3 a)
		(occurrence_of s1 (conc a1 a3))
                (occurrence_of s2 (conc a2 a3))
		(forall (a4)
			(if	(and	(subactivity a4 (conc a3 a1))
					(subactivity a4 (conc a3 a2))
					(subactivity a4 a))
				(or	(subactivity a3 a4)
					(= a3 a4))))))))

(cl-comment 'For every two occurrences of the same activity on different branches of an
activity tree, there exist homomorphic occurrences on those branches.')

(forall (s1 s2 a) (iff (hom s1 s2 a)
(exists (occ1 occ2)
	(and    (iso_occ s1 s2 a)
		(not (min_precedes s1 s2 a))
		(not (min_precedes s2 s1 a))
		(subactivity_occurrence s1 occ1)
		(subactivity_occurrence s2 occ2)
		(occurrence_of occ1 a)
		(occurrence_of occ2 a)))))

(cl-comment 'An occurrence occ1 is the root occurrence of an occurrence of a if and only if
it is a subactivity occurrence and it is the root of an activity tree for a.')

(forall (s occ)
(iff (root_occ s occ)
(exists (a)
    (and    (occurrence_of occ a)
            (subactivity_occurrence s occ)
            (root s a)))))

(cl-comment 'An occurrence occ1 is the leaf occurrence of an occurrence of a if and only if
it is a subactivity occurrence and it is the leaf of an activity tree for a.')

(forall (s occ) 
(iff (leaf_occ s occ)
(exists (a)
	(and	(occurrence_of occ a)
		(subactivity_occurrence s occ)
		(leaf s a)))))

(cl-comment 'Two complex activity occurrences are in the same grove
iff they are occurrences of the same activity and their
root occurrences are siblings.')

(forall (occ1 occ2) 
(iff (same_grove occ1 occ2)
(exists (a s1 s2)
	(and	(occurrence_of occ1 a)
		(occurrence_of occ2 a)
		(root_occ s1 occ1)
		(root_occ s2 occ2)
                (or     (and    (initial s1)
                                (initial s2))
                        (exists (s4 a1 a2)
                                (and    (= s1 (successor a1 s4))
                                        (= s2 (successor a2 s4)))))))))



)


/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved.
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
*******************************************************************************/
 
(cl-text http://colore.oor.net/duration/timeduration.clif

(cl-module field (cl-imports http://colore.oor.net/ringoids/field.clif))

(timeduration zero_duration)

(forall (d1 d2)
(if  (and	(timeduration d1)
		(timeduration d2))
	  (timeduration (add_duration d1 d2))))

(forall (d1 d2 d3)
(if  (and	(timeduration d1)
		(timeduration d2)
		(timeduration d3))
          (= (add_duration (add_duration d1 d2) d3) (add_duration d1 (add_duration d2 d3)))))

(forall (d)
(if  (timeduration d)
          (= (add_duration d zero_duration) d)))

(forall (d1)
(if  (timeduration d1)
          (exists (d2)
		(and 	(timeduration d2)
                	(= (add_duration d1 d2) zero_duration)))))

(forall (d1 d2)
(if  (and	(timeduration d1)
		(timeduration d2))
          (= (add_duration d1 d2) (add_duration d2 d1))))

(forall (d r)
(if	(and	(timeduration d)
		(field r))
	(timeduration (mult_duration r d))))

(forall (d1 d2 r)
(if	(and	(timeduration d1)
		(timeduration d2)
		(field r))
        (= (mult_duration r (add_duration d1 d2)) (add_duration (mult_duration r d1) (mult_duration r d2)))))

(forall (d r s)
(if	(and	(timeduration d)
		(field r)
		(field s))
        (= (mult_duration (sum r s) d) (add_duration (mult_duration r d) (mult_duration s d)))))

(forall (d r s)
(if	(and	(timeduration d)
		(field r)
		(field s))
        (= (mult_duration (prod r s) d) (mult_duration r (mult_duration s d)))))

(forall (d)
(if	(timeduration d)
        (= d (mult_duration one d))))

(forall (d1 d2 d3)
	(if	(and	(timeduration d1)
			(timeduration d2)
			(timeduration d3))
        	(if	(lesser_duration d1 d2)
			(lesser_duration (add_duration d1 d3) (add_duration d2 d3)))))

(forall (d1 d2 d3)
	(if	(and	(timeduration d1)
			(timeduration d2)
			(timeduration d3))
        	(if	(= d1 d2)
			(= (add_duration d1 d3) (add_duration d2 d3)))))

(forall (d1 d2 r)
	(if	(and	(timeduration d1)
			(timeduration d2)
			(field r))
        	(if	(lesser_duration d1 d2)
			(lesser_duration (mult_duration r d1) (mult_duration r d2)))))

(forall (d1 d2 r)
	(if	(and	(timeduration d1)
			(timeduration d2)
			(field r))
        	(if	(= d1 d2)
			(= (mult_duration r d1) (mult_duration r d2)))))

)


/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved.
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
*******************************************************************************/

(cl-text http://colore.oor.net/duration/point_duration.clif

(cl-imports http://colore.oor.net/timepoints/linear_point.clif)

(cl-imports http://colore.oor.net/duration/timeduration.clif)

(forall (x)
	(if	(timepoint x)
		(not (timeduration x))))

(forall (t1 t2)
	(if  (and	(timepoint t1)
			(timepoint t2))
		  (timeduration (duration t1 t2))))

(forall (d)
	(if  (timeduration d)
        	  (exists (t1 t2)
			(and	(timepoint t1)
				(timepoint t2)
	                	(= d (duration t1 t2))))))

(forall (t1 t2)
(if	(and	(timepoint t1)
		(timepoint t2))
	(iff	(= zero (duration t1 t2))
		(= t1 t2))))

(forall (t1 t2)
(if  (and	(timepoint t1)
		(timepoint t2))
	  (= zero (add (duration t1 t2) (duration t2 t1)))))

(forall (t1 t2 t3)
(if	(and	(timepoint t1)
		(timepoint t2)
		(timepoint t3))
	(= (add (duration t1 t2) (duration t2 t3)) (duration t1 t3))))

(forall (t1 t2)
(if	(and	(timepoint t1)
		(timepoint t2))
	(iff	(lesser zero (duration t1 t2))
		(before t1 t2))))

(forall (t1 t2 t3)
(if	(and	(timepoint t1)
		(timepoint t2)
		(timepoint t3))
	(exists (t4)
		(and	(timepoint t4)
			(= (duration t1 t2) (duration t3 t4))))))

)



/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved.
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
 *******************************************************************************/
 

(cl-text http://colore.oor.net/psl_duration/psl_duration.clif

(cl-imports http://colore.oor.net/psl_core/psl_core.clif)

(cl-imports http://colore.oor.net/duration/point_duration.clif)

(forall (x)
	(= (dur x) (duration (beginof x) (endof x))))

)


/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved. 
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger, Carmen Chui
 *******************************************************************************/

(cl-text http://colore.oor.net/interval_psl/interval_psl_core.clif
(cl-comment 'Time interval version of PSL-CORE.')

(cl-comment 'Import the psl-core theory.')
(cl-imports http://colore.oor.net/psl_core/psl_core_root.clif)

(cl-comment 'Import the Interval with Endpoints theory.')
(cl-imports http://colore.oor.net/combined_time/interval_with_endpoints.clif)

(cl-comment 'Additional axioms that are included in this theory.')

(cl-comment 'Source: Michael Gruninger, Carmen Chui.')
(cl-comment 'Comment: Indicate that a time interval is not an activity, activity occurrence, object, or timepoint.')
(forall (x)
	(if (timeinterval x)
		(not (or (activity x)
			(activity_occurrence x)
			(timepoint x)
			(object x)))))

(cl-comment 'Source: Michael Gruninger, Carmen Chui.')
(cl-comment 'Comment: A new relation created to relate a time interval with an activity occurrence or object.')
(cl-comment 'Relate a time interval with an activity occurrence and object.')
(cl-comment 'psl_interval(x,y)')
(forall (x y)
	(iff (psl_interval x y)
		(and (or (activity_occurrence x)(object x))
			(timeinterval y)
			(= (beginof x)(beginof y))
			(= (endof x)(endof y)))))

(cl-comment 'Source: Michael Gruninger, Carmen Chui.')
(cl-comment 'Comment: A new relation created to relate two intervals together.')
(cl-comment 'A time interval z overlays activities x and y.')
(forall (x y z)
	(iff (overlay x y z)
		(exists (i1 i2)
			(and (psl_interval x i1)
				(psl_interval y i2)
				(= (beginof i2)(beginof z))
				(= (endof i1)(endof z))))))

)



/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved.
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
 *******************************************************************************/
 
(cl-text http://colore.oor.net/matter/matter.clif

(forall (x y)
	(if	(chunkOf x y)
		(and	(mat x)
			(mat y))))
		
(cl-comment 'Reflexivity')
(forall (x)
	(if	(mat x)
        	(chunkOf x x)))
	
(cl-comment 'Antisymmetry')
(forall (x y)
        (if     (and    (chunkOf x y)
                        (chunkOf y x))
                (= x y)))

(cl-comment 'Transitivity')
(forall (x y z)
        (if     (and    (chunkOf x y)
                        (chunkOf y z))
                (chunkOf x z)))

(forall (x y)
	(if	(and	(mat x)
			(mat y)
			(not (chunkOf x y)))
		(exists (z)
			(and	(chunkOf z x)
				(chunk_disjoint z y)))))

(forall (x y)
	(if	(chunk_underlaps x y)
		(exists (z)
			(forall (v)
				(iff	(chunk_overlaps v z)
					(or	(chunk_overlaps v x)
						(chunk_overlaps v y)))))))
	
(forall (x y)
	(if	(chunk_overlaps x y)
		(exists (z)
			(forall (v)
				(iff	(proper_chunk v z)
					(or	(proper_chunk v x)
						(proper_chunk v y)))))))

(forall (x w)
	(if	(and	(mat x)
			(mat w)
			(not (chunkOf w x)))
		(exists (z)
			(forall (y)
				(iff	(chunkOf y z)
					(not (chunk_overlaps y x)))))))
				
)



/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved.
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
 *******************************************************************************/
 

(cl-text http://colore.oor.net/mass/amount.clif

(cl-module field (cl-imports http://colore.oor.net/ringoids/field.clif))

(amount zero_mass)

(forall (d1 d2)
(if  (and	(amount d1)
		(amount d2))
	  (amount (add_mass d1 d2))))

(forall (d1 d2 d3)
(if  (and	(amount d1)
		(amount d2)
		(amount d3))
          (= (add_mass (add_mass d1 d2) d3) (add_mass d1 (add_mass d2 d3)))))

(forall (d)
(if  (amount d)
          (= (add_mass d zero_mass) d)))

(forall (d1)
(if	(amount d1)
	(exists (d2)
		(and	(amount d2)
			(= (add_mass d1 d2) zero_mass)))))

(forall (d1 d2)
(if  (and	(amount d1)
		(amount d2))
          (= (add_mass d1 d2) (add_mass d2 d1))))

(forall (d r)
(if	(and	(amount d)
		(field r))
	(amount (mult_mass r d))))

(forall (d1 d2 r)
(if	(and	(amount d1)
		(amount d2)
		(field r))
        (= (mult_mass r (add_mass d1 d2)) 
	   (add_mass (mult_mass r d1) (mult_mass r d2)))))

(forall (d r s)
(if	(and	(amount d)
		(field r)
		(field s))
        (= (mult_mass (sum r s) d) (add_mass (mult_mass r d) (mult_mass s d)))))

(forall (d r s)
(if	(and	(amount d)
		(field r)
		(field s))
        (= (mult_mass (prod r s) d) (mult_mass r (mult_mass s d)))))

(forall (d)
(if	(amount d)
        (= d (mult_mass one_mass d))))

(forall (d1 d2 d3)
	(if	(and	(amount d1)
			(amount d2)
			(amount d3))
        	(if     (lesser_mass d1 d2)
                	(lesser_mass (add_mass d1 d3) (add_mass d2 d3)))))

(forall (d1 d2 d3)
	(if	(and	(amount d1)
			(amount d2)
			(amount d3))
        	(if    (= d1 d2)
                	(= (add_mass d1 d3) (add_mass d2 d3)))))

(forall (d1 d2 r)
        (if     (and    (amount d1)
                        (amount d2)
                        (field r))
                (if     (lesser_amount d1 d2)
                        (lesser_amount (mult_mass r d1) (mult_mass r d2)))))

(forall (d1 d2 r)
        (if     (and    (amount d1)
                        (amount d2)
                        (field r))
                (if     (= d1 d2)
                        (= (mult_mass r d1) (mult_mass r d2)))))

(forall (x)
	(if	(amount x)
		(not (lesser_mass x zero_mass))))

(forall (x y)
	(if	(and	(amount x)
			(amount y))
		(or	(lesser_mass x y)
			(lesser_mass y x)
			(= x y))))

)



/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved.
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
 *******************************************************************************/
 

(cl-text http://colore.oor.net/mass/mass.clif

(cl-imports http://colore.oor.net/mass/amount.clif)

(cl-imports http://colore.oor.net/matter/matter.clif)

(forall (x)
	(if	(mat x)
		(not (amount x))))

(forall (x)
	(iff  	(mat x)
		(amount (mass x))))

(forall (x)
	(if  	(mat x)
		(lesser_amount zero_mass (mass x))))

(forall (x y)
	(if	(proper_chunk x y)
		(lesser_amount (mass x) (mass y))))

(forall (x y z w)
	(if	(and	(chunk_diff x y z)
			(chunk_sum x y w))
		(= (mass w) (add_mass (mass y) (mass z)))))
		
(forall (x y)
	(if	(lesser_amount (mass x) (mass y))
		(exists (z)
			(and	(proper_chunk z y)
				(= (mass y) (mass z))))))

)



/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved.
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
*******************************************************************************/


(cl-text http://colore.oor.net/constitution/constitution.clif

(cl-imports http://colore.oor.net/matter/matter.clif)

(forall (x y)
        (if     (constitutes x y)
        	(and	(mat x)
			(MaterialObject x))))

(forall (x)
	(if	(MaterialObject x)
	(exists (y)
			(constitutes y x))))
			
(forall (x y1 y2)
	(if	(and	(mat x)
			(constitutes x y1)
			(constitutes x y2))
		(= y1 y2)))

(forall (x1 x2 y)
	(if	(and	(mat x1)
			(mat x2)
			(constitutes x1 y)
			(constitutes x2 y))
		(= x1 x2)))

)


/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved.
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
*******************************************************************************/

(cl-text http://colore.oor.net/component/component_def.clif

(cl-comment 'Proper Parthood')
(forall (x y)
        (iff    (properComponent x y)
                (and    (componentOf x y)
                        (not (= x y)))))
                        
)


/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved.
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
 *******************************************************************************/

(cl-text http://colore.oor.net/occupy/occupy_root.clif

(cl-module region (cl-imports http://colore.oor.net/combined_mereotopology/mt.clif))

(forall (x y)
	(if	(spatial_part x y)
		(and	(region x)
			(region y))))

(forall (x y)
	(if	(C x y)
		(and	(region x)
			(region y))))

(forall (x y)
	(if	(physical_part x y)
		(and	(physical_object x)
			(physical_object y))))

(forall (x y)
	(if	(physical_C x y)
		(and	(physical_object x)
			(physical_object y))))

(forall (x)
        (if	(physical_object x)
		(physical_part x x)))

(forall (x y)
        (if     (and    (physical_part x y)
                        (physical_part y x))
                (= x y)))

(forall (x y z)
        (if     (and    (physical_part x y)
                        (physical_part y z))
                (physical_part x z)))

(forall (x) 
	(if	(physical_object x)
		(physical_C x x)))

(forall (x y)
	(if	(physical_C x y)
		(physical_C y x)))

(forall (x y)
        (if     (physical_part x y)
                (forall (z)
                        (if     (physical_part y z)
                                (physical_C x z)))))

(forall (x)
	(if	(region x)
		(not (physical_object x))))

(forall (x y)
	(if	(occupies x y)
		(and	(physical_object x)
			(region y))))

(forall (x y z)
	(if	(and	(occupies x y)
			(occupies x z))
		(= y z)))

(forall (x)
	(if	(physical_object x)
		(exists (y)
			(occupies x y))))

(forall (x y r1 r2)
	(if	(and	(physical_part x y)
			(occupies x r1)
			(occupies y r2))
		(spatial_part r1 r2)))

(forall (x y r1 r2)
	(if	(and	(physical_C x y)
			(occupies x r1)
			(occupies y r2))
		(spatial_C r1 r2)))

)


/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved.
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
 *******************************************************************************/

(cl-text http://colore.oor.net/occupy/physical_mt/physical_mt.clif

(forall (x y)
	(if	(physical_part x y)
		(and	(physical_object x)
			(physical_object y))))

(forall (x y)
	(if	(physical_C x y)
		(and	(physical_object x)
			(physical_object y))))

(forall (x)
        (if	(physical_object x)
		(physical_part x x)))

(forall (x y)
        (if     (and    (physical_part x y)
                        (physical_part y x))
                (= x y)))

(forall (x y z)
        (if     (and    (physical_part x y)
                        (physical_part y z))
                (physical_part x z)))

(forall (x) 
	(if	(physical_object x)
		(physical_C x x)))

(forall (x y)
	(if	(physical_C x y)
		(physical_C y x)))

(forall (x y)
        (if     (physical_part x y)
                (forall (z)
                        (if     (physical_C x z)
                                (physical_C z y)))))

)


/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved.
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
 *******************************************************************************/

(cl-text http://colore.oor.net/occupy/region_mt/region_mt.clif

(cl-imports http://colore.oor.net/occupy/region_connection/region_connection.clif)

(cl-imports http://colore.oor.net/occupy/region_mereology/region_mereology.clif)


(cl-domain region (cl-imports http://colore.oor.net/combined_mereotopology/mt.clif))

(forall (x y z)
	(if	(and (spatial_C x y)
	             (spatial_part y z))
		(spatial_C x z))
)		



/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved.
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
 *******************************************************************************/

(cl-text http://colore.oor.net/occupy/occupy_mereology/occupy_mereology.clif

(cl-imports http://colore.oor.net/occupy/region_mereology/region_mereology.clif)

(cl-imports http://colore.oor.net/occupy/physical_mereology/physical_mereology.clif)

(forall (x)
	(if	(region x)
		(not (physical_object x))))

(forall (x y)
	(if	(occupies x y)
		(and	(physical_object x)
			(region y))))

(forall (x y z)
	(if	(and	(occupies x y)
			(occupies x z))
		(= y z)))

(forall (x)
	(if	(physical_object x)
		(exists (y)
			(occupies x y))))

(forall (x y r1 r2)
	(if	(and	(physical_part x y)
			(occupies x r1)
			(occupies y r2))
		(spatial_part r1 r2)))

)


/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved.
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
 *******************************************************************************/

(cl-text http://colore.oor.net/occupy/occupy_connection/occupy_connection.clif

(cl-imports http://colore.oor.net/occupy/region_connection/region_connection.clif)

(cl-imports http://colore.oor.net/occupy/physical_connection/physical_connection.clif)

(forall (x)
	(if	(region x)
		(not (physical_object x))))

(forall (x y)
	(if	(occupies x y)
		(and	(physical_object x)
			(region y))))

(forall (x y z)
	(if	(and	(occupies x y)
			(occupies x z))
		(= y z)))

(forall (x)
	(if	(physical_object x)
		(exists (y)
			(occupies x y))))

(forall (x y r1 r2)
	(if	(and	(physical_C x y)
			(occupies x r1)
			(occupies y r2))
		(physical_C r1 r2)))

)


/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved.
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
 *******************************************************************************/

(cl-text http://colore.oor.net/occupy/physical_connection/physical_connection.clif

(forall (x y)
	(if	(physical_C x y)
		(and	(physical_object x)
			(physical_object y))))

(forall (x) 
	(if	(physical_object x)
		(physical_C x x)))

(forall (x y)
	(if	(physical_C x y)
		(physical_C y x)))

)



/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved.
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
 *******************************************************************************/

(cl-text http://colore.oor.net/occupy/physical_mereology/physical_mereology.clif

(forall (x y)
	(if	(physical_part x y)
		(and	(physical_object x)
			(physical_object y))))

(forall (x)
        (if	(physical_object x)
		(physical_part x x)))

(forall (x y)
        (if     (and    (physical_part x y)
                        (physical_part y x))
                (= x y)))

(forall (x y z)
        (if     (and    (physical_part x y)
                        (physical_part y z))
                (physical_part x z)))

)


/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved.
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
 *******************************************************************************/

(cl-text http://colore.oor.net/occupy/region_mereology/region_mereology.clif

(cl-domain region (cl-imports http://colore.oor.net/mereology/m_mereology.clif))

(forall (x y)
	(if	(spatial_part x y)
		(and	(region x)
			(region y))))
			
(forall (x)
	(spatial_part x x))

(forall (x y)
        (if     (and	(spatial_part x y)
			(spatial_part y x))
		(= x y)))

(forall (x y z)
        (if     (and    (spatial_part x y)
                        (spatial_part y z))
                (spatial_part x z)))			

)


/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved.
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
 *******************************************************************************/


(cl-text http://colore.oor.net/occupy/region_connection/region_connection.clif

(cl-domain region (cl-imports http://colore.oor.net/mereotopology/connection.clif))

(forall (x y)
	(if	(spatial_C x y)
		(and	(region x)
			(region y))))

)

(forall (x) (if (region x) 
                (spatial_C x x))
)

(forall (x y) (if (spatial_C x y) 
                (spatial_C y x))
)		
		


/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved.
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
 *******************************************************************************/

(cl-text http://colore.oor.net/size/spatial_length.clif

(cl-module field (cl-imports http://colore.oor.net/ringoids/field.clif))

(spatial_length zero_length)

(forall (l1 l2)
(if  (and	(spatial_length l1)
		(spatial_length l2))
	  (spatial_length (add_length l1 l2))))

(forall (l1 l2 l3)
(if  (and	(spatial_length l1)
		(spatial_length l2)
		(spatial_length l3))
          (= (add_length (add_length l1 l2) l3) (add_length l1 (add_length l2 l3)))))

(forall (l)
(if  (spatial_length l)
          (= (add_length l zero_length) l)))

(forall (l1)
(if     (spatial_length l1)
        (exists (l2)
                (and    (spatial_length l2)
                        (= (add_length l1 l2) zero_length)))))

(forall (l1 l2)
(if  (and	(spatial_length l1)
		(spatial_length l2))
          (= (add_length l1 l2) (add_length l2 l1))))

(forall (l r)
(if	(and	(spatial_length l)
		(field r))
	(spatial_length (mult_length r l))))

(forall (l1 l2 r)
(if	(and	(spatial_length l1)
		(spatial_length l2)
		(field r))
        (= (mult_length r (add_length l1 l2)) 
	   (add_length (mult_length r l1) (mult_length r l2)))))

(forall (l r s)
(if	(and	(spatial_length l)
		(field r)
		(field s))
        (= (mult_length (sum r s) l) 
	   (add_length (mult_length r l) (mult_length s l)))))

(forall (l r s)
(if	(and	(spatial_length l)
		(field r)
		(field s))
        (= (mult_length (prod r s) l) (mult_length r (mult_length s l)))))

(forall (l)
(if	(spatial_length l)
        (= l (mult_length one_length l))))

(forall (l1 l2 l3)
	(if	(and	(spatial_length l1)
			(spatial_length l2)
			(spatial_length l3))
        	(iff    (lesser_length l1 l2)
                	(lesser_length (add_length l1 l3) (add_length l2 l3)))))

(forall (l1 l2 l3)
	(if	(and	(spatial_length l1)
			(spatial_length l2)
			(spatial_length l3))
        	(iff    (= l1 l2)
                	(= (add_length l1 l3) (add_length l2 l3)))))

(forall (x)
	(if	(spatial_length x)
		(not (lesser_length x zero_length))))

)



/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved.
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
 *******************************************************************************/

(cl-text http://colore.oor.net/size/length.clif

(cl-imports http://colore.oor.net/multidim_mereotopology_codi/codi_int.clif)

(cl-imports http://colore.oor.net/multidim_mereotopology_codi/definitions/epp.clif)

(cl-imports http://colore.oor.net/multidim_mereotopology_codi/definitions/curve.clif)

(cl-imports http://colore.oor.net/size/spatial_length.clif)

(forall (x)
	(if  	(Curve x)
		(spatial_length (length x))))

(forall (x)
        (if     (Curve x)   
                (lesser zero_length (length x))))

(forall (x y)
	(if	(PP x y)
		(lesser (length x) (length y))))
		
(forall (x y z)
	(if	(and	(diff x y z)
			(Curve x)
			(Curve y)
			(Curve z))
		(= (length x) (add (length y) (length z)))))

(forall (x y)
	(if	(PP y x)
		(exists (z)
			(and	(PP z x)
				(not (= y z))
				(= (length y) (length z))))))

)



/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved.
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
 *******************************************************************************/

(cl-text http://colore.oor.net/size/spatial_area.clif

(cl-module field (cl-imports http://colore.oor.net/ringoids/field.clif))

(spatial_area zero_area)

(forall (a1 a2)
(if  (and	(spatial_area a1)
		(spatial_area a2))
	  (spatial_area (add_area a1 a2))))

(forall (a1 a2 a3)
(if  (and	(spatial_area a1)
		(spatial_area a2)
		(spatial_area a3))
          (= (add_area (add_area a1 a2) a3) (add_area a1 (add_area a2 a3)))))

(forall (a)
(if  (spatial_area a)
          (= (add_area a zero_area) a)))

(forall (a1)
(if     (spatial_area a1)
        (exists (a2)
                (and    (spatial_area a2)
                        (= (add_area a1 a2) zero_area)))))

(forall (a1 a2)
(if  (and	(spatial_area a1)
		(spatial_area a2))
          (= (add_area a1 a2) (add_area a2 a1))))

(forall (a r)
(if	(and	(spatial_area a)
		(field r))
	(spatial_area (mult_area r a))))

(forall (a1 a2 r)
(if	(and	(spatial_area a1)
		(spatial_area a2)
		(field r))
        (= (mult_area r (add_area a1 a2)) 
	   (add_area (mult_area r a1) (mult_area r a2)))))

(forall (a r s)
(if	(and	(spatial_area a)
		(field r)
		(field s))
        (= (mult_area (sum r s) a) (add_area (mult_area r a) (mult_area s a)))))

(forall (a r s)
(if	(and	(spatial_area a)
		(field r)
		(field s))
        (= (mult_area (prod r s) a) (mult_area r (mult_area s a)))))

(forall (a)
(if	(spatial_area a)
        (= a (mult_area one_area a))))

(forall (a1 a2 a3)
	(if	(and	(spatial_area a1)
			(spatial_area a2)
			(spatial_area a3))
        	(iff    (lesser_area a1 a2)
                	(lesser_area (add_area a1 a3) (add_area a2 a3)))))

(forall (a1 a2 a3)
	(if	(and	(spatial_area a1)
			(spatial_area a2)
			(spatial_area a3))
        	(iff    (= a1 a2)
                	(= (add_area a1 a3) (add_area a2 a3)))))

(forall (x)
	(if	(spatial_area x)
		(not (lesser_area x zero_area))))

)



/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved.
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
 *******************************************************************************/

(cl-text http://colore.oor.net/size/area.clif

(cl-imports http://colore.oor.net/multidim_mereotopology_codi/codi_int.clif)

(cl-imports http://colore.oor.net/multidim_mereotopology_codi/definitions/epp.clif)

(cl-imports http://colore.oor.net/multidim_mereotopology_codi/definitions/areal_region.clif)

(cl-imports http://colore.oor.net/size/spatial_area.clif)

(forall (x)
	(if  	(ArealRegion x)
		(spatial_area (area x))))

(forall (x)
        (if     (ArealRegion x)   
                (lesser zero_area (area x))))

(forall (x y)
	(if	(PP x y)
		(lesser (area x) (area y))))
		
(forall (x y z)
	(if	(and	(diff x y z)
			(ArealRegion x)
			(ArealRegion y)
			(ArealRegion z))
		(= (area x) (add (area y) (area z)))))

(forall (x y)
	(if	(PP y x)
		(exists (z)
			(and	(PP z x)
				(not (= y z))
				(= (area y) (area z))))))

)



/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved.
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
 *******************************************************************************/

(cl-text http://colore.oor.net/size/spatial_volume.clif

(cl-module field (cl-imports http://colore.oor.net/ringoids/field.clif))

(spatial_volume zero_volume)

(forall (v1 v2)
(if  (and	(spatial_volume v1)
		(spatial_volume v2))
	  (spatial_volume (add_volume v1 v2))))

(forall (v1 v2 v3)
(if	(and	(spatial_volume v1)
		(spatial_volume v2)
		(spatial_volume v3))
	(= (add_volume (add_volume v1 v2) v3) 
	   (add_volume v1 (add_volume v2 v3)))))

(forall (v)
(if  (spatial_volume v)
          (= (add_volume v zero_volume) v)))

(forall (v1)
(if     (spatial_volume v1)
        (exists (v2)
                (and    (spatial_volume v2)
                        (= (add_volume v1 v2) zero_volume)))))

(forall (v1 v2)
(if  (and	(spatial_volume v1)
		(spatial_volume v2))
          (= (add_volume v1 v2) (add_volume v2 v1))))

(forall (v r)
(if	(and	(spatial_volume v)
		(field r))
	(spatial_volume (mult_volume r v))))

(forall (v1 v2 r)
(if	(and	(spatial_volume v1)
		(spatial_volume v2)
		(field r))
        (= (mult_volume r (add_volume v1 v2)) (add_volume (mult_volume r v1) (mult_volume r v2)))))

(forall (v r s)
(if	(and	(spatial_volume v)
		(field r)
		(field s))
        (= (mult_volume (sum r s) v) 
	   (add_volume (mult_volume r v) (mult_volume s v)))))

(forall (v r s)
(if	(and	(spatial_volume v)
		(field r)
		(field s))
        (= (mult_volume (prod r s) v) (mult_volume r (mult_volume s v)))))

(forall (v)
(if	(spatial_volume v)
        (= v (mult_volume one_volume v))))

(forall (v1 v2 v3)
	(if	(and	(spatial_volume v1)
			(spatial_volume v2)
			(spatial_volume v3))
        	(iff    (lesser_volume v1 v2)
                	(lesser_volume (add_volume v1 v3) (add_volume v2 v3)))))

(forall (v1 v2 v3)
	(if	(and	(spatial_volume v1)
			(spatial_volume v2)
			(spatial_volume v3))
        	(iff    (= v1 v2)
                	(= (add_volume v1 v3) (add_volume v2 v3)))))

(forall (x)
	(if	(spatial_volume x)
		(not (lesser_volume x zero_volume))))

)



/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved.
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
 *******************************************************************************/

(cl-text http://colore.oor.net/size/volume.clif

(cl-imports http://colore.oor.net/multidim_mereotopology_codi/codi_int.clif)

(cl-imports http://colore.oor.net/multidim_mereotopology_codi/definitions/epp.clif)

(cl-imports http://colore.oor.net/multidim_mereotopology_codi/definitions/voluminal_region.clif)

(cl-imports http://colore.oor.net/size/spatial_volume.clif)

(forall (x)
	(if  	(VoluminalRegion x)
		(spatial_volume (volume x))))

(forall (x)
        (if     (VoluminalRegion x)   
                (lesser zero_volume (volume x))))

(forall (x y)
	(if	(PP x y)
		(lesser (volume x) (volume y))))
		
(forall (x y z)
	(if	(and	(diff x y z)
			(VoluminalRegion x)
			(VoluminalRegion y)
			(VoluminalRegion z))
		(= (volume x) (add (volume y) (volume z)))))

(forall (x y)
	(if	(PP y x)
		(exists (z)
			(and	(PP z x)
				(not (= y z))
				(= (volume y) (volume z))))))

)



/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved.
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
 *******************************************************************************/
 
(cl-text http://colore.oor.net/multidim_occupy/multidim_occupy_root.clif

(cl-imports http://colore.oor.net/multidim_mereotopology_codi/codi_updown.clif)

(cl-imports http://colore.oor.net/shape/shape.clif)

(cl-imports http://colore.oor.net/multidim_occupy/point_occupy.clif)

(cl-imports http://colore.oor.net/multidim_occupy/edge_occupy.clif)

(cl-imports http://colore.oor.net/multidim_occupy/surface_occupy.clif)

(cl-imports http://colore.oor.net/multidim_occupy/box_occupy.clif)

(forall (x y r1 r2) 
    (if (and	(incident x y)
				(point_occupies x r1)
				(edge_occupies y r2))
        (Cont r1 r2)))

(forall (x y r1 r2) 
    (if (and	(incident x y)
				(or		(point_occupies x r1)
						(edge_occupies x r1))
				(surface_occupies y r2))
        (Cont r1 r2)))

(forall (x y r1 r2) 
    (if (and	(incident x y)
				(or		(point_occupies x r1)
						(edge_occupies x r1)
						(surface_occupies x r1))
				(box_occupies y r2))
        (Cont r1 r2)))		
        
)


/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved. 
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Torsten Hahmann - initial implementation
 *******************************************************************************/

(cl-text http://colore.oor.net/multidim_mereotopology_codib/codib.clif

(cl-imports http://colore.oor.net/multidim_mereotopology_codib/definitions/closed.clif)

(cl-imports http://colore.oor.net/multidim_mereotopology_codib/codi_bcont.clif)

)





============================== Mace4 =================================
Mace4 (32) version Oct-2007, Oct 2007.
Process 23956 was started by torsten on LAPTOP-UF9R3IH7,
Thu Feb 25 11:26:37 2021
The command was "/cygdrive/c/Users/torsten/macleod/mace4 -v0 -t600 -s60 -n2 -N40 -f C:\Users\torsten\GitHub\colore\ontologies\multidim_space_codib\conversions\codib_atomic_curves_nontrivial.all.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file C:\Users\torsten\GitHub\colore\ontologies\multidim_space_codib\conversions\codib_atomic_curves_nontrivial.all.p9


formulas(sos).
(all x all y (AtomicCurve(x) & -AtomicLoopCurve(x) & Cont(y,x) & x != y -> Point(y) & BCont(y,x))).
(all x all p1 all p2 all p3 (AtomicCurve(x) & Point(p1) & Point(p2) & Point(p3) & Cont(p1,x) & Cont(p2,x) & Cont(p3,x) -> p1 = p2 | p1 = p3 | p2 = p3)).
(all x all p1 all p2 (AtomicCurve(x) & Point(p1) & Point(p2) & p1 != p2 & Cont(p1,x) & Cont(p2,x) -> -Closed(x))).
(all x (Curve(x) -> (exists y (P(y,x) & AtomicCurve(y))))).
(all x all y (Point(x) & Curve(y) & -AtomicCurveSegment(y) -> (BCont(x,y) <-> (exists s1 (AtomicCurve(s1) & P(s1,y) & BCont(x,s1) & (all s2 (P(s2,y) & AtomicCurve(s2) & BCont(x,s2) -> s1 = s2))))))).
(exists var1 Closed(var1)).
(exists var2 -Closed(var2)).
(exists var3 AtomicLoopCurve(var3)).
(exists var4 -AtomicLoopCurve(var4)).
(exists var5 exists var6 (BCont(var5,var6) & var5 != var6)).
(exists var7 exists var8 (-BCont(var7,var8) & var7 != var8)).
(exists var9 exists var10 (gt(var9,var10) & var9 != var10)).
(exists var11 exists var12 (-gt(var11,var12) & var11 != var12)).
(exists var13 S(var13)).
(exists var14 -S(var14)).
(exists var15 exists var16 (Covers(var15,var16) & var15 != var16)).
(exists var17 exists var18 (-Covers(var17,var18) & var17 != var18)).
(exists var19 MaxDim(var19)).
(exists var20 -MaxDim(var20)).
(exists var21 Atomic_S(var21)).
(exists var22 -Atomic_S(var22)).
(exists var23 exists var24 (Cont(var23,var24) & var23 != var24)).
(exists var25 exists var26 (-Cont(var25,var26) & var25 != var26)).
(exists var27 exists var28 (C(var27,var28) & var27 != var28)).
(exists var29 exists var30 (-C(var29,var30) & var29 != var30)).
(exists var31 Curve(var31)).
(exists var32 -Curve(var32)).
(exists var33 exists var34 (PO(var33,var34) & var33 != var34)).
(exists var35 exists var36 (-PO(var35,var36) & var35 != var36)).
(exists var37 Max(var37)).
(exists var38 -Max(var38)).
(exists var39 exists var40 (lt(var39,var40) & var39 != var40)).
(exists var41 exists var42 (-lt(var41,var42) & var41 != var42)).
(exists var43 AtomicRayCurve(var43)).
(exists var44 -AtomicRayCurve(var44)).
(exists var45 Min(var45)).
(exists var46 -Min(var46)).
(exists var47 exists var48 (SC(var47,var48) & var47 != var48)).
(exists var49 exists var50 (-SC(var49,var50) & var49 != var50)).
(exists var51 exists var52 (P(var51,var52) & var51 != var52)).
(exists var53 exists var54 (-P(var53,var54) & var53 != var54)).
(exists var55 SimpleLoopCurve(var55)).
(exists var56 -SimpleLoopCurve(var56)).
(exists var57 Point(var57)).
(exists var58 -Point(var58)).
(exists var59 exists var60 (Inc(var59,var60) & var59 != var60)).
(exists var61 exists var62 (-Inc(var61,var62) & var61 != var62)).
(exists var63 SimpleCurveSegment(var63)).
(exists var64 -SimpleCurveSegment(var64)).
(exists var65 MinDim(var65)).
(exists var66 -MinDim(var66)).
(exists var67 Simple_S(var67)).
(exists var68 -Simple_S(var68)).
(exists var69 exists var70 (geq(var69,var70) & var69 != var70)).
(exists var71 exists var72 (-geq(var71,var72) & var71 != var72)).
(exists var73 exists var74 (EqDim(var73,var74) & var73 != var74)).
(exists var75 exists var76 (-EqDim(var75,var76) & var75 != var76)).
(exists var77 exists var78 (PP(var77,var78) & var77 != var78)).
(exists var79 exists var80 (-PP(var79,var80) & var79 != var80)).
(exists var81 Branched_S(var81)).
(exists var82 -Branched_S(var82)).
(exists var83 AtomicCurveSegment(var83)).
(exists var84 -AtomicCurveSegment(var84)).
(exists var85 ZEX(var85)).
(exists var86 -ZEX(var86)).
(exists var87 AtomicCurve(var87)).
(exists var88 -AtomicCurve(var88)).
(exists var89 exists var90 (Endpoint(var89,var90) & var89 != var90)).
(exists var91 exists var92 (-Endpoint(var91,var92) & var91 != var92)).
(exists var93 exists var94 (leq(var93,var94) & var93 != var94)).
(exists var95 exists var96 (-leq(var95,var96) & var95 != var96)).
(exists var97 PointRegion(var97)).
(exists var98 -PointRegion(var98)).
(exists var99 Connected_S(var99)).
(exists var100 -Connected_S(var100)).
(all x all y (SC(x,y) -> C(x,y))).
(all x all y (SC(x,y) -> -(exists z (Cont(z,x) & P(z,y))))).
(all x all y (SC(x,y) -> -(exists z (P(z,x) & Cont(z,y))))).
(all x all y (C(x,y) & (all z (-Cont(z,x) | -Cont(z,y) | -P(z,x) & -P(z,y))) -> SC(x,y))).
(all x -SC(x,x)).
(all x all y (SC(x,y) -> SC(y,x))).
(all x all y (SC(x,y) -> (exists z (lt(z,x) & lt(z,y) & Cont(z,x) & Cont(z,y))))).
(all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> leq(z,x) & -EqDim(z,x) & leq(z,y) & -EqDim(z,y))))).
(all x all y (EqDim(x,y) <-> leq(x,y) & leq(y,x))).
(all x all y (leq(x,y) -> S(x))).
(all x all y (leq(x,y) -> S(y))).
(all x (ZEX(x) -> S(x))).
(all x (S(x) -> leq(x,x))).
(all x all y all z (leq(x,y) & leq(y,z) -> leq(x,z))).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x all y (ZEX(x) & S(y) -> leq(x,y))).
(all x all y (Cont(x,y) -> leq(x,y))).
(exists x MinDim(x)).
(all x (MaxDim(x) <-> S(x) & -ZEX(x) & (all y (S(y) -> leq(y,x))))).
(all x (MinDim(x) <-> S(x) & -ZEX(x) & (all y (S(y) & -ZEX(y) -> leq(x,y))))).
(all x (S(x) & -ZEX(x) <-> Cont(x,x))).
(all x all y (Cont(x,y) & Cont(y,x) -> x = y)).
(all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))).
(all x all y (ZEX(x) -> S(x) & -Cont(y,x) & -Cont(x,y))).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))).
(all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))).
(all x -Inc(x,x)).
(all x all y (Inc(x,y) -> Inc(y,x))).
(all x all y (EqDim(x,y) -> -Inc(x,y))).
(all x all y (Inc(x,y) -> lt(x,y) | lt(y,x))).
(all x all y (Cont(x,y) & lt(x,y) -> Inc(x,y))).
(all x all y all z (Inc(x,y) & P(y,z) -> Inc(x,z))).
(all x all y (Inc(x,y) <-> (exists z (leq(z,x) & -EqDim(z,x) & Cont(z,x) & P(z,y))) | (exists z (leq(z,y) & -EqDim(z,y) & Cont(z,y) & P(z,x))))).
(all x (S(x) & -ZEX(x) -> PO(x,x))).
(all x all y (PO(x,y) -> PO(y,x))).
(all x all y (PO(x,y) -> EqDim(x,y))).
(all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))).
(all x (Max(x) <-> S(x) & -ZEX(x) & (all y -PP(x,y)))).
(all x (Min(x) <-> S(x) & -ZEX(x) & (all y -PP(y,x)))).
(all x all y (PP(x,y) <-> P(x,y) & x != y)).
(all x all y (BCont(x,y) -> Cont(x,y) & -EqDim(x,y))).
(all x all y all v all z (SC(x,y) & Min(x) & P(x,v) & Cont(y,v) & Cont(z,x) & Cont(z,y) -> BCont(z,x))).
(all x all y all z all v (SC(x,y) & P(x,v) & P(y,v) & Cont(z,x) & Cont(z,y) & Covers(v,z) -> -BCont(z,v))).
(all x all y all z (BCont(x,y) & P(y,z) & (all v all w (P(v,z) & -PO(v,y) & P(w,x) -> -Cont(w,v))) -> BCont(x,z))).
(all x all y all z (BCont(x,y) & Cont(z,x) -> BCont(z,y))).
(all x all y (Covers(x,y) <-> lt(y,x) & (all z (S(z) -> -(lt(y,z) & lt(z,x)))))).
(all x all y (gt(x,y) <-> lt(y,x))).
(all x all y (geq(x,y) <-> leq(y,x))).
(all x all y (lt(x,y) <-> leq(x,y) & -EqDim(x,y))).
(all x (Closed(x) <-> (all y -BCont(y,x)))).
(all x (AtomicCurveSegment(x) <-> SimpleCurveSegment(x) & Atomic_S(x))).
(all x (Atomic_S(x) <-> Simple_S(x) & Min(x))).
(all x (Simple_S(x) <-> Connected_S(x) & -Branched_S(x))).
(all x (Branched_S(x) <-> Connected_S(x) & (exists p exists q exists r exists s (PP(p,x) & PP(q,x) & PP(r,x) & -PO(p,q) & -PO(p,r) & -PO(q,r) & Covers(p,s) & Covers(q,s) & Covers(r,s) & Cont(s,p) & Cont(s,q) & Cont(s,r))))).
(all x (Connected_S(x) <-> S(x) & (all y (PP(y,x) -> SC(y,difference(x,y)))))).
(all x all y (S(x) & S(y) & -C(x,y) <-> ZEX(intersection(x,y)))).
(all x all y (S(x) & S(y) & -ZEX(intersection(x,y)) -> Cont(intersection(x,y),x))).
(all x all y all z (Cont(z,x) & Cont(z,y) -> leq(z,intersection(x,y)))).
(all x all y all z (Cont(z,x) & Cont(z,y) & EqDim(z,intersection(x,y)) <-> P(z,intersection(x,y)))).
(all x all y (S(x) & S(y) & -ZEX(difference(x,y)) -> EqDim(x,difference(x,y)))).
(all x all y (lt(y,x) -> x = difference(x,y))).
(all x all y all z (leq(x,y) & Cont(z,x) & lt(intersection(z,y),z) -> Cont(z,difference(x,y)))).
(all x all y all z (leq(x,y) & Cont(z,difference(x,y)) -> Cont(z,x))).
(all x all y all z (leq(x,y) & P(z,difference(x,y)) -> lt(intersection(z,y),z))).
(all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))).
(all x (SimpleCurveSegment(x) <-> Curve(x) & Simple_S(x) & (exists p1 exists p2 (p1 != p2 & BCont(p1,x) & BCont(p2,x))))).
(all x (Curve(x) <-> -ZEX(x) & -MinDim(x) & (all y (MinDim(y) <-> Covers(x,y))))).
(all x (AtomicLoopCurve(x) <-> SimpleLoopCurve(x) & Atomic_S(x))).
(all x (SimpleLoopCurve(x) <-> Curve(x) & Simple_S(x) & (all y (PointRegion(y) -> -BCont(y,x))))).
(all x (PointRegion(x) <-> MinDim(x))).
(all x (AtomicCurve(x) <-> AtomicCurveSegment(x) | AtomicLoopCurve(x) | AtomicRayCurve(x))).
(all x (AtomicRayCurve(x) <-> Curve(x) & (all y -PP(y,x)) & (exists y (Endpoint(y,x) & (all z (Point(z) & Cont(z,x) -> y = z)))))).
(all x all y (Endpoint(x,y) <-> Point(x) & Curve(y) & BCont(x,y))).
(all x (Point(x) <-> MinDim(x) & (all y (Cont(y,x) -> y = x)))).
end_of_list.

% From the command line: clear(verbose).

% From the command line: assign(max_seconds, 600).

% From the command line: assign(max_seconds_per, 60).

% From the command line: assign(domain_size, 2).

% From the command line: assign(iterate_up_to, 40).

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x all y (AtomicCurve(x) & -AtomicLoopCurve(x) & Cont(y,x) & x != y -> Point(y) & BCont(y,x))) # label(non_clause).  [assumption].
2 (all x all p1 all p2 all p3 (AtomicCurve(x) & Point(p1) & Point(p2) & Point(p3) & Cont(p1,x) & Cont(p2,x) & Cont(p3,x) -> p1 = p2 | p1 = p3 | p2 = p3)) # label(non_clause).  [assumption].
3 (all x all p1 all p2 (AtomicCurve(x) & Point(p1) & Point(p2) & p1 != p2 & Cont(p1,x) & Cont(p2,x) -> -Closed(x))) # label(non_clause).  [assumption].
4 (all x (Curve(x) -> (exists y (P(y,x) & AtomicCurve(y))))) # label(non_clause).  [assumption].
5 (all x all y (Point(x) & Curve(y) & -AtomicCurveSegment(y) -> (BCont(x,y) <-> (exists s1 (AtomicCurve(s1) & P(s1,y) & BCont(x,s1) & (all s2 (P(s2,y) & AtomicCurve(s2) & BCont(x,s2) -> s1 = s2))))))) # label(non_clause).  [assumption].
6 (exists var1 Closed(var1)) # label(non_clause).  [assumption].
7 (exists var2 -Closed(var2)) # label(non_clause).  [assumption].
8 (exists var3 AtomicLoopCurve(var3)) # label(non_clause).  [assumption].
9 (exists var4 -AtomicLoopCurve(var4)) # label(non_clause).  [assumption].
10 (exists var5 exists var6 (BCont(var5,var6) & var5 != var6)) # label(non_clause).  [assumption].
11 (exists var7 exists var8 (-BCont(var7,var8) & var7 != var8)) # label(non_clause).  [assumption].
12 (exists var9 exists var10 (gt(var9,var10) & var9 != var10)) # label(non_clause).  [assumption].
13 (exists var11 exists var12 (-gt(var11,var12) & var11 != var12)) # label(non_clause).  [assumption].
14 (exists var13 S(var13)) # label(non_clause).  [assumption].
15 (exists var14 -S(var14)) # label(non_clause).  [assumption].
16 (exists var15 exists var16 (Covers(var15,var16) & var15 != var16)) # label(non_clause).  [assumption].
17 (exists var17 exists var18 (-Covers(var17,var18) & var17 != var18)) # label(non_clause).  [assumption].
18 (exists var19 MaxDim(var19)) # label(non_clause).  [assumption].
19 (exists var20 -MaxDim(var20)) # label(non_clause).  [assumption].
20 (exists var21 Atomic_S(var21)) # label(non_clause).  [assumption].
21 (exists var22 -Atomic_S(var22)) # label(non_clause).  [assumption].
22 (exists var23 exists var24 (Cont(var23,var24) & var23 != var24)) # label(non_clause).  [assumption].
23 (exists var25 exists var26 (-Cont(var25,var26) & var25 != var26)) # label(non_clause).  [assumption].
24 (exists var27 exists var28 (C(var27,var28) & var27 != var28)) # label(non_clause).  [assumption].
25 (exists var29 exists var30 (-C(var29,var30) & var29 != var30)) # label(non_clause).  [assumption].
26 (exists var31 Curve(var31)) # label(non_clause).  [assumption].
27 (exists var32 -Curve(var32)) # label(non_clause).  [assumption].
28 (exists var33 exists var34 (PO(var33,var34) & var33 != var34)) # label(non_clause).  [assumption].
29 (exists var35 exists var36 (-PO(var35,var36) & var35 != var36)) # label(non_clause).  [assumption].
30 (exists var37 Max(var37)) # label(non_clause).  [assumption].
31 (exists var38 -Max(var38)) # label(non_clause).  [assumption].
32 (exists var39 exists var40 (lt(var39,var40) & var39 != var40)) # label(non_clause).  [assumption].
33 (exists var41 exists var42 (-lt(var41,var42) & var41 != var42)) # label(non_clause).  [assumption].
34 (exists var43 AtomicRayCurve(var43)) # label(non_clause).  [assumption].
35 (exists var44 -AtomicRayCurve(var44)) # label(non_clause).  [assumption].
36 (exists var45 Min(var45)) # label(non_clause).  [assumption].
37 (exists var46 -Min(var46)) # label(non_clause).  [assumption].
38 (exists var47 exists var48 (SC(var47,var48) & var47 != var48)) # label(non_clause).  [assumption].
39 (exists var49 exists var50 (-SC(var49,var50) & var49 != var50)) # label(non_clause).  [assumption].
40 (exists var51 exists var52 (P(var51,var52) & var51 != var52)) # label(non_clause).  [assumption].
41 (exists var53 exists var54 (-P(var53,var54) & var53 != var54)) # label(non_clause).  [assumption].
42 (exists var55 SimpleLoopCurve(var55)) # label(non_clause).  [assumption].
43 (exists var56 -SimpleLoopCurve(var56)) # label(non_clause).  [assumption].
44 (exists var57 Point(var57)) # label(non_clause).  [assumption].
45 (exists var58 -Point(var58)) # label(non_clause).  [assumption].
46 (exists var59 exists var60 (Inc(var59,var60) & var59 != var60)) # label(non_clause).  [assumption].
47 (exists var61 exists var62 (-Inc(var61,var62) & var61 != var62)) # label(non_clause).  [assumption].
48 (exists var63 SimpleCurveSegment(var63)) # label(non_clause).  [assumption].
49 (exists var64 -SimpleCurveSegment(var64)) # label(non_clause).  [assumption].
50 (exists var65 MinDim(var65)) # label(non_clause).  [assumption].
51 (exists var66 -MinDim(var66)) # label(non_clause).  [assumption].
52 (exists var67 Simple_S(var67)) # label(non_clause).  [assumption].
53 (exists var68 -Simple_S(var68)) # label(non_clause).  [assumption].
54 (exists var69 exists var70 (geq(var69,var70) & var69 != var70)) # label(non_clause).  [assumption].
55 (exists var71 exists var72 (-geq(var71,var72) & var71 != var72)) # label(non_clause).  [assumption].
56 (exists var73 exists var74 (EqDim(var73,var74) & var73 != var74)) # label(non_clause).  [assumption].
57 (exists var75 exists var76 (-EqDim(var75,var76) & var75 != var76)) # label(non_clause).  [assumption].
58 (exists var77 exists var78 (PP(var77,var78) & var77 != var78)) # label(non_clause).  [assumption].
59 (exists var79 exists var80 (-PP(var79,var80) & var79 != var80)) # label(non_clause).  [assumption].
60 (exists var81 Branched_S(var81)) # label(non_clause).  [assumption].
61 (exists var82 -Branched_S(var82)) # label(non_clause).  [assumption].
62 (exists var83 AtomicCurveSegment(var83)) # label(non_clause).  [assumption].
63 (exists var84 -AtomicCurveSegment(var84)) # label(non_clause).  [assumption].
64 (exists var85 ZEX(var85)) # label(non_clause).  [assumption].
65 (exists var86 -ZEX(var86)) # label(non_clause).  [assumption].
66 (exists var87 AtomicCurve(var87)) # label(non_clause).  [assumption].
67 (exists var88 -AtomicCurve(var88)) # label(non_clause).  [assumption].
68 (exists var89 exists var90 (Endpoint(var89,var90) & var89 != var90)) # label(non_clause).  [assumption].
69 (exists var91 exists var92 (-Endpoint(var91,var92) & var91 != var92)) # label(non_clause).  [assumption].
70 (exists var93 exists var94 (leq(var93,var94) & var93 != var94)) # label(non_clause).  [assumption].
71 (exists var95 exists var96 (-leq(var95,var96) & var95 != var96)) # label(non_clause).  [assumption].
72 (exists var97 PointRegion(var97)) # label(non_clause).  [assumption].
73 (exists var98 -PointRegion(var98)) # label(non_clause).  [assumption].
74 (exists var99 Connected_S(var99)) # label(non_clause).  [assumption].
75 (exists var100 -Connected_S(var100)) # label(non_clause).  [assumption].
76 (all x all y (SC(x,y) -> C(x,y))) # label(non_clause).  [assumption].
77 (all x all y (SC(x,y) -> -(exists z (Cont(z,x) & P(z,y))))) # label(non_clause).  [assumption].
78 (all x all y (SC(x,y) -> -(exists z (P(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
79 (all x all y (C(x,y) & (all z (-Cont(z,x) | -Cont(z,y) | -P(z,x) & -P(z,y))) -> SC(x,y))) # label(non_clause).  [assumption].
80 (all x -SC(x,x)) # label(non_clause).  [assumption].
81 (all x all y (SC(x,y) -> SC(y,x))) # label(non_clause).  [assumption].
82 (all x all y (SC(x,y) -> (exists z (lt(z,x) & lt(z,y) & Cont(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
83 (all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> leq(z,x) & -EqDim(z,x) & leq(z,y) & -EqDim(z,y))))) # label(non_clause).  [assumption].
84 (all x all y (EqDim(x,y) <-> leq(x,y) & leq(y,x))) # label(non_clause).  [assumption].
85 (all x all y (leq(x,y) -> S(x))) # label(non_clause).  [assumption].
86 (all x all y (leq(x,y) -> S(y))) # label(non_clause).  [assumption].
87 (all x (ZEX(x) -> S(x))) # label(non_clause).  [assumption].
88 (all x (S(x) -> leq(x,x))) # label(non_clause).  [assumption].
89 (all x all y all z (leq(x,y) & leq(y,z) -> leq(x,z))) # label(non_clause).  [assumption].
90 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
91 (all x all y (ZEX(x) & S(y) -> leq(x,y))) # label(non_clause).  [assumption].
92 (all x all y (Cont(x,y) -> leq(x,y))) # label(non_clause).  [assumption].
93 (exists x MinDim(x)) # label(non_clause).  [assumption].
94 (all x (MaxDim(x) <-> S(x) & -ZEX(x) & (all y (S(y) -> leq(y,x))))) # label(non_clause).  [assumption].
95 (all x (MinDim(x) <-> S(x) & -ZEX(x) & (all y (S(y) & -ZEX(y) -> leq(x,y))))) # label(non_clause).  [assumption].
96 (all x (S(x) & -ZEX(x) <-> Cont(x,x))) # label(non_clause).  [assumption].
97 (all x all y (Cont(x,y) & Cont(y,x) -> x = y)) # label(non_clause).  [assumption].
98 (all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))) # label(non_clause).  [assumption].
99 (all x all y (ZEX(x) -> S(x) & -Cont(y,x) & -Cont(x,y))) # label(non_clause).  [assumption].
100 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
101 (all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))) # label(non_clause).  [assumption].
102 (all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
103 (all x -Inc(x,x)) # label(non_clause).  [assumption].
104 (all x all y (Inc(x,y) -> Inc(y,x))) # label(non_clause).  [assumption].
105 (all x all y (EqDim(x,y) -> -Inc(x,y))) # label(non_clause).  [assumption].
106 (all x all y (Inc(x,y) -> lt(x,y) | lt(y,x))) # label(non_clause).  [assumption].
107 (all x all y (Cont(x,y) & lt(x,y) -> Inc(x,y))) # label(non_clause).  [assumption].
108 (all x all y all z (Inc(x,y) & P(y,z) -> Inc(x,z))) # label(non_clause).  [assumption].
109 (all x all y (Inc(x,y) <-> (exists z (leq(z,x) & -EqDim(z,x) & Cont(z,x) & P(z,y))) | (exists z (leq(z,y) & -EqDim(z,y) & Cont(z,y) & P(z,x))))) # label(non_clause).  [assumption].
110 (all x (S(x) & -ZEX(x) -> PO(x,x))) # label(non_clause).  [assumption].
111 (all x all y (PO(x,y) -> PO(y,x))) # label(non_clause).  [assumption].
112 (all x all y (PO(x,y) -> EqDim(x,y))) # label(non_clause).  [assumption].
113 (all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))) # label(non_clause).  [assumption].
114 (all x (Max(x) <-> S(x) & -ZEX(x) & (all y -PP(x,y)))) # label(non_clause).  [assumption].
115 (all x (Min(x) <-> S(x) & -ZEX(x) & (all y -PP(y,x)))) # label(non_clause).  [assumption].
116 (all x all y (PP(x,y) <-> P(x,y) & x != y)) # label(non_clause).  [assumption].
117 (all x all y (BCont(x,y) -> Cont(x,y) & -EqDim(x,y))) # label(non_clause).  [assumption].
118 (all x all y all v all z (SC(x,y) & Min(x) & P(x,v) & Cont(y,v) & Cont(z,x) & Cont(z,y) -> BCont(z,x))) # label(non_clause).  [assumption].
119 (all x all y all z all v (SC(x,y) & P(x,v) & P(y,v) & Cont(z,x) & Cont(z,y) & Covers(v,z) -> -BCont(z,v))) # label(non_clause).  [assumption].
120 (all x all y all z (BCont(x,y) & P(y,z) & (all v all w (P(v,z) & -PO(v,y) & P(w,x) -> -Cont(w,v))) -> BCont(x,z))) # label(non_clause).  [assumption].
121 (all x all y all z (BCont(x,y) & Cont(z,x) -> BCont(z,y))) # label(non_clause).  [assumption].
122 (all x all y (Covers(x,y) <-> lt(y,x) & (all z (S(z) -> -(lt(y,z) & lt(z,x)))))) # label(non_clause).  [assumption].
123 (all x all y (gt(x,y) <-> lt(y,x))) # label(non_clause).  [assumption].
124 (all x all y (geq(x,y) <-> leq(y,x))) # label(non_clause).  [assumption].
125 (all x all y (lt(x,y) <-> leq(x,y) & -EqDim(x,y))) # label(non_clause).  [assumption].
126 (all x (Closed(x) <-> (all y -BCont(y,x)))) # label(non_clause).  [assumption].
127 (all x (AtomicCurveSegment(x) <-> SimpleCurveSegment(x) & Atomic_S(x))) # label(non_clause).  [assumption].
128 (all x (Atomic_S(x) <-> Simple_S(x) & Min(x))) # label(non_clause).  [assumption].
129 (all x (Simple_S(x) <-> Connected_S(x) & -Branched_S(x))) # label(non_clause).  [assumption].
130 (all x (Branched_S(x) <-> Connected_S(x) & (exists p exists q exists r exists s (PP(p,x) & PP(q,x) & PP(r,x) & -PO(p,q) & -PO(p,r) & -PO(q,r) & Covers(p,s) & Covers(q,s) & Covers(r,s) & Cont(s,p) & Cont(s,q) & Cont(s,r))))) # label(non_clause).  [assumption].
131 (all x (Connected_S(x) <-> S(x) & (all y (PP(y,x) -> SC(y,difference(x,y)))))) # label(non_clause).  [assumption].
132 (all x all y (S(x) & S(y) & -C(x,y) <-> ZEX(intersection(x,y)))) # label(non_clause).  [assumption].
133 (all x all y (S(x) & S(y) & -ZEX(intersection(x,y)) -> Cont(intersection(x,y),x))) # label(non_clause).  [assumption].
134 (all x all y all z (Cont(z,x) & Cont(z,y) -> leq(z,intersection(x,y)))) # label(non_clause).  [assumption].
135 (all x all y all z (Cont(z,x) & Cont(z,y) & EqDim(z,intersection(x,y)) <-> P(z,intersection(x,y)))) # label(non_clause).  [assumption].
136 (all x all y (S(x) & S(y) & -ZEX(difference(x,y)) -> EqDim(x,difference(x,y)))) # label(non_clause).  [assumption].
137 (all x all y (lt(y,x) -> x = difference(x,y))) # label(non_clause).  [assumption].
138 (all x all y all z (leq(x,y) & Cont(z,x) & lt(intersection(z,y),z) -> Cont(z,difference(x,y)))) # label(non_clause).  [assumption].
139 (all x all y all z (leq(x,y) & Cont(z,difference(x,y)) -> Cont(z,x))) # label(non_clause).  [assumption].
140 (all x all y all z (leq(x,y) & P(z,difference(x,y)) -> lt(intersection(z,y),z))) # label(non_clause).  [assumption].
141 (all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))) # label(non_clause).  [assumption].
142 (all x (SimpleCurveSegment(x) <-> Curve(x) & Simple_S(x) & (exists p1 exists p2 (p1 != p2 & BCont(p1,x) & BCont(p2,x))))) # label(non_clause).  [assumption].
143 (all x (Curve(x) <-> -ZEX(x) & -MinDim(x) & (all y (MinDim(y) <-> Covers(x,y))))) # label(non_clause).  [assumption].
144 (all x (AtomicLoopCurve(x) <-> SimpleLoopCurve(x) & Atomic_S(x))) # label(non_clause).  [assumption].
145 (all x (SimpleLoopCurve(x) <-> Curve(x) & Simple_S(x) & (all y (PointRegion(y) -> -BCont(y,x))))) # label(non_clause).  [assumption].
146 (all x (PointRegion(x) <-> MinDim(x))) # label(non_clause).  [assumption].
147 (all x (AtomicCurve(x) <-> AtomicCurveSegment(x) | AtomicLoopCurve(x) | AtomicRayCurve(x))) # label(non_clause).  [assumption].
148 (all x (AtomicRayCurve(x) <-> Curve(x) & (all y -PP(y,x)) & (exists y (Endpoint(y,x) & (all z (Point(z) & Cont(z,x) -> y = z)))))) # label(non_clause).  [assumption].
149 (all x all y (Endpoint(x,y) <-> Point(x) & Curve(y) & BCont(x,y))) # label(non_clause).  [assumption].
150 (all x (Point(x) <-> MinDim(x) & (all y (Cont(y,x) -> y = x)))) # label(non_clause).  [assumption].

============================== end of process non-clausal formulas ===

============================== CLAUSES FOR SEARCH ====================

formulas(mace4_clauses).
-AtomicCurve(x) | AtomicLoopCurve(x) | -Cont(y,x) | y = x | Point(y).
-AtomicCurve(x) | AtomicLoopCurve(x) | -Cont(y,x) | y = x | BCont(y,x).
-AtomicCurve(x) | -Point(y) | -Point(z) | -Point(u) | -Cont(y,x) | -Cont(z,x) | -Cont(u,x) | z = y | u = y | u = z.
-AtomicCurve(x) | -Point(y) | -Point(z) | z = y | -Cont(y,x) | -Cont(z,x) | -Closed(x).
-Curve(x) | P(f1(x),x).
-Curve(x) | AtomicCurve(f1(x)).
-Point(x) | -Curve(y) | AtomicCurveSegment(y) | -BCont(x,y) | AtomicCurve(f2(x,y)).
-Point(x) | -Curve(y) | AtomicCurveSegment(y) | -BCont(x,y) | P(f2(x,y),y).
-Point(x) | -Curve(y) | AtomicCurveSegment(y) | -BCont(x,y) | BCont(x,f2(x,y)).
-Point(x) | -Curve(y) | AtomicCurveSegment(y) | -BCont(x,y) | -P(z,y) | -AtomicCurve(z) | -BCont(x,z) | z = f2(x,y).
-Point(x) | -Curve(y) | AtomicCurveSegment(y) | BCont(x,y) | -AtomicCurve(z) | -P(z,y) | -BCont(x,z) | P(f3(x,y,z),y).
-Point(x) | -Curve(y) | AtomicCurveSegment(y) | BCont(x,y) | -AtomicCurve(z) | -P(z,y) | -BCont(x,z) | AtomicCurve(f3(x,y,z)).
-Point(x) | -Curve(y) | AtomicCurveSegment(y) | BCont(x,y) | -AtomicCurve(z) | -P(z,y) | -BCont(x,z) | BCont(x,f3(x,y,z)).
-Point(x) | -Curve(y) | AtomicCurveSegment(y) | BCont(x,y) | -AtomicCurve(z) | -P(z,y) | -BCont(x,z) | f3(x,y,z) != z.
Closed(c1).
-Closed(c2).
AtomicLoopCurve(c3).
-AtomicLoopCurve(c4).
BCont(c5,c6).
c6 != c5.
-BCont(c7,c8).
c8 != c7.
gt(c9,c10).
c10 != c9.
-gt(c11,c12).
c12 != c11.
S(c13).
-S(c14).
Covers(c15,c16).
c16 != c15.
-Covers(c17,c18).
c18 != c17.
MaxDim(c19).
-MaxDim(c20).
Atomic_S(c21).
-Atomic_S(c22).
Cont(c23,c24).
c24 != c23.
-Cont(c25,c26).
c26 != c25.
C(c27,c28).
c28 != c27.
-C(c29,c30).
c30 != c29.
Curve(c31).
-Curve(c32).
PO(c33,c34).
c34 != c33.
-PO(c35,c36).
c36 != c35.
Max(c37).
-Max(c38).
lt(c39,c40).
c40 != c39.
-lt(c41,c42).
c42 != c41.
AtomicRayCurve(c43).
-AtomicRayCurve(c44).
Min(c45).
-Min(c46).
SC(c47,c48).
c48 != c47.
-SC(c49,c50).
c50 != c49.
P(c51,c52).
c52 != c51.
-P(c53,c54).
c54 != c53.
SimpleLoopCurve(c55).
-SimpleLoopCurve(c56).
Point(c57).
-Point(c58).
Inc(c59,c60).
c60 != c59.
-Inc(c61,c62).
c62 != c61.
SimpleCurveSegment(c63).
-SimpleCurveSegment(c64).
MinDim(c65).
-MinDim(c66).
Simple_S(c67).
-Simple_S(c68).
geq(c69,c70).
c70 != c69.
-geq(c71,c72).
c72 != c71.
EqDim(c73,c74).
c74 != c73.
-EqDim(c75,c76).
c76 != c75.
PP(c77,c78).
c78 != c77.
-PP(c79,c80).
c80 != c79.
Branched_S(c81).
-Branched_S(c82).
AtomicCurveSegment(c83).
-AtomicCurveSegment(c84).
ZEX(c85).
-ZEX(c86).
AtomicCurve(c87).
-AtomicCurve(c88).
Endpoint(c89,c90).
c90 != c89.
-Endpoint(c91,c92).
c92 != c91.
leq(c93,c94).
c94 != c93.
-leq(c95,c96).
c96 != c95.
PointRegion(c97).
-PointRegion(c98).
Connected_S(c99).
-Connected_S(c100).
-SC(x,y) | C(x,y).
-SC(x,y) | -Cont(z,x) | -P(z,y).
-SC(x,y) | -P(z,x) | -Cont(z,y).
-C(x,y) | Cont(f4(x,y),x) | SC(x,y).
-C(x,y) | Cont(f4(x,y),y) | SC(x,y).
-C(x,y) | P(f4(x,y),x) | P(f4(x,y),y) | SC(x,y).
-SC(x,x).
-SC(x,y) | SC(y,x).
-SC(x,y) | lt(f5(x,y),x).
-SC(x,y) | lt(f5(x,y),y).
-SC(x,y) | Cont(f5(x,y),x).
-SC(x,y) | Cont(f5(x,y),y).
-SC(x,y) | Cont(f6(x,y),x).
-SC(x,y) | Cont(f6(x,y),y).
-SC(x,y) | -Cont(z,x) | -Cont(z,y) | leq(z,x).
-SC(x,y) | -Cont(z,x) | -Cont(z,y) | -EqDim(z,x).
-SC(x,y) | -Cont(z,x) | -Cont(z,y) | leq(z,y).
-SC(x,y) | -Cont(z,x) | -Cont(z,y) | -EqDim(z,y).
SC(x,y) | -Cont(z,x) | -Cont(z,y) | Cont(f7(x,y),x).
SC(x,y) | -Cont(z,x) | -Cont(z,y) | Cont(f7(x,y),y).
SC(x,y) | -Cont(z,x) | -Cont(z,y) | -leq(f7(x,y),x) | EqDim(f7(x,y),x) | -leq(f7(x,y),y) | EqDim(f7(x,y),y).
-EqDim(x,y) | leq(x,y).
-EqDim(x,y) | leq(y,x).
EqDim(x,y) | -leq(x,y) | -leq(y,x).
-leq(x,y) | S(x).
-leq(x,y) | S(y).
-ZEX(x) | S(x).
-S(x) | leq(x,x).
-leq(x,y) | -leq(y,z) | leq(x,z).
-ZEX(x) | -ZEX(y) | y = x.
-ZEX(x) | -S(y) | leq(x,y).
-Cont(x,y) | leq(x,y).
MinDim(c101).
-MaxDim(x) | S(x).
-MaxDim(x) | -ZEX(x).
-MaxDim(x) | -S(y) | leq(y,x).
MaxDim(x) | -S(x) | ZEX(x) | S(f8(x)).
MaxDim(x) | -S(x) | ZEX(x) | -leq(f8(x),x).
-MinDim(x) | S(x).
-MinDim(x) | -ZEX(x).
-MinDim(x) | -S(y) | ZEX(y) | leq(x,y).
MinDim(x) | -S(x) | ZEX(x) | S(f9(x)).
MinDim(x) | -S(x) | ZEX(x) | -ZEX(f9(x)).
MinDim(x) | -S(x) | ZEX(x) | -leq(x,f9(x)).
-S(x) | ZEX(x) | Cont(x,x).
S(x) | -Cont(x,x).
-ZEX(x) | -Cont(x,x).
-Cont(x,y) | -Cont(y,x) | y = x.
-Cont(x,y) | -Cont(y,z) | Cont(x,z).
-ZEX(x) | S(x).
-ZEX(x) | -Cont(y,x).
-ZEX(x) | -Cont(x,y).
-ZEX(x) | -ZEX(y) | y = x.
-P(x,y) | Cont(x,y).
-P(x,y) | EqDim(x,y).
P(x,y) | -Cont(x,y) | -EqDim(x,y).
-C(x,y) | Cont(f10(x,y),x).
-C(x,y) | Cont(f10(x,y),y).
C(x,y) | -Cont(z,x) | -Cont(z,y).
-Inc(x,x).
-Inc(x,y) | Inc(y,x).
-EqDim(x,y) | -Inc(x,y).
-Inc(x,y) | lt(x,y) | lt(y,x).
-Cont(x,y) | -lt(x,y) | Inc(x,y).
-Inc(x,y) | -P(y,z) | Inc(x,z).
-Inc(x,y) | leq(f11(x,y),x) | leq(f12(x,y),y).
-Inc(x,y) | leq(f11(x,y),x) | -EqDim(f12(x,y),y).
-Inc(x,y) | leq(f11(x,y),x) | Cont(f12(x,y),y).
-Inc(x,y) | leq(f11(x,y),x) | P(f12(x,y),x).
-Inc(x,y) | -EqDim(f11(x,y),x) | leq(f12(x,y),y).
-Inc(x,y) | -EqDim(f11(x,y),x) | -EqDim(f12(x,y),y).
-Inc(x,y) | -EqDim(f11(x,y),x) | Cont(f12(x,y),y).
-Inc(x,y) | -EqDim(f11(x,y),x) | P(f12(x,y),x).
-Inc(x,y) | Cont(f11(x,y),x) | leq(f12(x,y),y).
-Inc(x,y) | Cont(f11(x,y),x) | -EqDim(f12(x,y),y).
-Inc(x,y) | Cont(f11(x,y),x) | Cont(f12(x,y),y).
-Inc(x,y) | Cont(f11(x,y),x) | P(f12(x,y),x).
-Inc(x,y) | P(f11(x,y),y) | leq(f12(x,y),y).
-Inc(x,y) | P(f11(x,y),y) | -EqDim(f12(x,y),y).
-Inc(x,y) | P(f11(x,y),y) | Cont(f12(x,y),y).
-Inc(x,y) | P(f11(x,y),y) | P(f12(x,y),x).
Inc(x,y) | -leq(z,x) | EqDim(z,x) | -Cont(z,x) | -P(z,y).
Inc(x,y) | -leq(z,y) | EqDim(z,y) | -Cont(z,y) | -P(z,x).
-S(x) | ZEX(x) | PO(x,x).
-PO(x,y) | PO(y,x).
-PO(x,y) | EqDim(x,y).
-PO(x,y) | P(f13(x,y),x).
-PO(x,y) | P(f13(x,y),y).
PO(x,y) | -P(z,x) | -P(z,y).
-Max(x) | S(x).
-Max(x) | -ZEX(x).
-Max(x) | -PP(x,y).
Max(x) | -S(x) | ZEX(x) | PP(x,f14(x)).
-Min(x) | S(x).
-Min(x) | -ZEX(x).
-Min(x) | -PP(y,x).
Min(x) | -S(x) | ZEX(x) | PP(f15(x),x).
-PP(x,y) | P(x,y).
-PP(x,y) | y != x.
PP(x,y) | -P(x,y) | y = x.
-BCont(x,y) | Cont(x,y).
-BCont(x,y) | -EqDim(x,y).
-SC(x,y) | -Min(x) | -P(x,z) | -Cont(y,z) | -Cont(u,x) | -Cont(u,y) | BCont(u,x).
-SC(x,y) | -P(x,z) | -P(y,z) | -Cont(u,x) | -Cont(u,y) | -Covers(z,u) | -BCont(u,z).
-BCont(x,y) | -P(y,z) | P(f16(x,y,z),z) | BCont(x,z).
-BCont(x,y) | -P(y,z) | -PO(f16(x,y,z),y) | BCont(x,z).
-BCont(x,y) | -P(y,z) | P(f17(x,y,z),x) | BCont(x,z).
-BCont(x,y) | -P(y,z) | Cont(f17(x,y,z),f16(x,y,z)) | BCont(x,z).
-BCont(x,y) | -Cont(z,x) | BCont(z,y).
-Covers(x,y) | lt(y,x).
-Covers(x,y) | -S(z) | -lt(y,z) | -lt(z,x).
Covers(x,y) | -lt(y,x) | S(f18(x,y)).
Covers(x,y) | -lt(y,x) | lt(y,f18(x,y)).
Covers(x,y) | -lt(y,x) | lt(f18(x,y),x).
-gt(x,y) | lt(y,x).
gt(x,y) | -lt(y,x).
-geq(x,y) | leq(y,x).
geq(x,y) | -leq(y,x).
-lt(x,y) | leq(x,y).
-lt(x,y) | -EqDim(x,y).
lt(x,y) | -leq(x,y) | EqDim(x,y).
-Closed(x) | -BCont(y,x).
Closed(x) | BCont(f19(x),x).
-AtomicCurveSegment(x) | SimpleCurveSegment(x).
-AtomicCurveSegment(x) | Atomic_S(x).
AtomicCurveSegment(x) | -SimpleCurveSegment(x) | -Atomic_S(x).
-Atomic_S(x) | Simple_S(x).
-Atomic_S(x) | Min(x).
Atomic_S(x) | -Simple_S(x) | -Min(x).
-Simple_S(x) | Connected_S(x).
-Simple_S(x) | -Branched_S(x).
Simple_S(x) | -Connected_S(x) | Branched_S(x).
-Branched_S(x) | Connected_S(x).
-Branched_S(x) | PP(f20(x),x).
-Branched_S(x) | PP(f21(x),x).
-Branched_S(x) | PP(f22(x),x).
-Branched_S(x) | -PO(f20(x),f21(x)).
-Branched_S(x) | -PO(f20(x),f22(x)).
-Branched_S(x) | -PO(f21(x),f22(x)).
-Branched_S(x) | Covers(f20(x),f23(x)).
-Branched_S(x) | Covers(f21(x),f23(x)).
-Branched_S(x) | Covers(f22(x),f23(x)).
-Branched_S(x) | Cont(f23(x),f20(x)).
-Branched_S(x) | Cont(f23(x),f21(x)).
-Branched_S(x) | Cont(f23(x),f22(x)).
Branched_S(x) | -Connected_S(x) | -PP(y,x) | -PP(z,x) | -PP(u,x) | PO(y,z) | PO(y,u) | PO(z,u) | -Covers(y,w) | -Covers(z,w) | -Covers(u,w) | -Cont(w,y) | -Cont(w,z) | -Cont(w,u).
-Connected_S(x) | S(x).
-Connected_S(x) | -PP(y,x) | SC(y,difference(x,y)).
Connected_S(x) | -S(x) | PP(f24(x),x).
Connected_S(x) | -S(x) | -SC(f24(x),difference(x,f24(x))).
-S(x) | -S(y) | C(x,y) | ZEX(intersection(x,y)).
S(x) | -ZEX(intersection(x,y)).
S(x) | -ZEX(intersection(y,x)).
-C(x,y) | -ZEX(intersection(x,y)).
-S(x) | -S(y) | ZEX(intersection(x,y)) | Cont(intersection(x,y),x).
-Cont(x,y) | -Cont(x,z) | leq(x,intersection(y,z)).
-Cont(x,y) | -Cont(x,z) | -EqDim(x,intersection(y,z)) | P(x,intersection(y,z)).
Cont(x,y) | -P(x,intersection(y,z)).
Cont(x,y) | -P(x,intersection(z,y)).
EqDim(x,intersection(y,z)) | -P(x,intersection(y,z)).
-S(x) | -S(y) | ZEX(difference(x,y)) | EqDim(x,difference(x,y)).
-lt(x,y) | difference(y,x) = y.
-leq(x,y) | -Cont(z,x) | -lt(intersection(z,y),z) | Cont(z,difference(x,y)).
-leq(x,y) | -Cont(z,difference(x,y)) | Cont(z,x).
-leq(x,y) | -P(z,difference(x,y)) | lt(intersection(z,y),z).
-ZEX(difference(x,y)) | ZEX(x) | Cont(x,y).
ZEX(difference(x,y)) | -ZEX(x).
ZEX(difference(x,y)) | -Cont(x,y).
-SimpleCurveSegment(x) | Curve(x).
-SimpleCurveSegment(x) | Simple_S(x).
-SimpleCurveSegment(x) | f26(x) != f25(x).
-SimpleCurveSegment(x) | BCont(f25(x),x).
-SimpleCurveSegment(x) | BCont(f26(x),x).
SimpleCurveSegment(x) | -Curve(x) | -Simple_S(x) | y = z | -BCont(z,x) | -BCont(y,x).
-Curve(x) | -ZEX(x).
-Curve(x) | -MinDim(x).
-Curve(x) | -MinDim(y) | Covers(x,y).
-Curve(x) | MinDim(y) | -Covers(x,y).
Curve(x) | ZEX(x) | MinDim(x) | MinDim(f27(x)) | Covers(x,f27(x)).
Curve(x) | ZEX(x) | MinDim(x) | -MinDim(f27(x)) | -Covers(x,f27(x)).
-AtomicLoopCurve(x) | SimpleLoopCurve(x).
-AtomicLoopCurve(x) | Atomic_S(x).
AtomicLoopCurve(x) | -SimpleLoopCurve(x) | -Atomic_S(x).
-SimpleLoopCurve(x) | Curve(x).
-SimpleLoopCurve(x) | Simple_S(x).
-SimpleLoopCurve(x) | -PointRegion(y) | -BCont(y,x).
SimpleLoopCurve(x) | -Curve(x) | -Simple_S(x) | PointRegion(f28(x)).
SimpleLoopCurve(x) | -Curve(x) | -Simple_S(x) | BCont(f28(x),x).
-PointRegion(x) | MinDim(x).
PointRegion(x) | -MinDim(x).
-AtomicCurve(x) | AtomicCurveSegment(x) | AtomicLoopCurve(x) | AtomicRayCurve(x).
AtomicCurve(x) | -AtomicCurveSegment(x).
AtomicCurve(x) | -AtomicLoopCurve(x).
AtomicCurve(x) | -AtomicRayCurve(x).
-AtomicRayCurve(x) | Curve(x).
-AtomicRayCurve(x) | -PP(y,x).
-AtomicRayCurve(x) | Endpoint(f29(x),x).
-AtomicRayCurve(x) | -Point(y) | -Cont(y,x) | y = f29(x).
AtomicRayCurve(x) | -Curve(x) | PP(f30(x),x) | -Endpoint(y,x) | Point(f31(x,y)).
AtomicRayCurve(x) | -Curve(x) | PP(f30(x),x) | -Endpoint(y,x) | Cont(f31(x,y),x).
AtomicRayCurve(x) | -Curve(x) | PP(f30(x),x) | -Endpoint(y,x) | f31(x,y) != y.
-Endpoint(x,y) | Point(x).
-Endpoint(x,y) | Curve(y).
-Endpoint(x,y) | BCont(x,y).
Endpoint(x,y) | -Point(x) | -Curve(y) | -BCont(x,y).
-Point(x) | MinDim(x).
-Point(x) | -Cont(y,x) | y = x.
Point(x) | -MinDim(x) | Cont(f32(x),x).
Point(x) | -MinDim(x) | f32(x) != x.
end_of_list.

============================== end of clauses for search =============

% The maximum domain element in the input is 0.

============================== DOMAIN SIZE 2 =========================

=== Mace4 starting on domain size 2. ===

============================== STATISTICS ============================

For domain size 2.

Current CPU time: 0.00 seconds (total CPU time: 0.01 seconds).
Ground clauses: seen=1043, kept=883.
Selections=3, assignments=6, propagations=212, current_models=0.
Rewrite_terms=70, rewrite_bools=1616, indexes=34.
Rules_from_neg_clauses=54, cross_offs=54.

============================== end of statistics =====================

============================== DOMAIN SIZE 3 =========================

=== Mace4 starting on domain size 3. ===

============================== STATISTICS ============================

For domain size 3.

Current CPU time: 0.00 seconds (total CPU time: 0.01 seconds).
Ground clauses: seen=2741, kept=2279.
Selections=33, assignments=97, propagations=1367, current_models=0.
Rewrite_terms=304, rewrite_bools=18172, indexes=176.
Rules_from_neg_clauses=135, cross_offs=368.

============================== end of statistics =====================

============================== DOMAIN SIZE 4 =========================

=== Mace4 starting on domain size 4. ===

============================== STATISTICS ============================

For domain size 4.

Current CPU time: 0.00 seconds (total CPU time: 0.08 seconds).
Ground clauses: seen=6209, kept=5065.
Selections=97, assignments=371, propagations=20422, current_models=0.
Rewrite_terms=28120, rewrite_bools=351294, indexes=2102.
Rules_from_neg_clauses=1849, cross_offs=8700.

============================== end of statistics =====================

============================== DOMAIN SIZE 5 =========================

=== Mace4 starting on domain size 5. ===

============================== STATISTICS ============================

For domain size 5.

Current CPU time: 0.00 seconds (total CPU time: 0.45 seconds).
Ground clauses: seen=12671, kept=10201.
Selections=1115, assignments=5489, propagations=85337, current_models=0.
Rewrite_terms=326029, rewrite_bools=1628064, indexes=10686.
Rules_from_neg_clauses=14502, cross_offs=72111.

============================== end of statistics =====================

============================== DOMAIN SIZE 6 =========================

=== Mace4 starting on domain size 6. ===

====== Domain 6 terminated by max_seconds_per. ======

============================== STATISTICS ============================

For domain size 6.

Current CPU time: 0.00 seconds (total CPU time: 60.47 seconds).
Ground clauses: seen=23903, kept=19127.
Selections=372608, assignments=2235537, propagations=5859883, current_models=0.
Rewrite_terms=39947754, rewrite_bools=75535775, indexes=5339576.
Rules_from_neg_clauses=510029, cross_offs=3881964.

============================== end of statistics =====================

============================== DOMAIN SIZE 7 =========================

=== Mace4 starting on domain size 7. ===

====== Domain 7 terminated by max_seconds_per. ======

============================== STATISTICS ============================

For domain size 7.

Current CPU time: 0.00 seconds (total CPU time: 120.50 seconds).
Ground clauses: seen=42353, kept=33883.
Selections=111944, assignments=783388, propagations=1720344, current_models=0.
Rewrite_terms=2968805, rewrite_bools=10152529, indexes=311908.
Rules_from_neg_clauses=319072, cross_offs=3043993.

============================== end of statistics =====================

============================== DOMAIN SIZE 8 =========================

=== Mace4 starting on domain size 8. ===

====== Domain 8 terminated by max_seconds_per. ======

============================== STATISTICS ============================

For domain size 8.

Current CPU time: 0.00 seconds (total CPU time: 180.53 seconds).
Ground clauses: seen=71261, kept=57229.
Selections=47846, assignments=382218, propagations=774205, current_models=0.
Rewrite_terms=3387010, rewrite_bools=4908467, indexes=148132.
Rules_from_neg_clauses=223254, cross_offs=1783234.

============================== end of statistics =====================

============================== DOMAIN SIZE 9 =========================

=== Mace4 starting on domain size 9. ===

====== Domain 9 terminated by max_seconds_per. ======

============================== STATISTICS ============================

For domain size 9.

Current CPU time: 0.00 seconds (total CPU time: 240.61 seconds).
Ground clauses: seen=114779, kept=92765.
Selections=22885, assignments=205309, propagations=1211946, current_models=0.
Rewrite_terms=10753988, rewrite_bools=15042649, indexes=409709.
Rules_from_neg_clauses=274335, cross_offs=2309980.

============================== end of statistics =====================

============================== DOMAIN SIZE 10 ========================

=== Mace4 starting on domain size 10. ===

====== Domain 10 terminated by max_seconds_per. ======

============================== STATISTICS ============================

For domain size 10.

Current CPU time: 0.00 seconds (total CPU time: 300.76 seconds).
Ground clauses: seen=178091, kept=145051.
Selections=174260, assignments=1741428, propagations=1020669, current_models=0.
Rewrite_terms=8452925, rewrite_bools=4852804, indexes=762782.
Rules_from_neg_clauses=149787, cross_offs=1320532.

============================== end of statistics =====================

============================== DOMAIN SIZE 11 ========================

=== Mace4 starting on domain size 11. ===

====== Domain 11 terminated by max_seconds_per. ======

============================== STATISTICS ============================

For domain size 11.

Current CPU time: 0.00 seconds (total CPU time: 360.91 seconds).
Ground clauses: seen=267533, kept=219727.
Selections=26751, assignments=292794, propagations=826793, current_models=0.
Rewrite_terms=8492480, rewrite_bools=19083963, indexes=717054.
Rules_from_neg_clauses=71019, cross_offs=1310336.

============================== end of statistics =====================

============================== DOMAIN SIZE 12 ========================

=== Mace4 starting on domain size 12. ===

====== Domain 12 terminated by max_seconds_per. ======

============================== STATISTICS ============================

For domain size 12.

Current CPU time: 0.00 seconds (total CPU time: 421.20 seconds).
Ground clauses: seen=390713, kept=323633.
Selections=3038, assignments=32469, propagations=75058, current_models=0.
Rewrite_terms=1060091, rewrite_bools=1799018, indexes=98740.
Rules_from_neg_clauses=14326, cross_offs=163411.

============================== end of statistics =====================

============================== DOMAIN SIZE 13 ========================

=== Mace4 starting on domain size 13. ===

====== Domain 13 terminated by max_seconds_per. ======

============================== STATISTICS ============================

For domain size 13.

Current CPU time: 0.00 seconds (total CPU time: 481.56 seconds).
Ground clauses: seen=556631, kept=464929.
Selections=10368, assignments=132935, propagations=394897, current_models=0.
Rewrite_terms=8039356, rewrite_bools=11299872, indexes=1049461.
Rules_from_neg_clauses=18399, cross_offs=499229.

============================== end of statistics =====================

============================== DOMAIN SIZE 14 ========================

=== Mace4 starting on domain size 14. ===

============================== STATISTICS ============================

For domain size 14.

Current CPU time: 0.00 seconds (total CPU time: 496.76 seconds).
Ground clauses: seen=775799, kept=653215.
Selections=0, assignments=0, propagations=42, current_models=0.
Rewrite_terms=0, rewrite_bools=532, indexes=0.
Rules_from_neg_clauses=0, cross_offs=0.

============================== end of statistics =====================

------ process 23956 exit (max_megs_no) ------

User_CPU=496.76, System_CPU=2.98, Wall_clock=516.

Exiting with failure.

Process 23956 exit (max_megs_no) Thu Feb 25 11:35:13 2021
The process finished Thu Feb 25 11:35:13 2021

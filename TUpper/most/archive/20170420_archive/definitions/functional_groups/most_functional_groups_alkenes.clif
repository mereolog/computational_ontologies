/*******************************************************************************
* Copyright (c) University of Toronto and others. All rights reserved.
* The content of this file is licensed under the Creative Commons Attribution-
* ShareAlike 4.0 Unported license. The legal text of this license can be
* found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
*
* Contributors:
* Carmen Chui, Michael Gruninger
*******************************************************************************/

(cl-text https://raw.githubusercontent.com/mereolog/computational_ontologies/main/tupper/most/definitions/most_functional_groups_alkenes.clif

(cl-imports https://raw.githubusercontent.com/mereolog/computational_ontologies/main/tupper/most/definitions/most_shape.clif)
(cl-imports https://raw.githubusercontent.com/mereolog/computational_ontologies/main/tupper/most/definitions/most_connections.clif)

(cl-comment 'We note that R groups are simply another functional group in this axiomatization.')

(cl-comment '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')
(cl-comment ' H Y D R O C A R B O N S ')
(cl-comment 'These are axioms for functional groups that contain hydrocarbons.')
(cl-comment 'Only carbon and hydrogens.')
(cl-comment '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')

(cl-comment '================================================')
(cl-comment 'ALKENYL GROUP CnH2n')
(cl-comment 'The alkenes are straight-chain hydrocarbons with one double bond per molecule')
(cl-comment '2 carbon - ethene')
(cl-comment '3 carbon - propene')
(cl-comment '4 carbon - but-1-ene')
(cl-comment '5 carbon - pent-1-ene')
(cl-comment '6 carbon - hex-1-ene')
(cl-comment '================================================')

(forall (x)
	(iff (alkenyl_group x)
		(and (unsaturated x)
			(forall (a)
				(if (and (atom a)(inGroup a x))
					(carbon a))))))

(cl-comment 'ETHENE C2H4')
(forall (x)
	(iff (ethylene x)
		(ethene x)))

(forall (x)
	(iff (ethene x)
		(and (chain x)(unsaturated x)
			(exists (c1 c2 b1)
				(and (carbon c1)(carbon c2)
					(not (= c1 c2))
					(end c1 x)
					(end c2 x)
					(doublebond b1 c1 c2)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)))))))))

(cl-comment 'PROPENE C3H6')
(forall (x)
	(iff (or (propylene x)(methyl_ethylene x))
		(propene x)))

(forall (x)
	(iff (propene x)
		(and (chain x)(unsaturated x)
			(exists (c1 c2 c3 b1 b2)
				(and (carbon c1)(carbon c2)(carbon c3)
					(not (= c1 c2))(not (= c1 c3))
					(not (= c2 c3))
					(end c1 x)
					(end c3 x)
					(doublebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)))))))))

(cl-comment 'BUTENE C4H8')
(forall (x)
	(iff (butylene x))
		(butene x)))

(cl-comment 'Butene has 4 isomers:')
(cl-comment ' -  1-butene')
(cl-comment ' - (Z)-but-2-ene')
(cl-comment ' - (E)-but-2-ene')
(cl-comment ' -  2-methylpropene')
(forall (x)
	(if (butene x)
		(or (1_butene x)(z_but_2_ene x)(e_but_2_ene x)(2_methylpropene x))))

(forall (x)
	(iff (or (1_butene x)(ethylethylene x))
		(but_1_ene x)))

(forall (x)
	(iff (but_1_ene x)
		(and (chain x)(unsaturated x)
			(exists (c1 c2 c3 c4 b1 b2 b3)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))
					(not (= c2 c3))(not (= c2 c4))
					(not (= c3 c4))
					(end c1 x)
					(end c4 x)
					(doublebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(singlebond b3 c3 c4)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)))))))))
							
(forall (x)
	(iff (z_but_2_ene x)
		(cis_but_2_ene x)))

(forall (x)
	(iff (cis_but_2_ene x)
		(and (chain x)(unsaturated x)
			(exists (c1 c2 c3 c4 b1 b2 b3)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))
					(not (= c2 c3))(not (= c2 c4))
					(not (= c3 c4))
					(end c1 x)
					(end c4 x)
					(singlebond b1 c1 c2)
					(doublebond b2 c2 c3)
					(singlebond b3 c3 c4)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)))))))))

(forall (x)
	(iff (e_but_2_ene x)
		(trans_but_2_ene x)))

(forall (x)
	(iff (trans_but_2_ene x)
		(and (chain x)(unsaturated x)
			(exists (c1 c2 c3 c4 b1 b2 b3)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))
					(not (= c2 c3))(not (= c2 c4))
					(not (= c3 c4))
					(end c1 x)
					(end c4 x)
					(singlebond b1 c1 c2)
					(doublebond b2 c2 c3)
					(singlebond b3 c3 c4)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)))))))))

(forall (x)
	(iff (isobutylene x)
		(2_methylpropene x)))

(forall (x)
	(iff (2_methylpropene x)
		(and (branchedgroup x)(unsaturated x)
			(exists (c1 c2 c3 c4 b1 b2 b3)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))
					(not (= c2 c3))(not (= c2 c4))
					(not (= c3 c4))
					(fork c2 x)
					(doublebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(singlebond b3 c2 c4)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)))))))))

(cl-comment 'PENTENE C5H10')
(cl-comment 'Pentene has 2 CHAIN isomers:')
(cl-comment ' -  1-pentene')
(cl-comment ' -  2-pentene (cis/trans)')
(cl-comment 'Pentene has 3 BRANCHED isomers:')
(cl-comment ' -  2-methylbut-1-ene')
(cl-comment ' -  3-methylbut-1-ene (isopentene)')
(cl-comment ' -  2-methylbut-2-ene (isoamylene)')
(cl-comment 'See http://www.gcsescience.com/o28.htm')
(forall (x)
	(if (pentene x)
		(or (1_pentene x)(2_pentene x)(2_methylbut_1_ene x)(3_methylbut_1_ene x)(2_methylbut_2_ene x))))

(forall (x)
	(iff (1_pentene x)
		(and (chain x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 b1 b2 b3 b4)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))
					(not (= c3 c4))(not (= c3 c5))
					(not (= c4 c5))
					(end c1 x)
					(end c5 x)
					(doublebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(singlebond b3 c3 c4)
					(singlebond b4 c4 c5)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)))))))))

(forall (x)
	(iff (pent_2_ene x)
		(and (chain x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 b1 b2 b3 b4)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))
					(not (= c3 c4))(not (= c3 c5))
					(not (= c4 c5))
					(end c1 x)
					(end c5 x)
					(singlebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(doublebond b3 c3 c4)
					(singlebond b4 c4 c5)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)))))))))

(cl-comment 'TO FIX: isomer axioms for cis/trans (pent-2-ene x)')
(cl-comment 'https://pubchem.ncbi.nlm.nih.gov/compound/5326160#section=Top')
(cl-comment 'https://pubchem.ncbi.nlm.nih.gov/compound/trans-2-Pentene#section=Top')

(forall (x)
	(iff (2_methylbut_1_ene x)
		(and (branchedgroup x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 b1 b2 b3 b4)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))
					(not (= c3 c4))(not (= c3 c5))
					(not (= c4 c5))
					(fork c2 x)
					(doublebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(singlebond b3 c2 c4)
					(singlebond b4 c4 c5)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)))))))))

(forall (x)
	(iff (isopentene x)
		(3_methylbut_1_ene x)))

(forall (x)
	(iff (3_methylbut_1_ene x)
		(and (branchedgroup x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 b1 b2 b3 b4)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))
					(not (= c3 c4))(not (= c3 c5))
					(not (= c4 c5))
					(fork c3 x)
					(doublebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(singlebond b3 c3 c4)
					(singlebond b4 c3 c5)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)))))))))

(forall (x)
	(iff (isoamylene x)
		(2_methylbut_2_ene x)))

(forall (x)
	(iff (2_methylbut_2_ene x)
		(and (branchedgroup x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 b1 b2 b3 b4)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))
					(not (= c3 c4))(not (= c3 c5))
					(not (= c4 c5))
					(fork c3 x)
					(singlebond b1 c1 c2)
					(doublebond b2 c2 c3)
					(singlebond b3 c3 c4)
					(singlebond b4 c3 c5)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)))))))))

(cl-comment 'HEXENE C6H12')
(cl-comment 'Hexene has 3 CHAIN isomers:')
(cl-comment ' -  1-hexene')
(cl-comment ' -  2-hexene (cis/trans)')
(cl-comment ' -  3-hexene (cis/trans)')
(cl-comment 'Hexene has 4 BRANCHED isomers:')
(cl-comment ' -  2-methyl-1-pentene')
(cl-comment ' -  3-ethyl-1-butene')
(cl-comment ' -  3-methyl-2-pentene (cis/trans)')
(cl-comment ' -  2,3-dimethyl-2-butene')
(cl-comment 'See http://www.chem.canterbury.ac.nz/LetsTalkChemistry/ElectronicVersion/ElectronicVersionNew/chapter06/alkenenames.shtml')
(forall (x)
	(if (hexene x)
		(or (hex-1-ene x)(2_hexene x)(3_hexene x)(2_methyl_1_pentene x)(2_ethyl_1_butene x)(3_methyl_2_pentene x)(2_3_dimethyl_2_butene x))))

(forall (x)
	(iff (or (1_hexene x)(hexylene x)(butylethylene x))
		(hex_1_ene x)))

(forall (x)
	(iff (hex-1-ene x)
		(and (chain x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 c6 b1 b2 b3 b4 b5)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)(carbon c6)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))(not (= c1 c6))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))(not (= c2 c6))
					(not (= c3 c4))(not (= c3 c5))(not (= c3 c6))
					(not (= c4 c5))(not (= c4 c6))
					(not (= c5 c6))
					(end c1 x)
					(end c6 x)
					(doublebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(singlebond b3 c3 c4)
					(singlebond b4 c4 c5)
					(singlebond b4 c5 c6)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)(= y c6)))))))))

(cl-comment 'Fix this?  Deal with isomers.')
(forall (x)
	(iff (2_hexene x)
		(or (cis_2_hexene x)(trans_2_hexene x)))

(forall (x)
	(iff (z_2_hexene x)
		(cis_2_hexene x)))

(forall (x)
	(iff (cis_2_hexene x)
		(and (chain x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 c6 b1 b2 b3 b4 b5)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)(carbon c6)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))(not (= c1 c6))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))(not (= c2 c6))
					(not (= c3 c4))(not (= c3 c5))(not (= c3 c6))
					(not (= c4 c5))(not (= c4 c6))
					(not (= c5 c6))
					(end c1 x)
					(end c6 x)
					(singlebond b1 c1 c2)
					(doublebond b2 c2 c3)
					(singlebond b3 c3 c4)
					(singlebond b4 c4 c5)
					(singlebond b4 c5 c6)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)(= y c6)))))))))

(forall (x)
	(iff (e_2_hexene x)
		(trans_2_hexene x)))

(forall (x)
	(iff (trans_2_hexene x)
		(and (chain x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 c6 b1 b2 b3 b4 b5)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)(carbon c6)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))(not (= c1 c6))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))(not (= c2 c6))
					(not (= c3 c4))(not (= c3 c5))(not (= c3 c6))
					(not (= c4 c5))(not (= c4 c6))
					(not (= c5 c6))
					(end c1 x)
					(end c6 x)
					(singlebond b1 c1 c2)
					(doublebond b2 c2 c3)
					(singlebond b3 c3 c4)
					(singlebond b4 c4 c5)
					(singlebond b4 c5 c6)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)(= y c6)))))))))

(cl-comment 'Fix this?  Deal with isomers.')
(forall (x)
	(iff (3_hexene x)
		(or (cis_3_hexene x)(trans_3_hexene x)))

(forall (x)
	(iff (z_3_hexene x)
		(cis_3_hexene x)))

(forall (x)
	(iff (cis_3_hexene x)
		(and (chain x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 c6 b1 b2 b3 b4 b5)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)(carbon c6)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))(not (= c1 c6))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))(not (= c2 c6))
					(not (= c3 c4))(not (= c3 c5))(not (= c3 c6))
					(not (= c4 c5))(not (= c4 c6))
					(not (= c5 c6))
					(end c1 x)
					(end c6 x)
					(singlebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(doublebond b3 c3 c4)
					(singlebond b4 c4 c5)
					(singlebond b4 c5 c6)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)(= y c6)))))))))

(forall (x)
	(iff (e_2_hexene x)
		(trans_2_hexene x)))

(forall (x)
	(iff (trans_2_hexene x)
		(and (chain x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 c6 b1 b2 b3 b4 b5)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)(carbon c6)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))(not (= c1 c6))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))(not (= c2 c6))
					(not (= c3 c4))(not (= c3 c5))(not (= c3 c6))
					(not (= c4 c5))(not (= c4 c6))
					(not (= c5 c6))
					(end c1 x)
					(end c6 x)
					(singlebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(doublebond b3 c3 c4)
					(singlebond b4 c4 c5)
					(singlebond b4 c5 c6)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)(= y c6)))))))))

(forall (x)
	(iff (2_methyl_1_pentene x)
		(and (branchedgroup x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 c6 b1 b2 b3 b4 b5)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)(carbon c6)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))(not (= c1 c6))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))(not (= c2 c6))
					(not (= c3 c4))(not (= c3 c5))(not (= c3 c6))
					(not (= c4 c5))(not (= c4 c6))
					(not (= c5 c6))
					(fork c2 x)
					(doublebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(singlebond b3 c2 c4)
					(singlebond b4 c4 c5)
					(singlebond b5 c5 c6)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)(= y c6)))))))))

(forall (x)
	(iff (2_ethyl_1_butene x)
		(and (branchedgroup x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 c6 b1 b2 b3 b4 b5)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)(carbon c6)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))(not (= c1 c6))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))(not (= c2 c6))
					(not (= c3 c4))(not (= c3 c5))(not (= c3 c6))
					(not (= c4 c5))(not (= c4 c6))
					(not (= c5 c6))
					(fork c2 x)
					(doublebond b1 c1 c2)
					(singlebond b2 c2 c3)
					(singlebond b3 c3 c4)
					(singlebond b4 c2 c5)
					(singlebond b5 c5 c6)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)(= y c6)))))))))

(cl-comment 'Fix this?  Deal with isomers.')
(forall (x)
	(iff (3_methyl_2_pentene x)
		(or (cis_3_methyl_2_pentene x)(trans_3_methyl_2_pentene x)))

(forall (x)
	(iff (z_3_methyl_2_pentene x)
		(cis_3_methyl_2_pentene x)))

(forall (x)
	(iff (cis_3_methyl_2_pentene x)
		(and (branchedgroup x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 c6 b1 b2 b3 b4 b5)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)(carbon c6)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))(not (= c1 c6))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))(not (= c2 c6))
					(not (= c3 c4))(not (= c3 c5))(not (= c3 c6))
					(not (= c4 c5))(not (= c4 c6))
					(not (= c5 c6))
					(fork c3 x)
					(singlebond b1 c1 c2)
					(doublebond b2 c2 c3)
					(singlebond b3 c3 c4)
					(singlebond b4 c4 c5)
					(singlebond b4 c3 c6)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)(= y c6)))))))))


(forall (x)
	(iff (e_3_methyl_2_pentene x)
		(trans_3_methyl_2_pentene x)))

(forall (x)
	(iff (trans_3_methyl_2_pentene x)
		(and (branchedgroup x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 c6 b1 b2 b3 b4 b5)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)(carbon c6)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))(not (= c1 c6))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))(not (= c2 c6))
					(not (= c3 c4))(not (= c3 c5))(not (= c3 c6))
					(not (= c4 c5))(not (= c4 c6))
					(not (= c5 c6))
					(fork c3 x)
					(singlebond b1 c1 c2)
					(doublebond b2 c2 c3)
					(singlebond b3 c3 c4)
					(singlebond b4 c3 c5)
					(singlebond b4 c5 c6)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)(= y c6)))))))))

(forall (x)
	(iff (2_3_dimethyl_2_butene x)
		(and (branchedgroup x)(unsaturated x)
			(exists (c1 c2 c3 c4 c5 c6 b1 b2 b3 b4 b5)
				(and (carbon c1)(carbon c2)(carbon c3)(carbon c4)(carbon c5)(carbon c6)
					(not (= c1 c2))(not (= c1 c3))(not (= c1 c4))(not (= c1 c5))(not (= c1 c6))
					(not (= c2 c3))(not (= c2 c4))(not (= c2 c5))(not (= c2 c6))
					(not (= c3 c4))(not (= c3 c5))(not (= c3 c6))
					(not (= c4 c5))(not (= c4 c6))
					(not (= c5 c6))
					(fork c2 x)
					(singlebond b1 c1 c2)
					(singlebond b2 c3 c2)
					(doublebond b3 c2 c4)
					(singlebond b4 c4 c5)
					(singlebond b5 c4 c6)
					(forall (y)
						(iff (inGroup y x)
							(or (= y c1)(= y c2)(= y c3)(= y c4)(= y c5)(= y c6)))))))))

)
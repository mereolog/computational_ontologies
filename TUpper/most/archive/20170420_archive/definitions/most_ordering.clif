/*******************************************************************************
* Copyright (c) University of Toronto and others. All rights reserved.
* The content of this file is licensed under the Creative Commons Attribution-
* ShareAlike 4.0 Unported license. The legal text of this license can be
* found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
*
* Contributors:
* Carmen Chui, Michael Gruninger
*******************************************************************************/

(cl-text https://raw.githubusercontent.com/mereolog/computational_ontologies/main/tupper/most/definitions/most_ordering.clif

(cl-comment 'Theory containing definitions for the ordering relations for most.')

(cl-imports https://raw.githubusercontent.com/mereolog/computational_ontologies/main/tupper/most/most_root.clif)
(cl-imports https://raw.githubusercontent.com/mereolog/computational_ontologies/main/tupper/most/definitions/most_skeleton.clif)
					
(cl-comment 'Axioms from between/semilinear theory with sort constraints.')
(forall (x y z s)
	(if (and (skeleton s)(atom x)(atom y)(atom z)(inSkeleton x s)(inSkeleton y x)(inSkeleton z s))
		(if	(between x y z)
			(between z y x))))

(forall (x y z s)
	(if (and (skeleton s)(atom x)(atom y)(atom z)(inSkeleton x s)(inSkeleton y x)(inSkeleton z s))
		(iff	(and	(between y x z)
				(between x y z))
						(= x y))))

(forall (x y z w s)
	(if (and (skeleton s)(atom x)(atom y)(atom z)(atom w)(inSkeleton x s)(inSkeleton y x)(inSkeleton z s)(inSkeleton w s))
		(if	(between y x z)
			(or	(between y x w)
				(between z x w)))))

(cl-comment 'Definitions for ringBond')
(forall (b)
	(iff (ringBond b)
			(and (bond b)
				(exists (a1 a2)
					(and (atom a1)(atom a2)(inBond a1 b)(inBond a2 b)))
				(not (exists (a3)
					(and (atom a3)
						(or (between a3 a1 a2)(between a1 a2 a3))))))))

(forall (b)
	(if (ringBond b)
		(exists (g)
			(and (group g)(bondGroup b g)(ring g)))))

(cl-comment 'Every ring bond is in a unique ring.')
(forall (b1 b2 g1 g2)
	(if (and (ringBond b1)(ringBond b2)(group g1)(group g2)
			(ring g1)(ring g2)
			(bondGroup b1 g1)(bondGroup b1 g2)
			(bondGroup b1 g2)(bondGroup b2 g2))
		(or (= b1 b2)(= g1 g2))))

(cl-comment 'Every ring bond is in at most one ring.')
(forall (b g1 g2)
	(if (and (ringBond b)(ring g1)(ring g2)
			(group g1)(group g2)
			(bondGroup b g1)(bondGroup b g2))
		(= g1 g2)))

)
============================== Mace4 =================================
Mace4 (32) version Oct-2007, Oct 2007.
Process 16944 was started by torsten on LAPTOP-UF9R3IH7,
Thu Feb 25 08:20:41 2021
The command was "/cygdrive/c/Users/torsten/macleod/mace4 -v0 -t600 -s60 -n2 -N40 -f C:\Users\torsten\GitHub\colore\ontologies\multidim_space_codi\conversions\codi_down_nontrivial.all.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file C:\Users\torsten\GitHub\colore\ontologies\multidim_space_codi\conversions\codi_down_nontrivial.all.p9


formulas(sos).
(all x all y (S(x) & S(y) & -C(x,y) <-> ZEX(intersection(x,y)))).
(all x all y (S(x) & S(y) & -ZEX(intersection(x,y)) -> Cont(intersection(x,y),x))).
(all x all y all z (Cont(z,x) & Cont(z,y) -> leq(z,intersection(x,y)))).
(all x all y all z (Cont(z,x) & Cont(z,y) & EqDim(z,intersection(x,y)) <-> P(z,intersection(x,y)))).
(all x all y (S(x) & S(y) & -ZEX(difference(x,y)) -> EqDim(x,difference(x,y)))).
(all x all y (lt(y,x) -> x = difference(x,y))).
(all x all y all z (leq(x,y) & Cont(z,x) & lt(intersection(z,y),z) -> Cont(z,difference(x,y)))).
(all x all y all z (leq(x,y) & Cont(z,difference(x,y)) -> Cont(z,x))).
(all x all y all z (leq(x,y) & P(z,difference(x,y)) -> lt(intersection(z,y),z))).
(all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))).
(exists var1 exists var2 (geq(var1,var2) & var1 != var2)).
(exists var3 exists var4 (-geq(var3,var4) & var3 != var4)).
(exists var5 ZEX(var5)).
(exists var6 -ZEX(var6)).
(exists var7 exists var8 (gt(var7,var8) & var7 != var8)).
(exists var9 exists var10 (-gt(var9,var10) & var9 != var10)).
(exists var11 exists var12 (EqDim(var11,var12) & var11 != var12)).
(exists var13 exists var14 (-EqDim(var13,var14) & var13 != var14)).
(exists var15 exists var16 (leq(var15,var16) & var15 != var16)).
(exists var17 exists var18 (-leq(var17,var18) & var17 != var18)).
(exists var19 MinDim(var19)).
(exists var20 -MinDim(var20)).
(exists var21 exists var22 (P(var21,var22) & var21 != var22)).
(exists var23 exists var24 (-P(var23,var24) & var23 != var24)).
(exists var25 exists var26 (C(var25,var26) & var25 != var26)).
(exists var27 exists var28 (-C(var27,var28) & var27 != var28)).
(exists var29 exists var30 (Cont(var29,var30) & var29 != var30)).
(exists var31 exists var32 (-Cont(var31,var32) & var31 != var32)).
(exists var33 exists var34 (lt(var33,var34) & var33 != var34)).
(exists var35 exists var36 (-lt(var35,var36) & var35 != var36)).
(exists var37 S(var37)).
(exists var38 -S(var38)).
(exists var39 MaxDim(var39)).
(exists var40 -MaxDim(var40)).
(all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))).
(all x (S(x) & -ZEX(x) <-> Cont(x,x))).
(all x all y (Cont(x,y) & Cont(y,x) -> x = y)).
(all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))).
(all x all y (ZEX(x) -> S(x) & -Cont(y,x) & -Cont(x,y))).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x all y (gt(x,y) <-> lt(y,x))).
(all x all y (geq(x,y) <-> leq(y,x))).
(all x all y (lt(x,y) <-> leq(x,y) & -EqDim(x,y))).
(all x all y (EqDim(x,y) <-> leq(x,y) & leq(y,x))).
(all x all y (leq(x,y) -> S(x))).
(all x all y (leq(x,y) -> S(y))).
(all x (ZEX(x) -> S(x))).
(all x (S(x) -> leq(x,x))).
(all x all y all z (leq(x,y) & leq(y,z) -> leq(x,z))).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x all y (ZEX(x) & S(y) -> leq(x,y))).
(all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))).
(all x all y (Cont(x,y) -> leq(x,y))).
(exists x MinDim(x)).
(all x (MaxDim(x) <-> S(x) & -ZEX(x) & (all y (S(y) -> leq(y,x))))).
(all x (MinDim(x) <-> S(x) & -ZEX(x) & (all y (S(y) & -ZEX(y) -> leq(x,y))))).
end_of_list.

% From the command line: clear(verbose).

% From the command line: assign(max_seconds, 600).

% From the command line: assign(max_seconds_per, 60).

% From the command line: assign(domain_size, 2).

% From the command line: assign(iterate_up_to, 40).

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x all y (S(x) & S(y) & -C(x,y) <-> ZEX(intersection(x,y)))) # label(non_clause).  [assumption].
2 (all x all y (S(x) & S(y) & -ZEX(intersection(x,y)) -> Cont(intersection(x,y),x))) # label(non_clause).  [assumption].
3 (all x all y all z (Cont(z,x) & Cont(z,y) -> leq(z,intersection(x,y)))) # label(non_clause).  [assumption].
4 (all x all y all z (Cont(z,x) & Cont(z,y) & EqDim(z,intersection(x,y)) <-> P(z,intersection(x,y)))) # label(non_clause).  [assumption].
5 (all x all y (S(x) & S(y) & -ZEX(difference(x,y)) -> EqDim(x,difference(x,y)))) # label(non_clause).  [assumption].
6 (all x all y (lt(y,x) -> x = difference(x,y))) # label(non_clause).  [assumption].
7 (all x all y all z (leq(x,y) & Cont(z,x) & lt(intersection(z,y),z) -> Cont(z,difference(x,y)))) # label(non_clause).  [assumption].
8 (all x all y all z (leq(x,y) & Cont(z,difference(x,y)) -> Cont(z,x))) # label(non_clause).  [assumption].
9 (all x all y all z (leq(x,y) & P(z,difference(x,y)) -> lt(intersection(z,y),z))) # label(non_clause).  [assumption].
10 (all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))) # label(non_clause).  [assumption].
11 (exists var1 exists var2 (geq(var1,var2) & var1 != var2)) # label(non_clause).  [assumption].
12 (exists var3 exists var4 (-geq(var3,var4) & var3 != var4)) # label(non_clause).  [assumption].
13 (exists var5 ZEX(var5)) # label(non_clause).  [assumption].
14 (exists var6 -ZEX(var6)) # label(non_clause).  [assumption].
15 (exists var7 exists var8 (gt(var7,var8) & var7 != var8)) # label(non_clause).  [assumption].
16 (exists var9 exists var10 (-gt(var9,var10) & var9 != var10)) # label(non_clause).  [assumption].
17 (exists var11 exists var12 (EqDim(var11,var12) & var11 != var12)) # label(non_clause).  [assumption].
18 (exists var13 exists var14 (-EqDim(var13,var14) & var13 != var14)) # label(non_clause).  [assumption].
19 (exists var15 exists var16 (leq(var15,var16) & var15 != var16)) # label(non_clause).  [assumption].
20 (exists var17 exists var18 (-leq(var17,var18) & var17 != var18)) # label(non_clause).  [assumption].
21 (exists var19 MinDim(var19)) # label(non_clause).  [assumption].
22 (exists var20 -MinDim(var20)) # label(non_clause).  [assumption].
23 (exists var21 exists var22 (P(var21,var22) & var21 != var22)) # label(non_clause).  [assumption].
24 (exists var23 exists var24 (-P(var23,var24) & var23 != var24)) # label(non_clause).  [assumption].
25 (exists var25 exists var26 (C(var25,var26) & var25 != var26)) # label(non_clause).  [assumption].
26 (exists var27 exists var28 (-C(var27,var28) & var27 != var28)) # label(non_clause).  [assumption].
27 (exists var29 exists var30 (Cont(var29,var30) & var29 != var30)) # label(non_clause).  [assumption].
28 (exists var31 exists var32 (-Cont(var31,var32) & var31 != var32)) # label(non_clause).  [assumption].
29 (exists var33 exists var34 (lt(var33,var34) & var33 != var34)) # label(non_clause).  [assumption].
30 (exists var35 exists var36 (-lt(var35,var36) & var35 != var36)) # label(non_clause).  [assumption].
31 (exists var37 S(var37)) # label(non_clause).  [assumption].
32 (exists var38 -S(var38)) # label(non_clause).  [assumption].
33 (exists var39 MaxDim(var39)) # label(non_clause).  [assumption].
34 (exists var40 -MaxDim(var40)) # label(non_clause).  [assumption].
35 (all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
36 (all x (S(x) & -ZEX(x) <-> Cont(x,x))) # label(non_clause).  [assumption].
37 (all x all y (Cont(x,y) & Cont(y,x) -> x = y)) # label(non_clause).  [assumption].
38 (all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))) # label(non_clause).  [assumption].
39 (all x all y (ZEX(x) -> S(x) & -Cont(y,x) & -Cont(x,y))) # label(non_clause).  [assumption].
40 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
41 (all x all y (gt(x,y) <-> lt(y,x))) # label(non_clause).  [assumption].
42 (all x all y (geq(x,y) <-> leq(y,x))) # label(non_clause).  [assumption].
43 (all x all y (lt(x,y) <-> leq(x,y) & -EqDim(x,y))) # label(non_clause).  [assumption].
44 (all x all y (EqDim(x,y) <-> leq(x,y) & leq(y,x))) # label(non_clause).  [assumption].
45 (all x all y (leq(x,y) -> S(x))) # label(non_clause).  [assumption].
46 (all x all y (leq(x,y) -> S(y))) # label(non_clause).  [assumption].
47 (all x (ZEX(x) -> S(x))) # label(non_clause).  [assumption].
48 (all x (S(x) -> leq(x,x))) # label(non_clause).  [assumption].
49 (all x all y all z (leq(x,y) & leq(y,z) -> leq(x,z))) # label(non_clause).  [assumption].
50 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
51 (all x all y (ZEX(x) & S(y) -> leq(x,y))) # label(non_clause).  [assumption].
52 (all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))) # label(non_clause).  [assumption].
53 (all x all y (Cont(x,y) -> leq(x,y))) # label(non_clause).  [assumption].
54 (exists x MinDim(x)) # label(non_clause).  [assumption].
55 (all x (MaxDim(x) <-> S(x) & -ZEX(x) & (all y (S(y) -> leq(y,x))))) # label(non_clause).  [assumption].
56 (all x (MinDim(x) <-> S(x) & -ZEX(x) & (all y (S(y) & -ZEX(y) -> leq(x,y))))) # label(non_clause).  [assumption].

============================== end of process non-clausal formulas ===

============================== CLAUSES FOR SEARCH ====================

formulas(mace4_clauses).
-S(x) | -S(y) | C(x,y) | ZEX(intersection(x,y)).
S(x) | -ZEX(intersection(x,y)).
S(x) | -ZEX(intersection(y,x)).
-C(x,y) | -ZEX(intersection(x,y)).
-S(x) | -S(y) | ZEX(intersection(x,y)) | Cont(intersection(x,y),x).
-Cont(x,y) | -Cont(x,z) | leq(x,intersection(y,z)).
-Cont(x,y) | -Cont(x,z) | -EqDim(x,intersection(y,z)) | P(x,intersection(y,z)).
Cont(x,y) | -P(x,intersection(y,z)).
Cont(x,y) | -P(x,intersection(z,y)).
EqDim(x,intersection(y,z)) | -P(x,intersection(y,z)).
-S(x) | -S(y) | ZEX(difference(x,y)) | EqDim(x,difference(x,y)).
-lt(x,y) | difference(y,x) = y.
-leq(x,y) | -Cont(z,x) | -lt(intersection(z,y),z) | Cont(z,difference(x,y)).
-leq(x,y) | -Cont(z,difference(x,y)) | Cont(z,x).
-leq(x,y) | -P(z,difference(x,y)) | lt(intersection(z,y),z).
-ZEX(difference(x,y)) | ZEX(x) | Cont(x,y).
ZEX(difference(x,y)) | -ZEX(x).
ZEX(difference(x,y)) | -Cont(x,y).
geq(c1,c2).
c2 != c1.
-geq(c3,c4).
c4 != c3.
ZEX(c5).
-ZEX(c6).
gt(c7,c8).
c8 != c7.
-gt(c9,c10).
c10 != c9.
EqDim(c11,c12).
c12 != c11.
-EqDim(c13,c14).
c14 != c13.
leq(c15,c16).
c16 != c15.
-leq(c17,c18).
c18 != c17.
MinDim(c19).
-MinDim(c20).
P(c21,c22).
c22 != c21.
-P(c23,c24).
c24 != c23.
C(c25,c26).
c26 != c25.
-C(c27,c28).
c28 != c27.
Cont(c29,c30).
c30 != c29.
-Cont(c31,c32).
c32 != c31.
lt(c33,c34).
c34 != c33.
-lt(c35,c36).
c36 != c35.
S(c37).
-S(c38).
MaxDim(c39).
-MaxDim(c40).
-C(x,y) | Cont(f1(x,y),x).
-C(x,y) | Cont(f1(x,y),y).
C(x,y) | -Cont(z,x) | -Cont(z,y).
-S(x) | ZEX(x) | Cont(x,x).
S(x) | -Cont(x,x).
-ZEX(x) | -Cont(x,x).
-Cont(x,y) | -Cont(y,x) | y = x.
-Cont(x,y) | -Cont(y,z) | Cont(x,z).
-ZEX(x) | S(x).
-ZEX(x) | -Cont(y,x).
-ZEX(x) | -Cont(x,y).
-ZEX(x) | -ZEX(y) | y = x.
-gt(x,y) | lt(y,x).
gt(x,y) | -lt(y,x).
-geq(x,y) | leq(y,x).
geq(x,y) | -leq(y,x).
-lt(x,y) | leq(x,y).
-lt(x,y) | -EqDim(x,y).
lt(x,y) | -leq(x,y) | EqDim(x,y).
-EqDim(x,y) | leq(x,y).
-EqDim(x,y) | leq(y,x).
EqDim(x,y) | -leq(x,y) | -leq(y,x).
-leq(x,y) | S(x).
-leq(x,y) | S(y).
-ZEX(x) | S(x).
-S(x) | leq(x,x).
-leq(x,y) | -leq(y,z) | leq(x,z).
-ZEX(x) | -ZEX(y) | y = x.
-ZEX(x) | -S(y) | leq(x,y).
-P(x,y) | Cont(x,y).
-P(x,y) | EqDim(x,y).
P(x,y) | -Cont(x,y) | -EqDim(x,y).
-Cont(x,y) | leq(x,y).
MinDim(c41).
-MaxDim(x) | S(x).
-MaxDim(x) | -ZEX(x).
-MaxDim(x) | -S(y) | leq(y,x).
MaxDim(x) | -S(x) | ZEX(x) | S(f2(x)).
MaxDim(x) | -S(x) | ZEX(x) | -leq(f2(x),x).
-MinDim(x) | S(x).
-MinDim(x) | -ZEX(x).
-MinDim(x) | -S(y) | ZEX(y) | leq(x,y).
MinDim(x) | -S(x) | ZEX(x) | S(f3(x)).
MinDim(x) | -S(x) | ZEX(x) | -ZEX(f3(x)).
MinDim(x) | -S(x) | ZEX(x) | -leq(x,f3(x)).
end_of_list.

============================== end of clauses for search =============

% The maximum domain element in the input is 0.

============================== DOMAIN SIZE 2 =========================

=== Mace4 starting on domain size 2. ===

============================== STATISTICS ============================

For domain size 2.

Current CPU time: 0.00 seconds (total CPU time: 0.03 seconds).
Ground clauses: seen=303, kept=297.
Selections=1, assignments=2, propagations=14, current_models=0.
Rewrite_terms=10, rewrite_bools=124, indexes=2.
Rules_from_neg_clauses=4, cross_offs=4.

============================== end of statistics =====================

============================== DOMAIN SIZE 3 =========================

=== Mace4 starting on domain size 3. ===

============================== STATISTICS ============================

For domain size 3.

Current CPU time: 0.00 seconds (total CPU time: 0.16 seconds).
Ground clauses: seen=707, kept=698.
Selections=39020, assignments=117058, propagations=118750, current_models=0.
Rewrite_terms=370240, rewrite_bools=246655, indexes=15450.
Rules_from_neg_clauses=72843, cross_offs=154319.

============================== end of statistics =====================

============================== DOMAIN SIZE 4 =========================

=== Mace4 starting on domain size 4. ===

========================== MACLEOD SUMMARY ===========================
reasoner: C:/Users/torsten/macleod/mace4
status: 
execution finished: Thu Feb 25 08:20:54 2021
total CPU time used: 0
The command was "C:/Users/torsten/macleod/mace4 -v0 -t600 -s60 -n2 -N40 -f C:\Users\torsten\GitHub\colore\ontologies\multidim_space_codi\conversions\codi_down_nontrivial.all.p9"
============================ end of footer ===========================

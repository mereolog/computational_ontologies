============================== Mace4 =================================
Mace4 (32) version Oct-2007, Oct 2007.
Process 23632 was started by torsten on LAPTOP-UF9R3IH7,
Thu Mar 18 08:25:41 2021
The command was "/cygdrive/c/Users/torsten/macleod/mace4 -v0 -t600 -s60 -n2 -N40 -f C:\Users\torsten\GitHub\colore\ontologies\dolce\conversions\dolce_core.all.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file C:\Users\torsten\GitHub\colore\ontologies\dolce\conversions\dolce_core.all.p9


formulas(sos).
(all x all y (O(x,y) <-> (exists z (P(z,x) & P(z,y))))).
(all x all y all z (Sum(z,x,y) <-> (all w (O(w,z) <-> O(w,x) | O(w,y))))).
(all x P(x,x)).
(all x all y all z (P(x,y) & P(y,z) -> P(x,z))).
(all x all y all z (P(x,y) & P(y,z) -> x = y)).
(all x all y (-P(x,y) -> (exists z (P(z,x) & -O(z,y))))).
(all x all y (Obj(y) & P(x,y) -> Obj(x))).
(all x all y (E(y) & P(x,y) -> E(x))).
(all x all y (Qi(y) & P(x,y) -> Qi(x))).
(all x all y (Sjk(y) & P(x,y) -> Sjk(x))).
(all x all y (C(y) & P(x,y) -> C(x))).
(all x all y all z (Obj(x) & Obj(y) & SUM(z,x,y) -> Obj(z))).
(all x all y all z (E(x) & E(y) & SUM(z,x,y) -> E(z))).
(all x all y all z (Qi(x) & Qi(y) & SUM(z,x,y) -> Qi(z))).
(all x all y all z (Sjk(x) & Sjk(y) & SUM(z,x,y) -> Sjk(z))).
(all x all y all z (C(x) & C(y) & SUM(z,x,y) -> C(z))).
(all x all t all t1 (R(x) & PRE(x,t) & PRE(x,t1) -> (all y (P_t(y,x,t) <-> P_t(y,x,t1))))).
(all x all y all t (sij(x) & sij(y) & PRE(x,t) -> PRE(y,t))).
(all x all y all t (L(x,y,t) -> R(x) & Q(y))).
(all x all y all t (L(x,y,t) -> PRE(y,t))).
(all x all x1 all y all t all t1 (L(x,y,t) & P(t1,t) & L(x1,y,t1) & sij(x) & sij(x1) -> (all t2 (PRE(x,t2) -> P_t(x1,x,t2))))).
(all x all x1 all x2 all y all t all t1 all t2 (L(x1,y,t1) & L(x2,y,t2) & SUM(t,t1,t2) & SUM(x,x1,x2) & sij(x1) & sij(x2) -> L(x,y,t))).
(all x all y all t (L(x,y,t) & Qi(y) -> sij(x))).
(all y all t (Q(y) & PRE(y,t) -> (exists x L(x,y,t)))).
(all x all x1 all y all t (L(x,y,t) & L(x1,y,t) & sjk(x) & sjk(x1) -> x = x1)).
(all x all y all t all t1 (L(x,y,t) & PRE(y,t1) & sjk(x) -> (exists x1 (L(x1,y,t1) & sjk(x1))))).
(all x all x1 all y all y1 all t (L(x,y,t) & CC(x1,x,t) & CC(y1,y,t) -> L(x1,y1,t))).
(all x all y all t (PC(x,y,t) -> Obj(x) & E(x))).
(all x all t (E(x) & PRE(x,t) -> (exists y PC(y,x,t)))).
(all x all t (Obj(x) & PRE(x,t) -> (exists y PC(y,x,t)))).
(all x all y all y1 all t (PC(x,y,t) & P_t(y,y1,t) & E(y1) -> PC(x,y1,t))).
(all x all x1 all y all t (PC(x,y,t) & P_t(x1,x,t) -> PC(x1,y,t))).
(all x all y all v all z (I(x,y) & Qi(x) & E(y) & I(z,v) & Qj(z) & Obj(v) -> -Qj(x) & -Qi(z))).
(all x all y all t (L(x,y,t) & TQ(y) -> x = t)).
(all x (E(x) -> (exists y (TQ(y) & I(y,x))))).
(all x all y all t (CF(x,y,t) -> c(x))).
(all x all y all t (CF(x,y,t) -> PRE(y,t))).
(all x all t all t1 (c(x) & PRE(x,t) & PRE(x,t1) -> (all y (P_t(x,y,t) <-> P_t(y,x,t1))))).
(all x all y (I(x,y) -> Q(x))).
(all x all y all y1 (I(x,y) & I(x,y1) -> y = y1)).
(all x (Q(x) -> (exists y I(x,y)))).
(all x all y (I(x,y) -> (all t (PRE(x,t) <-> PRE(y,t))))).
(all x all x1 all y (I(x,y) & I(x1,y) & Qi(x) & Qi(x1) -> x = x1)).
(all x all y all t (CC(x,y,t) -> (exists z (I(z,x) & Qi(z) <-> (exists z1 (I(z1,y) & Qi(z1))))))).
(all x all y all z all t all z1 (CC(x,y,t) & I(z,x) & I(z1,y) & Qi(z) & Qi(z1) -> CC(z,z1,t))).
(all x all y all v all w all z (I(x,y) & I(v,w) & Qi(x) & Sum(z,x,v) & Sum(s,y,w) -> I(z,s))).
(all x all t (PRE(x,t) -> T(t))).
(all x all t all t1 (PRE(x,t) & P(t1,t) -> PRE(x,t1))).
(all x all t all t1 all t2 (PRE(x,t1) & PRE(x,t2) & SUM(t,t1,t2) -> PRE(x,t))).
(all x (Obj(x) | E(x) | Q(x) | R(x) | C(x) | AS(x) -> PT(x))).
(all x (PT(x) -> (exists t PRE(x,t)))).
(all x all y all t (O_t(x,y,t) <-> (exists z (P_t(z,x,t) & P_t(z,y,t))))).
(all x all y all t (P_t(x,y,t) -> PRE(x,t) & PRE(y,t))).
(all x all t (PRE(x,t) -> P_t(x,x,t))).
(all x all y all z all t (P_t(x,y,t) & P_t(y,z,t) -> P_t(x,z,t))).
(all x all y all t (PRE(x,t) & PRE(y,t) & -P_t(x,y,t) -> (exists z (P_t(z,x,t) & -O_t(z,y,t))))).
(all x all y all t (Obj(y) & P_t(x,y,t) -> Obj(x))).
(all x all y all t (E(y) & P_t(x,y,t) -> E(x))).
(all x all y all t (Qi(y) & P_t(x,y,t) -> Qi(x))).
(all x all y all t (Sjk(y) & P_t(x,y,t) -> Sjk(x))).
(all x all y all t (C(y) & P_t(x,y,t) -> C(x))).
(all x all y all t (CC(x,y,t) <-> P_t(x,y,t) & P_t(y,x,t))).
(all x all y (CP(x,y) <-> (exists t PRE(x,t)) & (all t (PRE(x,t) -> P_t(x,y,t))))).
(all x all y ((exists t PRE(x,t)) -> (CP(x,y) <-> P(x,y)))).
(all x (ED(x) | PD(x) | Q(x) -> (exists t PRE(x,t)))).
(all x all t all t1 (PRE(x,t) & P(t1,t) -> PRE(x,t1))).
(all x all t (PRE(x,t) -> T(t))).
(all x all t all t1 all t2 (PRE(x,t1) & PRE(x,t2) & SUM(t,t1,t2) -> PRE(x,t))).
(all x all y (P(x,y) -> (T(x) <-> T(y)))).
(all x all y (P(x,y) -> (T(x) <-> T(y)))).
(all x all y (T(x) -> P(x,x))).
(all x all y (T(x) & T(y) & P(x,y) & P(y,x) -> x = y)).
(all x all y all z (T(x) & T(y) & P(x,y) & P(y,z) -> P(x,z))).
(all x all y (T(x) & T(y) & -P(x,y) -> (exists z (T(z) & P(z,x) & -O(z,y))))).
(all x all y (T(x) & T(y) & -P(x,y) -> (exists z (P(z,x) & DJ(z,y) & T(z))))).
(all x all y (T(x) & T(y) -> (PP(x,y) <-> P(x,y) & -P(y,x)))).
(all x all y (T(x) & T(y) -> (O(x,y) <-> (exists z (P(z,x) & P(z,y) & T(z)))))).
(all x all y (T(x) & T(y) -> (DJ(x,y) <-> -O(x,y)))).
(all x all y (T(x) & T(y) -> (U(x,y) <-> (exists z (P(x,z) & P(y,z) & T(z)))))).
(all x (T(x) -> (AtP(x) <-> (all y (T(y) & P(y,x) -> y = x))))).
(all x all y (T(x) & T(y) & U(x,y) -> (exists z (T(z) & (all w (T(w) -> (O(w,z) <-> O(w,x) | O(w,y)))))))).
(all x all y (T(x) & T(y) & O(x,y) -> (exists z (T(z) & (all w (T(w) -> (PP(w,z) <-> PP(w,x) & PP(w,y)))))))).
(all x all y all z (T(x) & T(y) & T(z) -> (SUM(z,x,y) <-> (all w (T(w) -> (O(w,z) <-> O(w,x) | O(w,y))))))).
(all x (ED(x) | PD(x) | Q(x) | AB(x) -> PT(x))).
(all x (PED(x) | NPED(x) | AS(x) -> ED(x))).
(all x (EV(x) | STV(x) -> PD(x))).
(all x (TQ(x) | PQ(x) | AQ(x) -> Q(x))).
(all x (R(x) -> AB(x))).
(all x (M(x) | F(x) | POB(x) -> PED(x))).
(all x (NPOB(x) -> NPED(x))).
(all x (ACH(x) | ACC(x) -> EV(x))).
(all x (ST(x) | PRO(x) -> STV(x))).
(all x (TL(x) -> TQ(x))).
(all x (SL(x) -> PQ(x))).
(all x (TR(x) | PR(x) | AR(x) -> R(x))).
(all x (APO(x) | NAPO(x) -> POB(x))).
(all x (MOB(x) | SOB(x) -> NPOB(x))).
(all x (T(x) -> TR(x))).
(all x (S(x) -> PR(x))).
(all x (ASO(x) | NASO(x) -> SOB(x))).
(all x (SAG(x) | SC(x) -> ASO(x))).
(all x (PT(x) <-> ED(x) | PD(x) | Q(x) | AB(x))).
(all x (ED(x) -> -PD(x) & -Q(x) & -AB(x))).
(all x (PD(x) -> -Q(x) & -AB(x))).
(all x (Q(x) -> -AB(x))).
(all x (ED(x) <-> PED(x) | NPED(x) | AS(x))).
(all x (PED(x) -> -NPED(x) & -AS(x))).
(all x (NPED(x) -> -AS(x))).
(all x (PD(x) <-> EV(x) | STV(x))).
(all x (EV(x) -> -STV(x))).
(all x (Q(x) <-> TQ(x) | PQ(x) | AQ(x))).
(all x (TQ(x) -> -PQ(x) & -AQ(x))).
(all x (PQ(x) -> -AQ(x))).
(all x (PED(x) <-> M(x) | F(x) | POB(x))).
(all x (M(x) -> -F(x) & -POB(x))).
(all x (F(x) -> -POB(x))).
(all x (EV(x) <-> ACH(x) | ACC(x))).
(all x (ACH(x) -> -ACC(x))).
(all x (STV(x) <-> ST(x) | PRO(x))).
(all x (ST(x) -> -PRO(x))).
(all x (R(x) <-> TR(x) | PR(x) | AR(x))).
(all x (TR(x) -> -PR(x) & -AR(x))).
(all x (PR(x) -> -AR(x))).
(all x (POB(x) <-> APO(x) | NAPO(x))).
(all x (APO(x) -> -NAPO(x))).
(all x (NPOB(x) <-> MOB(x) | SOB(x))).
(all x (MOB(x) -> -SOB(x))).
(all x (SOB(x) <-> ASO(x) | NASO(x))).
(all x (ASO(x) -> -NASO(x))).
(all x (ASO(x) <-> SAG(x) | SC(x))).
(all x (SAG(x) -> -SC(x))).
end_of_list.

% From the command line: clear(verbose).

% From the command line: assign(max_seconds, 600).

% From the command line: assign(max_seconds_per, 60).

% From the command line: assign(domain_size, 2).

% From the command line: assign(iterate_up_to, 40).

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x all y (O(x,y) <-> (exists z (P(z,x) & P(z,y))))) # label(non_clause).  [assumption].
2 (all x all y all z (Sum(z,x,y) <-> (all w (O(w,z) <-> O(w,x) | O(w,y))))) # label(non_clause).  [assumption].
3 (all x P(x,x)) # label(non_clause).  [assumption].
4 (all x all y all z (P(x,y) & P(y,z) -> P(x,z))) # label(non_clause).  [assumption].
5 (all x all y all z (P(x,y) & P(y,z) -> x = y)) # label(non_clause).  [assumption].
6 (all x all y (-P(x,y) -> (exists z (P(z,x) & -O(z,y))))) # label(non_clause).  [assumption].
7 (all x all y (Obj(y) & P(x,y) -> Obj(x))) # label(non_clause).  [assumption].
8 (all x all y (E(y) & P(x,y) -> E(x))) # label(non_clause).  [assumption].
9 (all x all y (Qi(y) & P(x,y) -> Qi(x))) # label(non_clause).  [assumption].
10 (all x all y (Sjk(y) & P(x,y) -> Sjk(x))) # label(non_clause).  [assumption].
11 (all x all y (C(y) & P(x,y) -> C(x))) # label(non_clause).  [assumption].
12 (all x all y all z (Obj(x) & Obj(y) & SUM(z,x,y) -> Obj(z))) # label(non_clause).  [assumption].
13 (all x all y all z (E(x) & E(y) & SUM(z,x,y) -> E(z))) # label(non_clause).  [assumption].
14 (all x all y all z (Qi(x) & Qi(y) & SUM(z,x,y) -> Qi(z))) # label(non_clause).  [assumption].
15 (all x all y all z (Sjk(x) & Sjk(y) & SUM(z,x,y) -> Sjk(z))) # label(non_clause).  [assumption].
16 (all x all y all z (C(x) & C(y) & SUM(z,x,y) -> C(z))) # label(non_clause).  [assumption].
17 (all x all t all t1 (R(x) & PRE(x,t) & PRE(x,t1) -> (all y (P_t(y,x,t) <-> P_t(y,x,t1))))) # label(non_clause).  [assumption].
18 (all x all y all t (sij(x) & sij(y) & PRE(x,t) -> PRE(y,t))) # label(non_clause).  [assumption].
19 (all x all y all t (L(x,y,t) -> R(x) & Q(y))) # label(non_clause).  [assumption].
20 (all x all y all t (L(x,y,t) -> PRE(y,t))) # label(non_clause).  [assumption].
21 (all x all x1 all y all t all t1 (L(x,y,t) & P(t1,t) & L(x1,y,t1) & sij(x) & sij(x1) -> (all t2 (PRE(x,t2) -> P_t(x1,x,t2))))) # label(non_clause).  [assumption].
22 (all x all x1 all x2 all y all t all t1 all t2 (L(x1,y,t1) & L(x2,y,t2) & SUM(t,t1,t2) & SUM(x,x1,x2) & sij(x1) & sij(x2) -> L(x,y,t))) # label(non_clause).  [assumption].
23 (all x all y all t (L(x,y,t) & Qi(y) -> sij(x))) # label(non_clause).  [assumption].
24 (all y all t (Q(y) & PRE(y,t) -> (exists x L(x,y,t)))) # label(non_clause).  [assumption].
25 (all x all x1 all y all t (L(x,y,t) & L(x1,y,t) & sjk(x) & sjk(x1) -> x = x1)) # label(non_clause).  [assumption].
26 (all x all y all t all t1 (L(x,y,t) & PRE(y,t1) & sjk(x) -> (exists x1 (L(x1,y,t1) & sjk(x1))))) # label(non_clause).  [assumption].
27 (all x all x1 all y all y1 all t (L(x,y,t) & CC(x1,x,t) & CC(y1,y,t) -> L(x1,y1,t))) # label(non_clause).  [assumption].
28 (all x all y all t (PC(x,y,t) -> Obj(x) & E(x))) # label(non_clause).  [assumption].
29 (all x all t (E(x) & PRE(x,t) -> (exists y PC(y,x,t)))) # label(non_clause).  [assumption].
30 (all x all t (Obj(x) & PRE(x,t) -> (exists y PC(y,x,t)))) # label(non_clause).  [assumption].
31 (all x all y all y1 all t (PC(x,y,t) & P_t(y,y1,t) & E(y1) -> PC(x,y1,t))) # label(non_clause).  [assumption].
32 (all x all x1 all y all t (PC(x,y,t) & P_t(x1,x,t) -> PC(x1,y,t))) # label(non_clause).  [assumption].
33 (all x all y all v all z (I(x,y) & Qi(x) & E(y) & I(z,v) & Qj(z) & Obj(v) -> -Qj(x) & -Qi(z))) # label(non_clause).  [assumption].
34 (all x all y all t (L(x,y,t) & TQ(y) -> x = t)) # label(non_clause).  [assumption].
35 (all x (E(x) -> (exists y (TQ(y) & I(y,x))))) # label(non_clause).  [assumption].
36 (all x all y all t (CF(x,y,t) -> c(x))) # label(non_clause).  [assumption].
37 (all x all y all t (CF(x,y,t) -> PRE(y,t))) # label(non_clause).  [assumption].
38 (all x all t all t1 (c(x) & PRE(x,t) & PRE(x,t1) -> (all y (P_t(x,y,t) <-> P_t(y,x,t1))))) # label(non_clause).  [assumption].
39 (all x all y (I(x,y) -> Q(x))) # label(non_clause).  [assumption].
40 (all x all y all y1 (I(x,y) & I(x,y1) -> y = y1)) # label(non_clause).  [assumption].
41 (all x (Q(x) -> (exists y I(x,y)))) # label(non_clause).  [assumption].
42 (all x all y (I(x,y) -> (all t (PRE(x,t) <-> PRE(y,t))))) # label(non_clause).  [assumption].
43 (all x all x1 all y (I(x,y) & I(x1,y) & Qi(x) & Qi(x1) -> x = x1)) # label(non_clause).  [assumption].
44 (all x all y all t (CC(x,y,t) -> (exists z (I(z,x) & Qi(z) <-> (exists z1 (I(z1,y) & Qi(z1))))))) # label(non_clause).  [assumption].
45 (all x all y all z all t all z1 (CC(x,y,t) & I(z,x) & I(z1,y) & Qi(z) & Qi(z1) -> CC(z,z1,t))) # label(non_clause).  [assumption].
46 (all x all y all v all w all z (I(x,y) & I(v,w) & Qi(x) & Sum(z,x,v) & Sum(s,y,w) -> I(z,s))) # label(non_clause).  [assumption].
47 (all x all t (PRE(x,t) -> T(t))) # label(non_clause).  [assumption].
48 (all x all t all t1 (PRE(x,t) & P(t1,t) -> PRE(x,t1))) # label(non_clause).  [assumption].
49 (all x all t all t1 all t2 (PRE(x,t1) & PRE(x,t2) & SUM(t,t1,t2) -> PRE(x,t))) # label(non_clause).  [assumption].
50 (all x (Obj(x) | E(x) | Q(x) | R(x) | C(x) | AS(x) -> PT(x))) # label(non_clause).  [assumption].
51 (all x (PT(x) -> (exists t PRE(x,t)))) # label(non_clause).  [assumption].
52 (all x all y all t (O_t(x,y,t) <-> (exists z (P_t(z,x,t) & P_t(z,y,t))))) # label(non_clause).  [assumption].
53 (all x all y all t (P_t(x,y,t) -> PRE(x,t) & PRE(y,t))) # label(non_clause).  [assumption].
54 (all x all t (PRE(x,t) -> P_t(x,x,t))) # label(non_clause).  [assumption].
55 (all x all y all z all t (P_t(x,y,t) & P_t(y,z,t) -> P_t(x,z,t))) # label(non_clause).  [assumption].
56 (all x all y all t (PRE(x,t) & PRE(y,t) & -P_t(x,y,t) -> (exists z (P_t(z,x,t) & -O_t(z,y,t))))) # label(non_clause).  [assumption].
57 (all x all y all t (Obj(y) & P_t(x,y,t) -> Obj(x))) # label(non_clause).  [assumption].
58 (all x all y all t (E(y) & P_t(x,y,t) -> E(x))) # label(non_clause).  [assumption].
59 (all x all y all t (Qi(y) & P_t(x,y,t) -> Qi(x))) # label(non_clause).  [assumption].
60 (all x all y all t (Sjk(y) & P_t(x,y,t) -> Sjk(x))) # label(non_clause).  [assumption].
61 (all x all y all t (C(y) & P_t(x,y,t) -> C(x))) # label(non_clause).  [assumption].
62 (all x all y all t (CC(x,y,t) <-> P_t(x,y,t) & P_t(y,x,t))) # label(non_clause).  [assumption].
63 (all x all y (CP(x,y) <-> (exists t PRE(x,t)) & (all t (PRE(x,t) -> P_t(x,y,t))))) # label(non_clause).  [assumption].
64 (all x all y ((exists t PRE(x,t)) -> (CP(x,y) <-> P(x,y)))) # label(non_clause).  [assumption].
65 (all x (ED(x) | PD(x) | Q(x) -> (exists t PRE(x,t)))) # label(non_clause).  [assumption].
66 (all x all t all t1 (PRE(x,t) & P(t1,t) -> PRE(x,t1))) # label(non_clause).  [assumption].
67 (all x all t (PRE(x,t) -> T(t))) # label(non_clause).  [assumption].
68 (all x all t all t1 all t2 (PRE(x,t1) & PRE(x,t2) & SUM(t,t1,t2) -> PRE(x,t))) # label(non_clause).  [assumption].
69 (all x all y (P(x,y) -> (T(x) <-> T(y)))) # label(non_clause).  [assumption].
70 (all x all y (P(x,y) -> (T(x) <-> T(y)))) # label(non_clause).  [assumption].
71 (all x all y (T(x) -> P(x,x))) # label(non_clause).  [assumption].
72 (all x all y (T(x) & T(y) & P(x,y) & P(y,x) -> x = y)) # label(non_clause).  [assumption].
73 (all x all y all z (T(x) & T(y) & P(x,y) & P(y,z) -> P(x,z))) # label(non_clause).  [assumption].
74 (all x all y (T(x) & T(y) & -P(x,y) -> (exists z (T(z) & P(z,x) & -O(z,y))))) # label(non_clause).  [assumption].
75 (all x all y (T(x) & T(y) & -P(x,y) -> (exists z (P(z,x) & DJ(z,y) & T(z))))) # label(non_clause).  [assumption].
76 (all x all y (T(x) & T(y) -> (PP(x,y) <-> P(x,y) & -P(y,x)))) # label(non_clause).  [assumption].
77 (all x all y (T(x) & T(y) -> (O(x,y) <-> (exists z (P(z,x) & P(z,y) & T(z)))))) # label(non_clause).  [assumption].
78 (all x all y (T(x) & T(y) -> (DJ(x,y) <-> -O(x,y)))) # label(non_clause).  [assumption].
79 (all x all y (T(x) & T(y) -> (U(x,y) <-> (exists z (P(x,z) & P(y,z) & T(z)))))) # label(non_clause).  [assumption].
80 (all x (T(x) -> (AtP(x) <-> (all y (T(y) & P(y,x) -> y = x))))) # label(non_clause).  [assumption].
81 (all x all y (T(x) & T(y) & U(x,y) -> (exists z (T(z) & (all w (T(w) -> (O(w,z) <-> O(w,x) | O(w,y)))))))) # label(non_clause).  [assumption].
82 (all x all y (T(x) & T(y) & O(x,y) -> (exists z (T(z) & (all w (T(w) -> (PP(w,z) <-> PP(w,x) & PP(w,y)))))))) # label(non_clause).  [assumption].
83 (all x all y all z (T(x) & T(y) & T(z) -> (SUM(z,x,y) <-> (all w (T(w) -> (O(w,z) <-> O(w,x) | O(w,y))))))) # label(non_clause).  [assumption].
84 (all x (ED(x) | PD(x) | Q(x) | AB(x) -> PT(x))) # label(non_clause).  [assumption].
85 (all x (PED(x) | NPED(x) | AS(x) -> ED(x))) # label(non_clause).  [assumption].
86 (all x (EV(x) | STV(x) -> PD(x))) # label(non_clause).  [assumption].
87 (all x (TQ(x) | PQ(x) | AQ(x) -> Q(x))) # label(non_clause).  [assumption].
88 (all x (R(x) -> AB(x))) # label(non_clause).  [assumption].
89 (all x (M(x) | F(x) | POB(x) -> PED(x))) # label(non_clause).  [assumption].
90 (all x (NPOB(x) -> NPED(x))) # label(non_clause).  [assumption].
91 (all x (ACH(x) | ACC(x) -> EV(x))) # label(non_clause).  [assumption].
92 (all x (ST(x) | PRO(x) -> STV(x))) # label(non_clause).  [assumption].
93 (all x (TL(x) -> TQ(x))) # label(non_clause).  [assumption].
94 (all x (SL(x) -> PQ(x))) # label(non_clause).  [assumption].
95 (all x (TR(x) | PR(x) | AR(x) -> R(x))) # label(non_clause).  [assumption].
96 (all x (APO(x) | NAPO(x) -> POB(x))) # label(non_clause).  [assumption].
97 (all x (MOB(x) | SOB(x) -> NPOB(x))) # label(non_clause).  [assumption].
98 (all x (T(x) -> TR(x))) # label(non_clause).  [assumption].
99 (all x (S(x) -> PR(x))) # label(non_clause).  [assumption].
100 (all x (ASO(x) | NASO(x) -> SOB(x))) # label(non_clause).  [assumption].
101 (all x (SAG(x) | SC(x) -> ASO(x))) # label(non_clause).  [assumption].
102 (all x (PT(x) <-> ED(x) | PD(x) | Q(x) | AB(x))) # label(non_clause).  [assumption].
103 (all x (ED(x) -> -PD(x) & -Q(x) & -AB(x))) # label(non_clause).  [assumption].
104 (all x (PD(x) -> -Q(x) & -AB(x))) # label(non_clause).  [assumption].
105 (all x (Q(x) -> -AB(x))) # label(non_clause).  [assumption].
106 (all x (ED(x) <-> PED(x) | NPED(x) | AS(x))) # label(non_clause).  [assumption].
107 (all x (PED(x) -> -NPED(x) & -AS(x))) # label(non_clause).  [assumption].
108 (all x (NPED(x) -> -AS(x))) # label(non_clause).  [assumption].
109 (all x (PD(x) <-> EV(x) | STV(x))) # label(non_clause).  [assumption].
110 (all x (EV(x) -> -STV(x))) # label(non_clause).  [assumption].
111 (all x (Q(x) <-> TQ(x) | PQ(x) | AQ(x))) # label(non_clause).  [assumption].
112 (all x (TQ(x) -> -PQ(x) & -AQ(x))) # label(non_clause).  [assumption].
113 (all x (PQ(x) -> -AQ(x))) # label(non_clause).  [assumption].
114 (all x (PED(x) <-> M(x) | F(x) | POB(x))) # label(non_clause).  [assumption].
115 (all x (M(x) -> -F(x) & -POB(x))) # label(non_clause).  [assumption].
116 (all x (F(x) -> -POB(x))) # label(non_clause).  [assumption].
117 (all x (EV(x) <-> ACH(x) | ACC(x))) # label(non_clause).  [assumption].
118 (all x (ACH(x) -> -ACC(x))) # label(non_clause).  [assumption].
119 (all x (STV(x) <-> ST(x) | PRO(x))) # label(non_clause).  [assumption].
120 (all x (ST(x) -> -PRO(x))) # label(non_clause).  [assumption].
121 (all x (R(x) <-> TR(x) | PR(x) | AR(x))) # label(non_clause).  [assumption].
122 (all x (TR(x) -> -PR(x) & -AR(x))) # label(non_clause).  [assumption].
123 (all x (PR(x) -> -AR(x))) # label(non_clause).  [assumption].
124 (all x (POB(x) <-> APO(x) | NAPO(x))) # label(non_clause).  [assumption].
125 (all x (APO(x) -> -NAPO(x))) # label(non_clause).  [assumption].
126 (all x (NPOB(x) <-> MOB(x) | SOB(x))) # label(non_clause).  [assumption].
127 (all x (MOB(x) -> -SOB(x))) # label(non_clause).  [assumption].
128 (all x (SOB(x) <-> ASO(x) | NASO(x))) # label(non_clause).  [assumption].
129 (all x (ASO(x) -> -NASO(x))) # label(non_clause).  [assumption].
130 (all x (ASO(x) <-> SAG(x) | SC(x))) # label(non_clause).  [assumption].
131 (all x (SAG(x) -> -SC(x))) # label(non_clause).  [assumption].

============================== end of process non-clausal formulas ===

============================== CLAUSES FOR SEARCH ====================

formulas(mace4_clauses).
-O(x,y) | P(f1(x,y),x).
-O(x,y) | P(f1(x,y),y).
O(x,y) | -P(z,x) | -P(z,y).
-Sum(x,y,z) | -O(u,x) | O(u,y) | O(u,z).
-Sum(x,y,z) | O(u,x) | -O(u,y).
-Sum(x,y,z) | O(u,x) | -O(u,z).
Sum(x,y,z) | O(f2(y,z,x),x) | O(f2(y,z,x),y) | O(f2(y,z,x),z).
Sum(x,y,z) | -O(f2(y,z,x),x) | -O(f2(y,z,x),y).
Sum(x,y,z) | -O(f2(y,z,x),x) | -O(f2(y,z,x),z).
P(x,x).
-P(x,y) | -P(y,z) | P(x,z).
-P(x,y) | -P(y,z) | y = x.
P(x,y) | P(f3(x,y),x).
P(x,y) | -O(f3(x,y),y).
-Obj(x) | -P(y,x) | Obj(y).
-E(x) | -P(y,x) | E(y).
-Qi(x) | -P(y,x) | Qi(y).
-Sjk(x) | -P(y,x) | Sjk(y).
-C(x) | -P(y,x) | C(y).
-Obj(x) | -Obj(y) | -SUM(z,x,y) | Obj(z).
-E(x) | -E(y) | -SUM(z,x,y) | E(z).
-Qi(x) | -Qi(y) | -SUM(z,x,y) | Qi(z).
-Sjk(x) | -Sjk(y) | -SUM(z,x,y) | Sjk(z).
-C(x) | -C(y) | -SUM(z,x,y) | C(z).
-R(x) | -PRE(x,y) | -PRE(x,z) | -P_t(u,x,y) | P_t(u,x,z).
-R(x) | -PRE(x,y) | -PRE(x,z) | P_t(u,x,y) | -P_t(u,x,z).
-sij(x) | -sij(y) | -PRE(x,z) | PRE(y,z).
-L(x,y,z) | R(x).
-L(x,y,z) | Q(y).
-L(x,y,z) | PRE(y,z).
-L(x,y,z) | -P(u,z) | -L(w,y,u) | -sij(x) | -sij(w) | -PRE(x,v5) | P_t(w,x,v5).
-L(x,y,z) | -L(u,y,w) | -SUM(v5,z,w) | -SUM(v6,x,u) | -sij(x) | -sij(u) | L(v6,y,v5).
-L(x,y,z) | -Qi(y) | sij(x).
-Q(x) | -PRE(x,y) | L(f4(x,y),x,y).
-L(x,y,z) | -L(u,y,z) | -sjk(x) | -sjk(u) | u = x.
-L(x,y,z) | -PRE(y,u) | -sjk(x) | L(f5(x,y,z,u),y,u).
-L(x,y,z) | -PRE(y,u) | -sjk(x) | sjk(f5(x,y,z,u)).
-L(x,y,z) | -CC(u,x,z) | -CC(w,y,z) | L(u,w,z).
-PC(x,y,z) | Obj(x).
-PC(x,y,z) | E(x).
-E(x) | -PRE(x,y) | PC(f6(x,y),x,y).
-Obj(x) | -PRE(x,y) | PC(f7(x,y),x,y).
-PC(x,y,z) | -P_t(y,u,z) | -E(u) | PC(x,u,z).
-PC(x,y,z) | -P_t(u,x,z) | PC(u,y,z).
-I(x,y) | -Qi(x) | -E(y) | -I(z,u) | -Qj(z) | -Obj(u) | -Qj(x).
-I(x,y) | -Qi(x) | -E(y) | -I(z,u) | -Qj(z) | -Obj(u) | -Qi(z).
-L(x,y,z) | -TQ(y) | z = x.
-E(x) | TQ(f8(x)).
-E(x) | I(f8(x),x).
-CF(x,y,z) | c(x).
-CF(x,y,z) | PRE(y,z).
-c(x) | -PRE(x,y) | -PRE(x,z) | -P_t(x,u,y) | P_t(u,x,z).
-c(x) | -PRE(x,y) | -PRE(x,z) | P_t(x,u,y) | -P_t(u,x,z).
-I(x,y) | Q(x).
-I(x,y) | -I(x,z) | z = y.
-Q(x) | I(x,f9(x)).
-I(x,y) | -PRE(x,z) | PRE(y,z).
-I(x,y) | PRE(x,z) | -PRE(y,z).
-I(x,y) | -I(z,y) | -Qi(x) | -Qi(z) | z = x.
-CC(x,y,z) | -I(f10(x,y,z),x) | -Qi(f10(x,y,z)) | I(f11(x,y,z),y).
-CC(x,y,z) | -I(f10(x,y,z),x) | -Qi(f10(x,y,z)) | Qi(f11(x,y,z)).
-CC(x,y,z) | I(f10(x,y,z),x) | -I(u,y) | -Qi(u).
-CC(x,y,z) | Qi(f10(x,y,z)) | -I(u,y) | -Qi(u).
-CC(x,y,z) | -I(u,x) | -I(w,y) | -Qi(u) | -Qi(w) | CC(u,w,z).
-I(x,y) | -I(z,u) | -Qi(x) | -Sum(w,x,z) | -Sum(s,y,u) | I(w,s).
-PRE(x,y) | T(y).
-PRE(x,y) | -P(z,y) | PRE(x,z).
-PRE(x,y) | -PRE(x,z) | -SUM(u,y,z) | PRE(x,u).
-Obj(x) | PT(x).
-E(x) | PT(x).
-Q(x) | PT(x).
-R(x) | PT(x).
-C(x) | PT(x).
-AS(x) | PT(x).
-PT(x) | PRE(x,f12(x)).
-O_t(x,y,z) | P_t(f13(x,y,z),x,z).
-O_t(x,y,z) | P_t(f13(x,y,z),y,z).
O_t(x,y,z) | -P_t(u,x,z) | -P_t(u,y,z).
-P_t(x,y,z) | PRE(x,z).
-P_t(x,y,z) | PRE(y,z).
-PRE(x,y) | P_t(x,x,y).
-P_t(x,y,z) | -P_t(y,u,z) | P_t(x,u,z).
-PRE(x,y) | -PRE(z,y) | P_t(x,z,y) | P_t(f14(x,z,y),x,y).
-PRE(x,y) | -PRE(z,y) | P_t(x,z,y) | -O_t(f14(x,z,y),z,y).
-Obj(x) | -P_t(y,x,z) | Obj(y).
-E(x) | -P_t(y,x,z) | E(y).
-Qi(x) | -P_t(y,x,z) | Qi(y).
-Sjk(x) | -P_t(y,x,z) | Sjk(y).
-C(x) | -P_t(y,x,z) | C(y).
-CC(x,y,z) | P_t(x,y,z).
-CC(x,y,z) | P_t(y,x,z).
CC(x,y,z) | -P_t(x,y,z) | -P_t(y,x,z).
-CP(x,y) | PRE(x,f15(x,y)).
-CP(x,y) | -PRE(x,z) | P_t(x,y,z).
CP(x,y) | -PRE(x,z) | PRE(x,f16(x,y)).
CP(x,y) | -PRE(x,z) | -P_t(x,y,f16(x,y)).
-PRE(x,y) | -CP(x,z) | P(x,z).
-PRE(x,y) | CP(x,z) | -P(x,z).
-ED(x) | PRE(x,f17(x)).
-PD(x) | PRE(x,f17(x)).
-Q(x) | PRE(x,f17(x)).
-PRE(x,y) | -P(z,y) | PRE(x,z).
-PRE(x,y) | T(y).
-PRE(x,y) | -PRE(x,z) | -SUM(u,y,z) | PRE(x,u).
-P(x,y) | -T(x) | T(y).
-P(x,y) | T(x) | -T(y).
-P(x,y) | -T(x) | T(y).
-P(x,y) | T(x) | -T(y).
-T(x) | P(x,x).
-T(x) | -T(y) | -P(x,y) | -P(y,x) | y = x.
-T(x) | -T(y) | -P(x,y) | -P(y,z) | P(x,z).
-T(x) | -T(y) | P(x,y) | T(f18(x,y)).
-T(x) | -T(y) | P(x,y) | P(f18(x,y),x).
-T(x) | -T(y) | P(x,y) | -O(f18(x,y),y).
-T(x) | -T(y) | P(x,y) | P(f19(x,y),x).
-T(x) | -T(y) | P(x,y) | DJ(f19(x,y),y).
-T(x) | -T(y) | P(x,y) | T(f19(x,y)).
-T(x) | -T(y) | -PP(x,y) | P(x,y).
-T(x) | -T(y) | -PP(x,y) | -P(y,x).
-T(x) | -T(y) | PP(x,y) | -P(x,y) | P(y,x).
-T(x) | -T(y) | -O(x,y) | P(f20(x,y),x).
-T(x) | -T(y) | -O(x,y) | P(f20(x,y),y).
-T(x) | -T(y) | -O(x,y) | T(f20(x,y)).
-T(x) | -T(y) | O(x,y) | -P(z,x) | -P(z,y) | -T(z).
-T(x) | -T(y) | -DJ(x,y) | -O(x,y).
-T(x) | -T(y) | DJ(x,y) | O(x,y).
-T(x) | -T(y) | -U(x,y) | P(x,f21(x,y)).
-T(x) | -T(y) | -U(x,y) | P(y,f21(x,y)).
-T(x) | -T(y) | -U(x,y) | T(f21(x,y)).
-T(x) | -T(y) | U(x,y) | -P(x,z) | -P(y,z) | -T(z).
-T(x) | -AtP(x) | -T(y) | -P(y,x) | y = x.
-T(x) | AtP(x) | T(f22(x)).
-T(x) | AtP(x) | P(f22(x),x).
-T(x) | AtP(x) | f22(x) != x.
-T(x) | -T(y) | -U(x,y) | T(f23(x,y)).
-T(x) | -T(y) | -U(x,y) | -T(z) | -O(z,f23(x,y)) | O(z,x) | O(z,y).
-T(x) | -T(y) | -U(x,y) | -T(z) | O(z,f23(x,y)) | -O(z,x).
-T(x) | -T(y) | -U(x,y) | -T(z) | O(z,f23(x,y)) | -O(z,y).
-T(x) | -T(y) | -O(x,y) | T(f24(x,y)).
-T(x) | -T(y) | -O(x,y) | -T(z) | -PP(z,f24(x,y)) | PP(z,x).
-T(x) | -T(y) | -O(x,y) | -T(z) | -PP(z,f24(x,y)) | PP(z,y).
-T(x) | -T(y) | -O(x,y) | -T(z) | PP(z,f24(x,y)) | -PP(z,x) | -PP(z,y).
-T(x) | -T(y) | -T(z) | -SUM(z,x,y) | -T(u) | -O(u,z) | O(u,x) | O(u,y).
-T(x) | -T(y) | -T(z) | -SUM(z,x,y) | -T(u) | O(u,z) | -O(u,x).
-T(x) | -T(y) | -T(z) | -SUM(z,x,y) | -T(u) | O(u,z) | -O(u,y).
-T(x) | -T(y) | -T(z) | SUM(z,x,y) | T(f25(x,y,z)).
-T(x) | -T(y) | -T(z) | SUM(z,x,y) | O(f25(x,y,z),z) | O(f25(x,y,z),x) | O(f25(x,y,z),y).
-T(x) | -T(y) | -T(z) | SUM(z,x,y) | -O(f25(x,y,z),z) | -O(f25(x,y,z),x).
-T(x) | -T(y) | -T(z) | SUM(z,x,y) | -O(f25(x,y,z),z) | -O(f25(x,y,z),y).
-ED(x) | PT(x).
-PD(x) | PT(x).
-Q(x) | PT(x).
-AB(x) | PT(x).
-PED(x) | ED(x).
-NPED(x) | ED(x).
-AS(x) | ED(x).
-EV(x) | PD(x).
-STV(x) | PD(x).
-TQ(x) | Q(x).
-PQ(x) | Q(x).
-AQ(x) | Q(x).
-R(x) | AB(x).
-M(x) | PED(x).
-F(x) | PED(x).
-POB(x) | PED(x).
-NPOB(x) | NPED(x).
-ACH(x) | EV(x).
-ACC(x) | EV(x).
-ST(x) | STV(x).
-PRO(x) | STV(x).
-TL(x) | TQ(x).
-SL(x) | PQ(x).
-TR(x) | R(x).
-PR(x) | R(x).
-AR(x) | R(x).
-APO(x) | POB(x).
-NAPO(x) | POB(x).
-MOB(x) | NPOB(x).
-SOB(x) | NPOB(x).
-T(x) | TR(x).
-S(x) | PR(x).
-ASO(x) | SOB(x).
-NASO(x) | SOB(x).
-SAG(x) | ASO(x).
-SC(x) | ASO(x).
-PT(x) | ED(x) | PD(x) | Q(x) | AB(x).
PT(x) | -ED(x).
PT(x) | -PD(x).
PT(x) | -Q(x).
PT(x) | -AB(x).
-ED(x) | -PD(x).
-ED(x) | -Q(x).
-ED(x) | -AB(x).
-PD(x) | -Q(x).
-PD(x) | -AB(x).
-Q(x) | -AB(x).
-ED(x) | PED(x) | NPED(x) | AS(x).
ED(x) | -PED(x).
ED(x) | -NPED(x).
ED(x) | -AS(x).
-PED(x) | -NPED(x).
-PED(x) | -AS(x).
-NPED(x) | -AS(x).
-PD(x) | EV(x) | STV(x).
PD(x) | -EV(x).
PD(x) | -STV(x).
-EV(x) | -STV(x).
-Q(x) | TQ(x) | PQ(x) | AQ(x).
Q(x) | -TQ(x).
Q(x) | -PQ(x).
Q(x) | -AQ(x).
-TQ(x) | -PQ(x).
-TQ(x) | -AQ(x).
-PQ(x) | -AQ(x).
-PED(x) | M(x) | F(x) | POB(x).
PED(x) | -M(x).
PED(x) | -F(x).
PED(x) | -POB(x).
-M(x) | -F(x).
-M(x) | -POB(x).
-F(x) | -POB(x).
-EV(x) | ACH(x) | ACC(x).
EV(x) | -ACH(x).
EV(x) | -ACC(x).
-ACH(x) | -ACC(x).
-STV(x) | ST(x) | PRO(x).
STV(x) | -ST(x).
STV(x) | -PRO(x).
-ST(x) | -PRO(x).
-R(x) | TR(x) | PR(x) | AR(x).
R(x) | -TR(x).
R(x) | -PR(x).
R(x) | -AR(x).
-TR(x) | -PR(x).
-TR(x) | -AR(x).
-PR(x) | -AR(x).
-POB(x) | APO(x) | NAPO(x).
POB(x) | -APO(x).
POB(x) | -NAPO(x).
-APO(x) | -NAPO(x).
-NPOB(x) | MOB(x) | SOB(x).
NPOB(x) | -MOB(x).
NPOB(x) | -SOB(x).
-MOB(x) | -SOB(x).
-SOB(x) | ASO(x) | NASO(x).
SOB(x) | -ASO(x).
SOB(x) | -NASO(x).
-ASO(x) | -NASO(x).
-ASO(x) | SAG(x) | SC(x).
ASO(x) | -SAG(x).
ASO(x) | -SC(x).
-SAG(x) | -SC(x).
end_of_list.

============================== end of clauses for search =============

% The maximum domain element in the input is 0.

============================== DOMAIN SIZE 2 =========================

=== Mace4 starting on domain size 2. ===

============================== MODEL =================================

interpretation( 2, [number=1, seconds=0], [

        function(s, [ 0 ]),

        function(f8(_), [ 0, 0 ]),

        function(f9(_), [ 0, 0 ]),

        function(f12(_), [ 0, 0 ]),

        function(f17(_), [ 0, 0 ]),

        function(f22(_), [ 0, 0 ]),

        function(f1(_,_), [
			   0, 0,
			   0, 1 ]),

        function(f3(_,_), [
			   0, 0,
			   1, 0 ]),

        function(f4(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f6(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f7(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f15(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f16(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f18(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f19(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f20(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f21(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f23(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f24(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f2(_,_,_), [
			   0, 0,
			   1, 0,
			   1, 0,
			   0, 0 ]),

        function(f10(_,_,_), [
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0 ]),

        function(f11(_,_,_), [
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0 ]),

        function(f13(_,_,_), [
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0 ]),

        function(f14(_,_,_), [
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0 ]),

        function(f25(_,_,_), [
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0 ]),

        function(f5(_,_,_,_), [
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0 ]),

        relation(AB(_), [ 0, 0 ]),

        relation(ACC(_), [ 0, 0 ]),

        relation(ACH(_), [ 0, 0 ]),

        relation(APO(_), [ 0, 0 ]),

        relation(AQ(_), [ 0, 0 ]),

        relation(AR(_), [ 0, 0 ]),

        relation(AS(_), [ 0, 0 ]),

        relation(ASO(_), [ 0, 0 ]),

        relation(AtP(_), [ 0, 0 ]),

        relation(C(_), [ 0, 0 ]),

        relation(E(_), [ 0, 0 ]),

        relation(ED(_), [ 0, 0 ]),

        relation(EV(_), [ 0, 0 ]),

        relation(F(_), [ 0, 0 ]),

        relation(M(_), [ 0, 0 ]),

        relation(MOB(_), [ 0, 0 ]),

        relation(NAPO(_), [ 0, 0 ]),

        relation(NASO(_), [ 0, 0 ]),

        relation(NPED(_), [ 0, 0 ]),

        relation(NPOB(_), [ 0, 0 ]),

        relation(Obj(_), [ 0, 0 ]),

        relation(PD(_), [ 0, 0 ]),

        relation(PED(_), [ 0, 0 ]),

        relation(POB(_), [ 0, 0 ]),

        relation(PQ(_), [ 0, 0 ]),

        relation(PR(_), [ 0, 0 ]),

        relation(PRO(_), [ 0, 0 ]),

        relation(PT(_), [ 0, 0 ]),

        relation(Q(_), [ 0, 0 ]),

        relation(Qi(_), [ 0, 0 ]),

        relation(Qj(_), [ 0, 0 ]),

        relation(R(_), [ 0, 0 ]),

        relation(S(_), [ 0, 0 ]),

        relation(SAG(_), [ 0, 0 ]),

        relation(SC(_), [ 0, 0 ]),

        relation(SL(_), [ 0, 0 ]),

        relation(SOB(_), [ 0, 0 ]),

        relation(ST(_), [ 0, 0 ]),

        relation(STV(_), [ 0, 0 ]),

        relation(Sjk(_), [ 0, 0 ]),

        relation(T(_), [ 0, 0 ]),

        relation(TL(_), [ 0, 0 ]),

        relation(TQ(_), [ 0, 0 ]),

        relation(TR(_), [ 0, 0 ]),

        relation(c(_), [ 0, 0 ]),

        relation(sij(_), [ 0, 0 ]),

        relation(sjk(_), [ 0, 0 ]),

        relation(CP(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(DJ(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(I(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(O(_,_), [
			   1, 0,
			   0, 1 ]),

        relation(P(_,_), [
			   1, 0,
			   0, 1 ]),

        relation(PP(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(PRE(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(U(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(CC(_,_,_), [
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0 ]),

        relation(CF(_,_,_), [
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0 ]),

        relation(L(_,_,_), [
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0 ]),

        relation(O_t(_,_,_), [
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0 ]),

        relation(PC(_,_,_), [
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0 ]),

        relation(P_t(_,_,_), [
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0 ]),

        relation(SUM(_,_,_), [
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0 ]),

        relation(Sum(_,_,_), [
			   1, 0,
			   0, 0,
			   0, 0,
			   0, 1 ])
]).

============================== end of model ==========================

============================== STATISTICS ============================

For domain size 2.

Current CPU time: 0.00 seconds (total CPU time: 0.00 seconds).
Ground clauses: seen=1554, kept=1303.
Selections=154, assignments=154, propagations=163, current_models=1.
Rewrite_terms=364, rewrite_bools=1826, indexes=58.
Rules_from_neg_clauses=8, cross_offs=8.

============================== end of statistics =====================

------ process 23632 exit (max_models) ------

User_CPU=0.00, System_CPU=0.03, Wall_clock=0.

Exiting with 1 model.

Process 23632 exit (max_models) Thu Mar 18 08:25:41 2021
The process finished Thu Mar 18 08:25:41 2021

========================== MACLEOD SUMMARY ===========================
reasoner: C:/Users/torsten/macleod/mace4
status: MODEL
execution finished: Thu Mar 18 08:25:53 2021
total CPU time used: 0
The command was "C:/Users/torsten/macleod/mace4 -v0 -t600 -s60 -n2 -N40 -f C:\Users\torsten\GitHub\colore\ontologies\dolce\conversions\dolce_core.all.p9"
============================ end of footer ===========================

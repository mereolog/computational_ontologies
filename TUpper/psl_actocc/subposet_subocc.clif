/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved. 
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
 *******************************************************************************/

(cl-text https://raw.githubusercontent.com/mereolog/computational_ontologies/main/tupper/psl_actocc/subposet_subocc.clif

(cl-imports https://raw.githubusercontent.com/mereolog/computational_ontologies/main/tupper/psl_actocc/mereo_subocc.clif)

(cl-imports https://raw.githubusercontent.com/mereolog/computational_ontologies/main/tupper/psl_occtree/earlier.clif)

(forall (s1 s2 o)
	(if	(and	(subactivity_occurrence s1 o)
			(subactivity_occurrence s2 o)
			(arboreal s1)
			(arboreal s2))
		(or	(earlier s1 s2)
			(earlier s2 s1)
			(= s1 s2))))

(forall (s1 s2 o)
	(if	(and	(subactivity_occurrence s1 o)
			(subactivity_occurrence s2 o)
			(earlier s1 s2))
		(exists (s3)
			(and	(root_occ s3 o)
				(or	(earlier s3 s1)
					(= s3 s1))))))

(forall (s1 s2 o)
	(if	(and	(subactivity_occurrence s1 o)
			(subactivity_occurrence s2 o)
			(earlier s1 s2))
		(exists (s3)
			(succ_subocc s1 s3 o))))

(forall (o)
	(if	(activity_occurrence o)
		(exists (s)
			(root_occ s o))))

(forall (o)
	(if	(activity_occurrence o)
		(exists (s)
			(leaf_occ s o))))

(forall (s1 s2 o)
	(iff	(succ_subocc s1 s2 o)
		(and	(subactivity_occurrence s1 o)
			(subactivity_occurrence s2 o)
			(earlier s1 s2)
			(not (exists (s3)
				(and	(subactivity_occurrence s3 o)
					(earlier s1 s3)
					(earlier s3 s2)))))))

(forall (s o)
	(iff	(root_occ s o)
		(and	(subactivity_occurrence s o)
			(not (exists (s1)
				(and	(subactivity_occurrence s1 o)
					(earlier s1 s)))))))

(forall (s o)
	(iff	(leaf_occ s o)
		(and	(subactivity_occurrence s o)
			(not (exists (s1)
				(and	(subactivity_occurrence s1 o)
					(earlier s s1)))))))


)

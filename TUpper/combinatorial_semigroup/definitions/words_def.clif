/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved.
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
*******************************************************************************/


(cl-text https://raw.githubusercontent.com/mereolog/computational_ontologies/main/tupper/combinatorial_semigroup/definitions/words_def.clif

(cl-imports https://raw.githubusercontent.com/mereolog/computational_ontologies/main/tupper/combinatorial_magma/semigroup_gen.clif)

(cl-imports https://raw.githubusercontent.com/mereolog/computational_ontologies/main/tupper/magma/definitions/magma_defs.clif

(forall (x y)
	(iff	(subword x y)
		(or	(= x y)
			(exists (u)
				(= y (op u x)))
			(exists (v)
				(= y (op x v)))
			(exists (u v)
				(= y (op u (op x v)))))))

(forall (x y)
	(iff	(initial_subword x y)
		(or	(= x y)
			(exists (u)
				(= y (op x u))))))

(forall (x y)
	(iff	(end_subword x y)
		(or	(= x y)
			(exists (u)
				(= y (op u x))))))

(forall (x y z)
	(iff	(append x y z)
		(and	(generator x)
			(= z (op y x)))))

(forall (x)
	(iff	(bounded_word x)
		(or	(generator x)
			(and	(exists (y z)
					(and	(generator y)
						(= (op y z) x)))
				(exists (y z)
					(and	(generator y)
						(= (op z y) x)))))))

(forall (z)
	(iff	(thin_word z)
		(forall (y)
			(if	(subword y z)
				(bounded_word y)))))

(forall (x)
	(iff	(tame_word x)
		(forall (y z w)
			(if	(and	(end_subword (z (op y x)))
					(end_subword w x))
				(or	(end_subword w z)
					(end_subword z w))))))

(forall (x)
	(iff	(reduced_word x)
		(not (exists (y z)
			(and	(inverse y z)
				(subword (op y z) x))))))

)

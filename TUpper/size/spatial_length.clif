/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved.
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger - initial implementation
 *******************************************************************************/

(cl-text https://raw.githubusercontent.com/gruninger/colore/master/ontologies/size/spatial_length.clif

(cl-module field (cl-imports https://raw.githubusercontent.com/gruninger/colore/master/ontologies/ringoids/field.clif))

(spatial_length zero_length)

(forall (l1 l2)
(if  (and	(spatial_length l1)
		(spatial_length l2))
	  (spatial_length (add_length l1 l2))))

(forall (l1 l2 l3)
(if  (and	(spatial_length l1)
		(spatial_length l2)
		(spatial_length l3))
          (= (add_length (add_length l1 l2) l3) (add_length l1 (add_length l2 l3)))))

(forall (l)
(if  (spatial_length l)
          (= (add_length l zero_length) l)))

(forall (l1)
(if     (spatial_length l1)
        (exists (l2)
                (and    (spatial_length l2)
                        (= (add_length l1 l2) zero_length)))))

(forall (l1 l2)
(if  (and	(spatial_length l1)
		(spatial_length l2))
          (= (add_length l1 l2) (add_length l2 l1))))

(forall (l r)
(if	(and	(spatial_length l)
		(field r))
	(spatial_length (mult_length r l))))

(forall (l1 l2 r)
(if	(and	(spatial_length l1)
		(spatial_length l2)
		(field r))
        (= (mult_length r (add_length l1 l2)) 
	   (add_length (mult_length r l1) (mult_length r l2)))))

(forall (l r s)
(if	(and	(spatial_length l)
		(field r)
		(field s))
        (= (mult_length (sum r s) l) 
	   (add_length (mult_length r l) (mult_length s l)))))

(forall (l r s)
(if	(and	(spatial_length l)
		(field r)
		(field s))
        (= (mult_length (prod r s) l) (mult_length r (mult_length s l)))))

(forall (l)
(if	(spatial_length l)
        (= l (mult_length one_length l))))

(forall (l1 l2 l3)
	(if	(and	(spatial_length l1)
			(spatial_length l2)
			(spatial_length l3))
        	(iff    (lesser_length l1 l2)
                	(lesser_length (add_length l1 l3) (add_length l2 l3)))))

(forall (l1 l2 l3)
	(if	(and	(spatial_length l1)
			(spatial_length l2)
			(spatial_length l3))
        	(iff    (= l1 l2)
                	(= (add_length l1 l3) (add_length l2 l3)))))

(forall (x)
	(if	(spatial_length x)
		(not (lesser_length x zero_length))))

)


/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved. 
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 4.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/4.0/legalcode.
 *
 * Transportation Network
 *
 * Contributors:
 *    Megan Katsumi - initial implementation
 * 
 *******************************************************************************/
 
(cl-text https://raw.githubusercontent.com/mereolog/computational_ontologies/main/TUpper/transportation/transportation_network.clif

(cl-comment 'The epp.clif theory is a definitional extension of codi_linear that defines parthood, P, and proper parthood, PP, as equidimensional containment')
(cl-imports https://raw.githubusercontent.com/mereolog/computational_ontologies/main/TUpper/multidim_mereotopology_codi/definitions/epp.clif)

(cl-comment 'The curve.clif theory defines 1d and 0d elements in CODI')
(cl-imports https://raw.githubusercontent.com/mereolog/computational_ontologies/main/TUpper/multidim_mereotopology_codi/definitions/curve.clif)
(cl-comment 'network structure axioms: reused and renamed from directed_multigraph.clif')
(forall (e x)
	(if	(edge e)
		(not (arc e x x))))

(forall (e x y)
	(if	(arc e x y)
		(and	(edge e)
			(node x)
			(node y))))

(forall (x)
	(if	(edge x)
		(not (node x))))
		
(forall (x)
	(if	(edge x)
		(exists (y z)
			(arc x y z))))

(forall (e x y z u v)
	(if	(and	(arc e x y)
			(arc e u v))
		(and	(= x u)
			(= y v))))

(cl-comment 'path sort: a path is a kind of Curve that begins and ends at a node')
(forall (p n1 n2)
	(if	(path p n1 n2)
		(and	(Curve p)
				(node n1)
				(node n2))))
				
(cl-comment 'a node is a kind of PointRegion')
(forall (x)
	(if	(node x)
		(PointRegion x)))
							
				
(cl-comment 'an arc is an atomic path, i.e. it spans a single edge')
(forall (e v1 v2)	
	(if	(arc e v1 v2)
		(path e v1 v2)))
		
(forall (e v1 v2 e2)
	(if	(and	(arc e v1 v2)
				(P e2 e))
		(= e e2)))
		
(cl-comment 'the start and end nodes of a path are contained in it')
(forall (p n1 n2)
	(if	(path p n1 n2)
		(and	(Cont n1 p)
				(Cont n2 p))))

(cl-comment 'If a node is contained in a path, then it must be a start or end node of some path that is part of that path')
(forall (v p1 n11 n12)
	(if	(and	(node v)
				(path p1 n11 n12)
				(Cont v p1))
		(exists (p2 n2)
				(and	(or	(path p2 v n2)
							(path p2 n2 v))
						(P p2 p1)))))
		
(cl-comment 'the start and end nodes of a path are unique')
(forall (p n1 n2 n3 n4)
	(if	(and	(path p n1 n2)
				(path p n3 n4))
		(and	(= n1 n3)
				(= n2 n4))))
		
(cl-comment 'unique start arc')
(forall (p p1 p2 n1 n2 n3 n4)
	(if	(and	(path p n1 n2)
				(P p1 p)
				(P p2 p)
				(arc p1 n1 n3)
				(arc p2 n1 n4))
		(= p1 p2)))
		
(cl-comment 'unique end arc')
(forall (p p1 p2 n1 n2 n3 n4)
	(if	(and	(path p n1 n2)
				(P p1 p)
				(P p2 p)
				(arc p1 n3 n2)
				(arc p2 n4 n2))
		(= p1 p2)))
		
(cl-comment 'p1 connects to p2 iff they share an end/start node')
(forall (p1 p2)
	(iff	(connects p1 p2)
			(exists (v1 v2 v3)	(and	(path p1 v1 v2)
										(path p2 v2 v3)))))
										
(cl-comment 'All proper sub-paths of a path must be connected to some other sub-path, but nothing connects to the start arc, and the end arc is not connected to anything')						
(cl-comment 'A subpath that is neither a start or end path must connect to, and be connected to some subpaths')						
(forall (p1 n11 n12 p n1 n2)
	(if	(and	(path p	n1 n2)
				(path p1 n11 n12)
				(not (= n11 n1))
				(not (= n12 n2))
				(PP p1 p))
		(exists (p2 p3)
			(and	(connects p2 p1)
					(connects p1 p3)
					(PP p2 p)
					(PP p3 p)))))

(cl-comment 'connecting paths cannot contain one another')
(cl-comment 'note theorem to evaluate: a path cannot contain anything that connects to its start or is connected to its end')
(cl-comment 'was no path before start path')
(cl-comment 'was no path after end path')
(forall (p1 p2)
	(if  (connects p1 p2)
	     (and	 (not (P p1 p2))
			       (not (P p2 p1)))))
	

(cl-comment 'The connection between arcs in a path is unique within a given path')
(forall (p1 p2 p3 p n11 n12 n21 n22 n31 n32)
	(if	(and	(PP p1 p)
				(PP p2 p)
				(PP p3 p)
				(connects p1 p2)
				(connects p1 p3)
				(arc p1 n11 n12)
				(arc p2 n21 n22)
				(arc p3 n31 n32))
		(= p2 p3)))
		
(cl-comment 'a pair of paths intersects if they contain more than one of the same node and do not form a loop')
(forall (p1 p2)
	(iff	(PI p1 p2)
			(exists (n1 n2)
				(and	(node n1)
						(node n2)
						(Cont n1 p1)
						(Cont n1 p2)
						(Cont n2 p1)
						(Cont n2 p2)
						(not (= n1 n2))))))
										
(cl-comment 'any pair of connected paths that does not intersect forms a path')
(forall (p1 p2)
	(if	(and	(not (PI p1 p2))
				(connected p1 p2))
		(exists	(p n1 n2 n3)	
			(and	(path p n1 n3)
					(path p1 n1 n2)
					(path p2 n2 n3)
					(PP p1 p)
					(PP p2 p)))))

						
(cl-comment 'If p1 is a proper part of p, then there is some other path that is a proper part of p that p1 is connected to')
(forall (p1 n11 n12 p)
	(if	(and	(path p1 n11 n12)
				(PP p1 p))
		(exists (p2 n21 n22)
			(and	(path p2 n21 n22)
					(PP p2 p)
					(or	(connects p1 p2)
						(connects p2 p1))))))
					
(cl-comment 'paths must decompose into arcs')
(forall (p1 n11 n12)
	(if	(and	(path p1 n11 n12)
				(not (arc p1 n11 n12)))
			(exists (p2 n22 p3)
				(and	(arc p2 n11 n22)
						(connects p2 p3)
						(PP p2 p1)
						(PP p3 p1)))))					

(cl-comment 'node ordering')
(forall (p n11 n12)
	(iff	(path_prec p n11 n12)
		(forall (p1 n1 n2)
			(and	(path p n1 n2)
					(P p1 p)
					(path p1 n11 n12)))))												
											

)

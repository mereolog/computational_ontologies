============================== Mace4 =================================
Mace4 (32) version Oct-2007, Oct 2007.
Process 17348 was started by torsten on LAPTOP-UF9R3IH7,
Sun Feb 21 06:54:48 2021
The command was "/cygdrive/c/Users/torsten/macleod/mace4 -v0 -t600 -s60 -n2 -N40 -f C:\Users\torsten\GitHub\colore\ontologies\simple_features\sfc_fol\conversions\sfc_fol_multi_point.all.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file C:\Users\torsten\GitHub\colore\ontologies\simple_features\sfc_fol\conversions\sfc_fol_multi_point.all.p9


formulas(sos).
(all x (sf_multi_point(x) <-> PointRegion(x))).
(all x (PointRegion(x) <-> MinDim(x))).
(all x (MaxDim(x) <-> S(x) & -ZEX(x) & (all y (S(y) -> leq(y,x))))).
(all x (MinDim(x) <-> S(x) & -ZEX(x) & (all y (S(y) & -ZEX(y) -> leq(x,y))))).
(all x all y (leq(x,y) -> S(x))).
(all x all y (leq(x,y) -> S(y))).
(all x (ZEX(x) -> S(x))).
(all x (S(x) -> leq(x,x))).
(all x all y all z (leq(x,y) & leq(y,z) -> leq(x,z))).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x all y (ZEX(x) & S(y) -> leq(x,y))).
(all x (Max(x) <-> S(x) & -ZEX(x) & (all y -PP(x,y)))).
(all x (Min(x) <-> S(x) & -ZEX(x) & (all y -PP(y,x)))).
(all x all y (PP(x,y) <-> P(x,y) & x != y)).
(all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))).
(all x all y (EqDim(x,y) <-> leq(x,y) & leq(y,x))).
(all x all y (Cont(x,y) -> leq(x,y))).
(exists x MinDim(x)).
(all x (S(x) & -ZEX(x) <-> Cont(x,x))).
(all x all y (Cont(x,y) & Cont(y,x) -> x = y)).
(all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))).
(all x all y (ZEX(x) -> S(x) & -Cont(y,x) & -Cont(x,y))).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> leq(z,x) & -EqDim(z,x) & leq(z,y) & -EqDim(z,y))))).
(all x all y (Inc(x,y) <-> (exists z (leq(z,x) & -EqDim(z,x) & Cont(z,x) & P(z,y))) | (exists z (leq(z,y) & -EqDim(z,y) & Cont(z,y) & P(z,x))))).
(all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))).
(all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))).
(all x (sf_geometry_collection(x) -> -sf_point(x) & -sf_curve(x) & -sf_surface(x))).
(all x (sf_geometry_collection(x) <-> sf_multi_point(x) | sf_multi_curve(x) | sf_multi_surface(x))).
(all x (sf_point(x) -> -sf_curve(x) & -sf_surface(x) & -sf_geometry_collection(x))).
(all x (sf_geometry(x) <-> sf_point(x) | sf_curve(x) | sf_surface(x) | sf_geometry_collection(x))).
(all x (sf_surface(x) -> -sf_point(x) & -sf_curve(x) & -sf_geometry_collection(x))).
(all x (sf_curve(x) -> -sf_point(x) & -sf_surface(x) & -sf_geometry_collection(x))).
end_of_list.

% From the command line: clear(verbose).

% From the command line: assign(max_seconds, 600).

% From the command line: assign(max_seconds_per, 60).

% From the command line: assign(domain_size, 2).

% From the command line: assign(iterate_up_to, 40).

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x (sf_multi_point(x) <-> PointRegion(x))) # label(non_clause).  [assumption].
2 (all x (PointRegion(x) <-> MinDim(x))) # label(non_clause).  [assumption].
3 (all x (MaxDim(x) <-> S(x) & -ZEX(x) & (all y (S(y) -> leq(y,x))))) # label(non_clause).  [assumption].
4 (all x (MinDim(x) <-> S(x) & -ZEX(x) & (all y (S(y) & -ZEX(y) -> leq(x,y))))) # label(non_clause).  [assumption].
5 (all x all y (leq(x,y) -> S(x))) # label(non_clause).  [assumption].
6 (all x all y (leq(x,y) -> S(y))) # label(non_clause).  [assumption].
7 (all x (ZEX(x) -> S(x))) # label(non_clause).  [assumption].
8 (all x (S(x) -> leq(x,x))) # label(non_clause).  [assumption].
9 (all x all y all z (leq(x,y) & leq(y,z) -> leq(x,z))) # label(non_clause).  [assumption].
10 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
11 (all x all y (ZEX(x) & S(y) -> leq(x,y))) # label(non_clause).  [assumption].
12 (all x (Max(x) <-> S(x) & -ZEX(x) & (all y -PP(x,y)))) # label(non_clause).  [assumption].
13 (all x (Min(x) <-> S(x) & -ZEX(x) & (all y -PP(y,x)))) # label(non_clause).  [assumption].
14 (all x all y (PP(x,y) <-> P(x,y) & x != y)) # label(non_clause).  [assumption].
15 (all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))) # label(non_clause).  [assumption].
16 (all x all y (EqDim(x,y) <-> leq(x,y) & leq(y,x))) # label(non_clause).  [assumption].
17 (all x all y (Cont(x,y) -> leq(x,y))) # label(non_clause).  [assumption].
18 (exists x MinDim(x)) # label(non_clause).  [assumption].
19 (all x (S(x) & -ZEX(x) <-> Cont(x,x))) # label(non_clause).  [assumption].
20 (all x all y (Cont(x,y) & Cont(y,x) -> x = y)) # label(non_clause).  [assumption].
21 (all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))) # label(non_clause).  [assumption].
22 (all x all y (ZEX(x) -> S(x) & -Cont(y,x) & -Cont(x,y))) # label(non_clause).  [assumption].
23 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
24 (all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> leq(z,x) & -EqDim(z,x) & leq(z,y) & -EqDim(z,y))))) # label(non_clause).  [assumption].
25 (all x all y (Inc(x,y) <-> (exists z (leq(z,x) & -EqDim(z,x) & Cont(z,x) & P(z,y))) | (exists z (leq(z,y) & -EqDim(z,y) & Cont(z,y) & P(z,x))))) # label(non_clause).  [assumption].
26 (all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))) # label(non_clause).  [assumption].
27 (all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
28 (all x (sf_geometry_collection(x) -> -sf_point(x) & -sf_curve(x) & -sf_surface(x))) # label(non_clause).  [assumption].
29 (all x (sf_geometry_collection(x) <-> sf_multi_point(x) | sf_multi_curve(x) | sf_multi_surface(x))) # label(non_clause).  [assumption].
30 (all x (sf_point(x) -> -sf_curve(x) & -sf_surface(x) & -sf_geometry_collection(x))) # label(non_clause).  [assumption].
31 (all x (sf_geometry(x) <-> sf_point(x) | sf_curve(x) | sf_surface(x) | sf_geometry_collection(x))) # label(non_clause).  [assumption].
32 (all x (sf_surface(x) -> -sf_point(x) & -sf_curve(x) & -sf_geometry_collection(x))) # label(non_clause).  [assumption].
33 (all x (sf_curve(x) -> -sf_point(x) & -sf_surface(x) & -sf_geometry_collection(x))) # label(non_clause).  [assumption].

============================== end of process non-clausal formulas ===

============================== CLAUSES FOR SEARCH ====================

formulas(mace4_clauses).
-sf_multi_point(x) | PointRegion(x).
sf_multi_point(x) | -PointRegion(x).
-PointRegion(x) | MinDim(x).
PointRegion(x) | -MinDim(x).
-MaxDim(x) | S(x).
-MaxDim(x) | -ZEX(x).
-MaxDim(x) | -S(y) | leq(y,x).
MaxDim(x) | -S(x) | ZEX(x) | S(f1(x)).
MaxDim(x) | -S(x) | ZEX(x) | -leq(f1(x),x).
-MinDim(x) | S(x).
-MinDim(x) | -ZEX(x).
-MinDim(x) | -S(y) | ZEX(y) | leq(x,y).
MinDim(x) | -S(x) | ZEX(x) | S(f2(x)).
MinDim(x) | -S(x) | ZEX(x) | -ZEX(f2(x)).
MinDim(x) | -S(x) | ZEX(x) | -leq(x,f2(x)).
-leq(x,y) | S(x).
-leq(x,y) | S(y).
-ZEX(x) | S(x).
-S(x) | leq(x,x).
-leq(x,y) | -leq(y,z) | leq(x,z).
-ZEX(x) | -ZEX(y) | y = x.
-ZEX(x) | -S(y) | leq(x,y).
-Max(x) | S(x).
-Max(x) | -ZEX(x).
-Max(x) | -PP(x,y).
Max(x) | -S(x) | ZEX(x) | PP(x,f3(x)).
-Min(x) | S(x).
-Min(x) | -ZEX(x).
-Min(x) | -PP(y,x).
Min(x) | -S(x) | ZEX(x) | PP(f4(x),x).
-PP(x,y) | P(x,y).
-PP(x,y) | y != x.
PP(x,y) | -P(x,y) | y = x.
-P(x,y) | Cont(x,y).
-P(x,y) | EqDim(x,y).
P(x,y) | -Cont(x,y) | -EqDim(x,y).
-EqDim(x,y) | leq(x,y).
-EqDim(x,y) | leq(y,x).
EqDim(x,y) | -leq(x,y) | -leq(y,x).
-Cont(x,y) | leq(x,y).
MinDim(c1).
-S(x) | ZEX(x) | Cont(x,x).
S(x) | -Cont(x,x).
-ZEX(x) | -Cont(x,x).
-Cont(x,y) | -Cont(y,x) | y = x.
-Cont(x,y) | -Cont(y,z) | Cont(x,z).
-ZEX(x) | S(x).
-ZEX(x) | -Cont(y,x).
-ZEX(x) | -Cont(x,y).
-ZEX(x) | -ZEX(y) | y = x.
-SC(x,y) | Cont(f5(x,y),x).
-SC(x,y) | Cont(f5(x,y),y).
-SC(x,y) | -Cont(z,x) | -Cont(z,y) | leq(z,x).
-SC(x,y) | -Cont(z,x) | -Cont(z,y) | -EqDim(z,x).
-SC(x,y) | -Cont(z,x) | -Cont(z,y) | leq(z,y).
-SC(x,y) | -Cont(z,x) | -Cont(z,y) | -EqDim(z,y).
SC(x,y) | -Cont(z,x) | -Cont(z,y) | Cont(f6(x,y),x).
SC(x,y) | -Cont(z,x) | -Cont(z,y) | Cont(f6(x,y),y).
SC(x,y) | -Cont(z,x) | -Cont(z,y) | -leq(f6(x,y),x) | EqDim(f6(x,y),x) | -leq(f6(x,y),y) | EqDim(f6(x,y),y).
-Inc(x,y) | leq(f7(x,y),x) | leq(f8(x,y),y).
-Inc(x,y) | leq(f7(x,y),x) | -EqDim(f8(x,y),y).
-Inc(x,y) | leq(f7(x,y),x) | Cont(f8(x,y),y).
-Inc(x,y) | leq(f7(x,y),x) | P(f8(x,y),x).
-Inc(x,y) | -EqDim(f7(x,y),x) | leq(f8(x,y),y).
-Inc(x,y) | -EqDim(f7(x,y),x) | -EqDim(f8(x,y),y).
-Inc(x,y) | -EqDim(f7(x,y),x) | Cont(f8(x,y),y).
-Inc(x,y) | -EqDim(f7(x,y),x) | P(f8(x,y),x).
-Inc(x,y) | Cont(f7(x,y),x) | leq(f8(x,y),y).
-Inc(x,y) | Cont(f7(x,y),x) | -EqDim(f8(x,y),y).
-Inc(x,y) | Cont(f7(x,y),x) | Cont(f8(x,y),y).
-Inc(x,y) | Cont(f7(x,y),x) | P(f8(x,y),x).
-Inc(x,y) | P(f7(x,y),y) | leq(f8(x,y),y).
-Inc(x,y) | P(f7(x,y),y) | -EqDim(f8(x,y),y).
-Inc(x,y) | P(f7(x,y),y) | Cont(f8(x,y),y).
-Inc(x,y) | P(f7(x,y),y) | P(f8(x,y),x).
Inc(x,y) | -leq(z,x) | EqDim(z,x) | -Cont(z,x) | -P(z,y).
Inc(x,y) | -leq(z,y) | EqDim(z,y) | -Cont(z,y) | -P(z,x).
-PO(x,y) | P(f9(x,y),x).
-PO(x,y) | P(f9(x,y),y).
PO(x,y) | -P(z,x) | -P(z,y).
-C(x,y) | Cont(f10(x,y),x).
-C(x,y) | Cont(f10(x,y),y).
C(x,y) | -Cont(z,x) | -Cont(z,y).
-sf_geometry_collection(x) | -sf_point(x).
-sf_geometry_collection(x) | -sf_curve(x).
-sf_geometry_collection(x) | -sf_surface(x).
-sf_geometry_collection(x) | sf_multi_point(x) | sf_multi_curve(x) | sf_multi_surface(x).
sf_geometry_collection(x) | -sf_multi_point(x).
sf_geometry_collection(x) | -sf_multi_curve(x).
sf_geometry_collection(x) | -sf_multi_surface(x).
-sf_point(x) | -sf_curve(x).
-sf_point(x) | -sf_surface(x).
-sf_point(x) | -sf_geometry_collection(x).
-sf_geometry(x) | sf_point(x) | sf_curve(x) | sf_surface(x) | sf_geometry_collection(x).
sf_geometry(x) | -sf_point(x).
sf_geometry(x) | -sf_curve(x).
sf_geometry(x) | -sf_surface(x).
sf_geometry(x) | -sf_geometry_collection(x).
-sf_surface(x) | -sf_point(x).
-sf_surface(x) | -sf_curve(x).
-sf_surface(x) | -sf_geometry_collection(x).
-sf_curve(x) | -sf_point(x).
-sf_curve(x) | -sf_surface(x).
-sf_curve(x) | -sf_geometry_collection(x).
end_of_list.

============================== end of clauses for search =============

% The maximum domain element in the input is 0.

============================== DOMAIN SIZE 2 =========================

=== Mace4 starting on domain size 2. ===

============================== MODEL =================================

interpretation( 2, [number=1, seconds=0], [

        function(c1, [ 0 ]),

        function(f1(_), [ 0, 0 ]),

        function(f2(_), [ 0, 0 ]),

        function(f3(_), [ 0, 0 ]),

        function(f4(_), [ 0, 0 ]),

        function(f5(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f6(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f7(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f8(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f9(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f10(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(Max(_), [ 1, 0 ]),

        relation(MaxDim(_), [ 1, 0 ]),

        relation(Min(_), [ 1, 0 ]),

        relation(MinDim(_), [ 1, 0 ]),

        relation(PointRegion(_), [ 1, 0 ]),

        relation(S(_), [ 1, 0 ]),

        relation(ZEX(_), [ 0, 0 ]),

        relation(sf_curve(_), [ 0, 0 ]),

        relation(sf_geometry(_), [ 1, 0 ]),

        relation(sf_geometry_collection(_), [ 1, 0 ]),

        relation(sf_multi_curve(_), [ 0, 0 ]),

        relation(sf_multi_point(_), [ 1, 0 ]),

        relation(sf_multi_surface(_), [ 0, 0 ]),

        relation(sf_point(_), [ 0, 0 ]),

        relation(sf_surface(_), [ 0, 0 ]),

        relation(C(_,_), [
			   1, 0,
			   0, 0 ]),

        relation(Cont(_,_), [
			   1, 0,
			   0, 0 ]),

        relation(EqDim(_,_), [
			   1, 0,
			   0, 0 ]),

        relation(Inc(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(P(_,_), [
			   1, 0,
			   0, 0 ]),

        relation(PO(_,_), [
			   1, 0,
			   0, 0 ]),

        relation(PP(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(SC(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(leq(_,_), [
			   1, 0,
			   0, 0 ])
]).

============================== end of model ==========================

============================== STATISTICS ============================

For domain size 2.

Current CPU time: 0.00 seconds (total CPU time: 0.00 seconds).
Ground clauses: seen=373, kept=363.
Selections=41, assignments=41, propagations=58, current_models=1.
Rewrite_terms=207, rewrite_bools=565, indexes=79.
Rules_from_neg_clauses=1, cross_offs=1.

============================== end of statistics =====================

------ process 17348 exit (max_models) ------

User_CPU=0.00, System_CPU=0.03, Wall_clock=0.

Exiting with 1 model.

Process 17348 exit (max_models) Sun Feb 21 06:54:48 2021
The process finished Sun Feb 21 06:54:48 2021

========================== MACLEOD SUMMARY ===========================
reasoner: C:/Users/torsten/macleod/mace4
status: MODEL
execution finished: Sun Feb 21 06:54:53 2021
total CPU time used: 0
The command was "C:/Users/torsten/macleod/mace4 -v0 -t600 -s60 -n2 -N40 -f C:\Users\torsten\GitHub\colore\ontologies\simple_features\sfc_fol\conversions\sfc_fol_multi_point.all.p9"
============================ end of footer ===========================

============================== Mace4 =================================
Mace4 (32) version Oct-2007, Oct 2007.
Process 11376 was started by torsten on LAPTOP-UF9R3IH7,
Mon Mar 15 05:01:53 2021
The command was "/cygdrive/c/Users/torsten/macleod/mace4 -v0 -t600 -s60 -n2 -N40 -f C:\Users\torsten\GitHub\colore\ontologies\owltime\conversions\owltime.all.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file C:\Users\torsten\GitHub\colore\ontologies\owltime\conversions\owltime.all.p9


formulas(sos).
(all t1 all t2 (before(t1,t2) -> t1 != t2)).
(all t1 all t2 (before(t1,t2) -> -before(t2,t1))).
(all t1 all t2 all t3 (before(t1,t2) & before(t2,t3) -> before(t1,t3))).
(all t (Instant(t) -> TemporalEntity(t))).
(all t (Interval(t) -> TemporalEntity(t))).
(all t (TemporalEntity(t) -> Interval(t) | Instant(t))).
(all t all x (begins(t,x) -> Instant(t) & TemporalEntity(x))).
(all t all x (ends(t,x) -> Instant(t) & TemporalEntity(x))).
(all t (Instant(t) <-> begins(t,t))).
(all t (Instant(t) <-> ends(t,t))).
(all x all t1 all t2 (TemporalEntity(x) & begins(t1,x) & begins(t2,x) -> t1 = t2)).
(all x all t1 all t2 (TemporalEntity(x) & ends(t1,x) & ends(t2,x) -> t1 = t2)).
(all x all t1 all t2 (timeBetween(x,t1,t2) -> TemporalEntity(x) & Instant(t1) & Instant(t2))).
(all t1 all t2 (t1 != t2 -> (all x (timeBetween(x,t1,t2) <-> begins(t1,x) & ends(t2,x))))).
(all x all t1 all t2 (Interval(x) & begins(t1,x) & ends(t2,x) -> -before(t2,t1))).
(all x all t1 all t2 (ProperInterval(x) & begins(t1,x) & ends(t2,x) -> before(t1,t2))).
(all t1 all t2 (Instant(t1) & Instant(t2) & before(t1,t2) -> (exists x timeBetween(x,t1,t2)))).
(all x (ProperInterval(x) <-> Interval(x) & (all t1 all t2 (begins(t1,x) & ends(t2,x) -> t1 != t2)))).
(all t all x (inside(t,x) -> Instant(t) & Interval(x))).
(all t all x (beginsOrIn(t,x) <-> begins(t,x) | inside(t,x))).
(all t all t1 all t2 all x (inside(t,x) & begins(t1,x) & ends(t2,x) & ProperInterval(x) -> before(t1,t) & before(t,t2))).
(all t1 all t2 all i (inside(t1,i) & inside(t2,i) -> before(t1,t2) | before(t2,t1) | t1 = t2)).
(all i all t1 all t2 (inside(t1,i) & begins(t2,i) -> before(t2,t1))).
(all i all t1 all t2 (inside(t1,i) & ends(t2,i) -> before(t1,t2))).
(all e (Eventuality(e) -> -TemporalEntity(e))).
(all e all t (atTime(e,t) -> Eventuality(e))).
(all e all t (during(e,t) -> Eventuality(e))).
(all t all e (timeSpan(t,e) -> Eventuality(e) & TemporalEntity(t))).
(all e all t (atTime(e,t) -> Instant(t))).
(all e all t (during(e,t) -> Interval(t))).
(all e all t1 all t2 (during(e,t1) & inside(t2,t1) -> atTime(e,t2))).
(all e all t all t1 (during(e,t) & intDuring(t1,t) -> during(e,t1))).
(all t all e (timeSpan(t,e) & Interval(t) -> during(e,t))).
(all t all e (timeSpan(t,e) & Instant(t) -> atTime(e,t))).
(all t1 all t2 all e (timeSpan(t1,e) & Interval(t2) & atTime(e,t2) -> inside(t2,t1) | begins(t2,t1) | ends(t2,t1))).
(all t all t1 all e (timeSpan(t,e) & Instant(t) & atTime(e,t1) -> t = t1)).
end_of_list.

% From the command line: clear(verbose).

% From the command line: assign(max_seconds, 600).

% From the command line: assign(max_seconds_per, 60).

% From the command line: assign(domain_size, 2).

% From the command line: assign(iterate_up_to, 40).

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all t1 all t2 (before(t1,t2) -> t1 != t2)) # label(non_clause).  [assumption].
2 (all t1 all t2 (before(t1,t2) -> -before(t2,t1))) # label(non_clause).  [assumption].
3 (all t1 all t2 all t3 (before(t1,t2) & before(t2,t3) -> before(t1,t3))) # label(non_clause).  [assumption].
4 (all t (Instant(t) -> TemporalEntity(t))) # label(non_clause).  [assumption].
5 (all t (Interval(t) -> TemporalEntity(t))) # label(non_clause).  [assumption].
6 (all t (TemporalEntity(t) -> Interval(t) | Instant(t))) # label(non_clause).  [assumption].
7 (all t all x (begins(t,x) -> Instant(t) & TemporalEntity(x))) # label(non_clause).  [assumption].
8 (all t all x (ends(t,x) -> Instant(t) & TemporalEntity(x))) # label(non_clause).  [assumption].
9 (all t (Instant(t) <-> begins(t,t))) # label(non_clause).  [assumption].
10 (all t (Instant(t) <-> ends(t,t))) # label(non_clause).  [assumption].
11 (all x all t1 all t2 (TemporalEntity(x) & begins(t1,x) & begins(t2,x) -> t1 = t2)) # label(non_clause).  [assumption].
12 (all x all t1 all t2 (TemporalEntity(x) & ends(t1,x) & ends(t2,x) -> t1 = t2)) # label(non_clause).  [assumption].
13 (all x all t1 all t2 (timeBetween(x,t1,t2) -> TemporalEntity(x) & Instant(t1) & Instant(t2))) # label(non_clause).  [assumption].
14 (all t1 all t2 (t1 != t2 -> (all x (timeBetween(x,t1,t2) <-> begins(t1,x) & ends(t2,x))))) # label(non_clause).  [assumption].
15 (all x all t1 all t2 (Interval(x) & begins(t1,x) & ends(t2,x) -> -before(t2,t1))) # label(non_clause).  [assumption].
16 (all x all t1 all t2 (ProperInterval(x) & begins(t1,x) & ends(t2,x) -> before(t1,t2))) # label(non_clause).  [assumption].
17 (all t1 all t2 (Instant(t1) & Instant(t2) & before(t1,t2) -> (exists x timeBetween(x,t1,t2)))) # label(non_clause).  [assumption].
18 (all x (ProperInterval(x) <-> Interval(x) & (all t1 all t2 (begins(t1,x) & ends(t2,x) -> t1 != t2)))) # label(non_clause).  [assumption].
19 (all t all x (inside(t,x) -> Instant(t) & Interval(x))) # label(non_clause).  [assumption].
20 (all t all x (beginsOrIn(t,x) <-> begins(t,x) | inside(t,x))) # label(non_clause).  [assumption].
21 (all t all t1 all t2 all x (inside(t,x) & begins(t1,x) & ends(t2,x) & ProperInterval(x) -> before(t1,t) & before(t,t2))) # label(non_clause).  [assumption].
22 (all t1 all t2 all i (inside(t1,i) & inside(t2,i) -> before(t1,t2) | before(t2,t1) | t1 = t2)) # label(non_clause).  [assumption].
23 (all i all t1 all t2 (inside(t1,i) & begins(t2,i) -> before(t2,t1))) # label(non_clause).  [assumption].
24 (all i all t1 all t2 (inside(t1,i) & ends(t2,i) -> before(t1,t2))) # label(non_clause).  [assumption].
25 (all e (Eventuality(e) -> -TemporalEntity(e))) # label(non_clause).  [assumption].
26 (all e all t (atTime(e,t) -> Eventuality(e))) # label(non_clause).  [assumption].
27 (all e all t (during(e,t) -> Eventuality(e))) # label(non_clause).  [assumption].
28 (all t all e (timeSpan(t,e) -> Eventuality(e) & TemporalEntity(t))) # label(non_clause).  [assumption].
29 (all e all t (atTime(e,t) -> Instant(t))) # label(non_clause).  [assumption].
30 (all e all t (during(e,t) -> Interval(t))) # label(non_clause).  [assumption].
31 (all e all t1 all t2 (during(e,t1) & inside(t2,t1) -> atTime(e,t2))) # label(non_clause).  [assumption].
32 (all e all t all t1 (during(e,t) & intDuring(t1,t) -> during(e,t1))) # label(non_clause).  [assumption].
33 (all t all e (timeSpan(t,e) & Interval(t) -> during(e,t))) # label(non_clause).  [assumption].
34 (all t all e (timeSpan(t,e) & Instant(t) -> atTime(e,t))) # label(non_clause).  [assumption].
35 (all t1 all t2 all e (timeSpan(t1,e) & Interval(t2) & atTime(e,t2) -> inside(t2,t1) | begins(t2,t1) | ends(t2,t1))) # label(non_clause).  [assumption].
36 (all t all t1 all e (timeSpan(t,e) & Instant(t) & atTime(e,t1) -> t = t1)) # label(non_clause).  [assumption].

============================== end of process non-clausal formulas ===

============================== CLAUSES FOR SEARCH ====================

formulas(mace4_clauses).
-before(x,y) | y != x.
-before(x,y) | -before(y,x).
-before(x,y) | -before(y,z) | before(x,z).
-Instant(x) | TemporalEntity(x).
-Interval(x) | TemporalEntity(x).
-TemporalEntity(x) | Interval(x) | Instant(x).
-begins(x,y) | Instant(x).
-begins(x,y) | TemporalEntity(y).
-ends(x,y) | Instant(x).
-ends(x,y) | TemporalEntity(y).
-Instant(x) | begins(x,x).
Instant(x) | -begins(x,x).
-Instant(x) | ends(x,x).
Instant(x) | -ends(x,x).
-TemporalEntity(x) | -begins(y,x) | -begins(z,x) | z = y.
-TemporalEntity(x) | -ends(y,x) | -ends(z,x) | z = y.
-timeBetween(x,y,z) | TemporalEntity(x).
-timeBetween(x,y,z) | Instant(y).
-timeBetween(x,y,z) | Instant(z).
x = y | -timeBetween(z,y,x) | begins(y,z).
x = y | -timeBetween(z,y,x) | ends(x,z).
x = y | timeBetween(z,y,x) | -begins(y,z) | -ends(x,z).
-Interval(x) | -begins(y,x) | -ends(z,x) | -before(z,y).
-ProperInterval(x) | -begins(y,x) | -ends(z,x) | before(y,z).
-Instant(x) | -Instant(y) | -before(x,y) | timeBetween(f1(x,y),x,y).
-ProperInterval(x) | Interval(x).
-ProperInterval(x) | -begins(y,x) | -ends(z,x) | z != y.
ProperInterval(x) | -Interval(x) | begins(f2(x),x).
ProperInterval(x) | -Interval(x) | ends(f3(x),x).
ProperInterval(x) | -Interval(x) | f3(x) = f2(x).
-inside(x,y) | Instant(x).
-inside(x,y) | Interval(y).
-beginsOrIn(x,y) | begins(x,y) | inside(x,y).
beginsOrIn(x,y) | -begins(x,y).
beginsOrIn(x,y) | -inside(x,y).
-inside(x,y) | -begins(z,y) | -ends(u,y) | -ProperInterval(y) | before(z,x).
-inside(x,y) | -begins(z,y) | -ends(u,y) | -ProperInterval(y) | before(x,u).
-inside(x,y) | -inside(z,y) | before(x,z) | before(z,x) | z = x.
-inside(x,y) | -begins(z,y) | before(z,x).
-inside(x,y) | -ends(z,y) | before(x,z).
-Eventuality(x) | -TemporalEntity(x).
-atTime(x,y) | Eventuality(x).
-during(x,y) | Eventuality(x).
-timeSpan(x,y) | Eventuality(y).
-timeSpan(x,y) | TemporalEntity(x).
-atTime(x,y) | Instant(y).
-during(x,y) | Interval(y).
-during(x,y) | -inside(z,y) | atTime(x,z).
-during(x,y) | -intDuring(z,y) | during(x,z).
-timeSpan(x,y) | -Interval(x) | during(y,x).
-timeSpan(x,y) | -Instant(x) | atTime(y,x).
-timeSpan(x,y) | -Interval(z) | -atTime(y,z) | inside(z,x) | begins(z,x) | ends(z,x).
-timeSpan(x,y) | -Instant(x) | -atTime(y,z) | x = z.
end_of_list.

============================== end of clauses for search =============

% The maximum domain element in the input is 0.

============================== DOMAIN SIZE 2 =========================

=== Mace4 starting on domain size 2. ===

============================== MODEL =================================

interpretation( 2, [number=1, seconds=0], [

        function(f2(_), [ 0, 0 ]),

        function(f3(_), [ 0, 0 ]),

        function(f1(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(Eventuality(_), [ 0, 0 ]),

        relation(Instant(_), [ 0, 0 ]),

        relation(Interval(_), [ 0, 0 ]),

        relation(ProperInterval(_), [ 0, 0 ]),

        relation(TemporalEntity(_), [ 0, 0 ]),

        relation(atTime(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(before(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(begins(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(beginsOrIn(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(during(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(ends(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(inside(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(intDuring(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(timeSpan(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(timeBetween(_,_,_), [
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0 ])
]).

============================== end of model ==========================

============================== STATISTICS ============================

For domain size 2.

Current CPU time: 0.00 seconds (total CPU time: 0.06 seconds).
Ground clauses: seen=288, kept=240.
Selections=20, assignments=20, propagations=42, current_models=1.
Rewrite_terms=10, rewrite_bools=326, indexes=2.
Rules_from_neg_clauses=0, cross_offs=0.

============================== end of statistics =====================

------ process 11376 exit (max_models) ------

User_CPU=0.06, System_CPU=0.01, Wall_clock=0.

Exiting with 1 model.

Process 11376 exit (max_models) Mon Mar 15 05:01:53 2021
The process finished Mon Mar 15 05:01:53 2021

========================== MACLEOD SUMMARY ===========================
reasoner: C:/Users/torsten/macleod/mace4
status: MODEL
execution finished: Mon Mar 15 05:02:06 2021
total CPU time used: 0
The command was "C:/Users/torsten/macleod/mace4 -v0 -t600 -s60 -n2 -N40 -f C:\Users\torsten\GitHub\colore\ontologies\owltime\conversions\owltime.all.p9"
============================ end of footer ===========================
